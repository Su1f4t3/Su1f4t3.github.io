<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>RSA常见攻击</title>
    <url>/2025/03/28/RSA%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>这里将介绍RSA的常见攻击方式。</p>
<span id="more"></span>

<h1 id="Ch993">小明文攻击</h1>
<h2 id="OxaLt">题目1</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(5120)</span><br><span class="line">q = getPrime(5120)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 97</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 1392208858696945158251408085300402884210409327605255122395601049457847957306648819174395014931778575812308192875319127224095733396726388842605854427013313599830150182564652493067830031524869535522568868597852507293377043240832819715539722122306829543983051745406887140154364256267942350230636870212935356815475345989038318923389132101208917912083817520799490534351545373438629367819085151041702754019127891155542476560972125790519584018715794669416759039955180436830478697704458250990786586357019211642837879273967620287257818400267757312623543898635740200839249361087580046496969637043238450499583879116276661827372750638403042213043389905183760455450595752578482968202040860053524276678108325784161897719093223308370971388068813420487879756084379519128232693549989942550047529174783976176943482484756074638704076740157397067892580297182979526978967352014250386678155843772313996171396582929433057131989693861316408604436872931427368192437680361830753162284661119995125858203931094922686321756465463988790748131178263745308042820480140189644732824717255521633534750635979508673908361269979175726073254050574688259969290376926807033728165164896588540691889207252105903436659968119091774687841336252628343233161941187968365128093917171537997137001140227677728923114895809278926486615010954871408034272872411042537353956193868948909981683850857262457369506288525323882308421700421661036191853577105238753230479541719001794464585534292774768292358961920606891227776349593589481547577148801600196035588544512224775960892265021565124673788852875005526313525709353599584812394138968970647681759439523307392275602626903789154682706839530654070108096741181206975334567778238856983205004289416400671597321919876279909765650782227834097342294844294386380646928266942749144240020420237153276705785759403019072953506982997681174635673907151856644499332322321579088035719680421458310273802481031746012298208449699089203065699598926690947025679591160106357130634946357609420125223580319677387654711233585375013067828291928349946599077331636017784447090096340360087970540477975170379810969501197027775838769222713506443846417124839450184827707739588007707714623211453528342755023849716924694572679150284882978804641986457119009272574734697043321033091757474387114449914271460113979531460465175717705674905568446670579332667139075523255580471183372714211547822093365025438653384719374474230360983878837077517864405475258349436531094649276628214288499716485354283135575921258757214288792410583835467572916298688718758374714560819702413058421373661892101033513816116981698045524150518509405086125781764762145577981637953775680403132163846782252745029783387112660812179706752454175492501665442704630131729362621965258498471247871904163412798544329515689112368523703890083138721480476796720323855371775568097188216621368341228806795058046403892301673157631331636430392885315997250027372621883549649614866115616619234953579196607399899485002042456482969222428121605212017146571466818179341621066715472184636758016242256725063854155219754299817717414423725704356940589670902509021070871847017199593680033</span><br><span class="line">e = 97</span><br><span class="line">c = 79418540691422578656139651796213224829563266521211325595707569487401417030874358531413674275017334363641194166574500833916574827523075402219754470871728896772312056257743844227927800121160288525434484105786180547178403828613331285574461293211150728313415280329153597549251599876668080073528625299164784405291297754331374420687599875173508778209038236713812747215157059659564867241144529476211694011692007565732793105429228730285249025627762831080251661835294067942958070742202862164086250986988784472568266652325462247009294865764533077164470382743735937483173523682749295196383707694876943634298051820105410771024861599560176707940488888601355473498847493259474613261665538825299531665650233837474894442826242097663456648233384047622152817959729025415665280499618951478005159820575701483220155180955748454167435711033379910310483689839303198822665341421591234243891877857520663120183063591818656508336831518527692847950877186870610083654117153248336928856886934232488927132245720058243202637258025864487122393335118118013444397135476780564523166548571927547341556616683070253790368891423731046742936358877118104790084195711730135202600692806999992373490439385845158780392894927697171401722699273071306493916233696254958735540772870249139252741670476667099529502282392011715616110876451102234600267482991583515122052976378641894214562203326290939184469206074418127906704847146567350085797480500249400491003993809769407575997740985283755035509654310797061339563655229926356893455738361409861102662109994984398860070584568014471082484198504331014073023689622378943694856212172718725529473812336321642429261822836311084518735006587545920946664595488768239633950124822001162595168106106356115962424210028401369438479550293237915944302351566624339603616714683958384871326105542659559877758488581425288668613061792514360263277530824203967659102107889148367539858141289229124274098921748855341045565232484417195620758495861456624842263649414501657786484816662971421962216348340311859717286253287173293151613310383128702607971580042308515018120559903265609733911340589091613087560931098833849573462572181625894166772788435459280323623477689159384354671220634694792005231505741029567734616435905915192606539962414882105254409847885996949466940350184140166614950171110955365828033747003120697209120916652982201967537088553504504252785632280900095976870510754563400828951684036526240669112248351928072177486091157562600003336544767896806392523395037345770580482363058065676920013089896399387769312374871419827762872050800055872960573607645266626972865053489632548224840580503746879607167797904430560935476705014800973841917939689270919224595772574781478285359220463175042728750523639669204218676238297875644055563803457896409252533724486937378974745777400567080239687055154021761534918106133195512030935957251049812753269173090858930245212145938555697547499155977225759702066548720079477737104010668116693232798415289735481194922014811945312893853446826780868861295203942063380964100360870361328125</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="vUoRt">分析</h2>
这是明文过小，导致明文的e次方仍然小于n。



<p>回想 RSA 加密</p>
<pre><code>                                                    c = m ^ e % n
</code></pre>
<p>在这道题中，n 的值很大，无法分解，但是 c 的值比 n 小很多，说明 m 也很小，同时 e 的值也很小（为97）。</p>
<p>所以我么们可以猜测出</p>
<pre><code>                                                       m ^ e &lt; n
</code></pre>
<p>所以不用模 n，n 不用管，则</p>
<pre><code>                                                       c = m ^ e
</code></pre>
<p>直接开方便可计算出 m 。</p>
<h2 id="FYtD1">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">n  = 1392208858696945158251408085300402884210409327605255122395601049457847957306648819174395014931778575812308192875319127224095733396726388842605854427013313599830150182564652493067830031524869535522568868597852507293377043240832819715539722122306829543983051745406887140154364256267942350230636870212935356815475345989038318923389132101208917912083817520799490534351545373438629367819085151041702754019127891155542476560972125790519584018715794669416759039955180436830478697704458250990786586357019211642837879273967620287257818400267757312623543898635740200839249361087580046496969637043238450499583879116276661827372750638403042213043389905183760455450595752578482968202040860053524276678108325784161897719093223308370971388068813420487879756084379519128232693549989942550047529174783976176943482484756074638704076740157397067892580297182979526978967352014250386678155843772313996171396582929433057131989693861316408604436872931427368192437680361830753162284661119995125858203931094922686321756465463988790748131178263745308042820480140189644732824717255521633534750635979508673908361269979175726073254050574688259969290376926807033728165164896588540691889207252105903436659968119091774687841336252628343233161941187968365128093917171537997137001140227677728923114895809278926486615010954871408034272872411042537353956193868948909981683850857262457369506288525323882308421700421661036191853577105238753230479541719001794464585534292774768292358961920606891227776349593589481547577148801600196035588544512224775960892265021565124673788852875005526313525709353599584812394138968970647681759439523307392275602626903789154682706839530654070108096741181206975334567778238856983205004289416400671597321919876279909765650782227834097342294844294386380646928266942749144240020420237153276705785759403019072953506982997681174635673907151856644499332322321579088035719680421458310273802481031746012298208449699089203065699598926690947025679591160106357130634946357609420125223580319677387654711233585375013067828291928349946599077331636017784447090096340360087970540477975170379810969501197027775838769222713506443846417124839450184827707739588007707714623211453528342755023849716924694572679150284882978804641986457119009272574734697043321033091757474387114449914271460113979531460465175717705674905568446670579332667139075523255580471183372714211547822093365025438653384719374474230360983878837077517864405475258349436531094649276628214288499716485354283135575921258757214288792410583835467572916298688718758374714560819702413058421373661892101033513816116981698045524150518509405086125781764762145577981637953775680403132163846782252745029783387112660812179706752454175492501665442704630131729362621965258498471247871904163412798544329515689112368523703890083138721480476796720323855371775568097188216621368341228806795058046403892301673157631331636430392885315997250027372621883549649614866115616619234953579196607399899485002042456482969222428121605212017146571466818179341621066715472184636758016242256725063854155219754299817717414423725704356940589670902509021070871847017199593680033</span><br><span class="line">e = 97</span><br><span class="line">c = 79418540691422578656139651796213224829563266521211325595707569487401417030874358531413674275017334363641194166574500833916574827523075402219754470871728896772312056257743844227927800121160288525434484105786180547178403828613331285574461293211150728313415280329153597549251599876668080073528625299164784405291297754331374420687599875173508778209038236713812747215157059659564867241144529476211694011692007565732793105429228730285249025627762831080251661835294067942958070742202862164086250986988784472568266652325462247009294865764533077164470382743735937483173523682749295196383707694876943634298051820105410771024861599560176707940488888601355473498847493259474613261665538825299531665650233837474894442826242097663456648233384047622152817959729025415665280499618951478005159820575701483220155180955748454167435711033379910310483689839303198822665341421591234243891877857520663120183063591818656508336831518527692847950877186870610083654117153248336928856886934232488927132245720058243202637258025864487122393335118118013444397135476780564523166548571927547341556616683070253790368891423731046742936358877118104790084195711730135202600692806999992373490439385845158780392894927697171401722699273071306493916233696254958735540772870249139252741670476667099529502282392011715616110876451102234600267482991583515122052976378641894214562203326290939184469206074418127906704847146567350085797480500249400491003993809769407575997740985283755035509654310797061339563655229926356893455738361409861102662109994984398860070584568014471082484198504331014073023689622378943694856212172718725529473812336321642429261822836311084518735006587545920946664595488768239633950124822001162595168106106356115962424210028401369438479550293237915944302351566624339603616714683958384871326105542659559877758488581425288668613061792514360263277530824203967659102107889148367539858141289229124274098921748855341045565232484417195620758495861456624842263649414501657786484816662971421962216348340311859717286253287173293151613310383128702607971580042308515018120559903265609733911340589091613087560931098833849573462572181625894166772788435459280323623477689159384354671220634694792005231505741029567734616435905915192606539962414882105254409847885996949466940350184140166614950171110955365828033747003120697209120916652982201967537088553504504252785632280900095976870510754563400828951684036526240669112248351928072177486091157562600003336544767896806392523395037345770580482363058065676920013089896399387769312374871419827762872050800055872960573607645266626972865053489632548224840580503746879607167797904430560935476705014800973841917939689270919224595772574781478285359220463175042728750523639669204218676238297875644055563803457896409252533724486937378974745777400567080239687055154021761534918106133195512030935957251049812753269173090858930245212145938555697547499155977225759702066548720079477737104010668116693232798415289735481194922014811945312893853446826780868861295203942063380964100360870361328125</span><br><span class="line"></span><br><span class="line">m = iroot(c, e)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m[0]))</span><br><span class="line"></span><br><span class="line">#NSSCTF&#123;small&#125;</span><br></pre></td></tr></table></figure>



<h2 id="qdKjB">题目2</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#x27;n=&#x27;, &#x27;0x9683f5f8073b6cd9df96ee4dbe6629c7965e1edd2854afa113d80c44f5dfcf030a18c1b2ff40575fe8e222230d7bb5b6dd8c419c9d4bca1a7e84440a2a87f691e2c0c76caaab61492db143a61132f584ba874a98363c23e93218ac83d1dd715db6711009ceda2a31820bbacaf1b6171bbaa68d1be76fe986e4b4c1b66d10af25L&#x27;)</span><br><span class="line">(&#x27;e=&#x27;, &#x27;0x3&#x27;)</span><br><span class="line">(&#x27;c=&#x27;, &#x27;0x8541ee560f77d8fe536d48eab425b0505e86178e6ffefa1b0c37ccbfc6cb5f9a7727baeb3916356d6fce3205cd4e586a1cc407703b3f709e2011d7b66eaaeea9e381e595b4d515c433682eb3906d9870fadbffd0695c0168aa26447f7a049c260456f51e937ce75b74e5c3c2bd7709b981898016a3a18f15ae99763ff40805aaL&#x27;)</span><br></pre></td></tr></table></figure>



<h2 id="x8D0Q">分析</h2>
明文的三次方虽然比n大，但是大不了多少。

<p>因为本题中加密指数e很小，我们可以考虑 m^e 的值并不是特别大，则我们可以通过遍历k的方式将取模后丢失的</p>
<p><font style="color:rgb(36, 41, 47);">信息找回来，遍历到何时停止呢，当 c+kn 是一个完全e次方数时，则说明我们得到了正确的答案。</font></p>
<h2 id="jGMYQ">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">n=0x9683f5f8073b6cd9df96ee4dbe6629c7965e1edd2854afa113d80c44f5dfcf030a18c1b2ff40575fe8e222230d7bb5b6dd8c419c9d4bca1a7e84440a2a87f691e2c0c76caaab61492db143a61132f584ba874a98363c23e93218ac83d1dd715db6711009ceda2a31820bbacaf1b6171bbaa68d1be76fe986e4b4c1b66d10af25</span><br><span class="line">e=0x3</span><br><span class="line">c=0x8541ee560f77d8fe536d48eab425b0505e86178e6ffefa1b0c37ccbfc6cb5f9a7727baeb3916356d6fce3205cd4e586a1cc407703b3f709e2011d7b66eaaeea9e381e595b4d515c433682eb3906d9870fadbffd0695c0168aa26447f7a049c260456f51e937ce75b74e5c3c2bd7709b981898016a3a18f15ae99763ff40805aa</span><br><span class="line"></span><br><span class="line">for k in range(100000):    #遍历的范围</span><br><span class="line">    cc = c + k*n</span><br><span class="line">    res = iroot(cc, e)</span><br><span class="line">    if res[1]:        #这里的res[1]的值其实是true或false</span><br><span class="line">        m = res[0]</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">print(&#x27;k:&#x27;,k) # 11</span><br><span class="line"></span><br><span class="line"># flag is testflag111111111111111111111111111</span><br></pre></td></tr></table></figure>



<h2 id="GgBp0">题目3</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag= 25166751653530941364839663846806543387720865339263370907985655775152187319464715737116599171477207047430065345882626259880756839094179627032623895330242655333</span><br><span class="line">n= 134109481482703713214838023035418052567000870587160796935708584694132507394211363652420160931185332280406437290210512090663977634730864032370977407179731940068634536079284528020739988665713200815021342700369922518406968356455736393738946128013973643235228327971170711979683931964854563904980669850660628561419</span><br></pre></td></tr></table></figure>



<h2 id="mPPBL">分析</h2>
没有给 e 的值，直接爆破。



<h2 id="wPkdF">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag= 25166751653530941364839663846806543387720865339263370907985655775152187319464715737116599171477207047430065345882626259880756839094179627032623895330242655333</span><br><span class="line">n= 134109481482703713214838023035418052567000870587160796935708584694132507394211363652420160931185332280406437290210512090663977634730864032370977407179731940068634536079284528020739988665713200815021342700369922518406968356455736393738946128013973643235228327971170711979683931964854563904980669850660628561419</span><br><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">for e in range(2,10000):</span><br><span class="line">    a = gmpy2.iroot(flag,e)</span><br><span class="line">    if a[1]:</span><br><span class="line">        print(long_to_bytes(a[0]))</span><br><span class="line">        break</span><br><span class="line">        </span><br><span class="line"># b&#x27;NSSCTF&#123;because_i_like&#125;&#x27;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="m68c0">低加密指数攻击</h1>
<h2 id="mphmt">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 3</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 111573371787314339229652810703380127177507745009618224416171957526984270337589283887959174610818933914845556276472159360153787395638087723501889651641965684241070152541291185349571453536221312112508437223801640552330390095266644485311958102687735113533739324296417077804219395793942670324182191309872918900717</span><br><span class="line">e = 3</span><br><span class="line">c = 90782646242308381145716338972639920044710403094882163620436540965475107006005657722222634294458956650085252212452241377251397323707019480880284004845674260662647720809672266571040936376737882878688872281858048646517100139303896804340224961592424635124272549514473232731744884837572128596217771005209683966262</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="DWYEg">分析</h2>
本题为低加密指数攻击例题（即e很小，为低加密指数）

<p>就是小明文攻击的第二题。</p>
<p>因为本题中加密指数e很小，我们可以考虑 m^e 的值并不是特别大，则我们可以通过遍历k的方式将取模后丢失的</p>
<p>信息找回来，遍历到何时停止呢，当 c+kn 是一个完全e次方数时，则说明我们得到了正确的答案。</p>
<h2 id="noT3e">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">n = 111573371787314339229652810703380127177507745009618224416171957526984270337589283887959174610818933914845556276472159360153787395638087723501889651641965684241070152541291185349571453536221312112508437223801640552330390095266644485311958102687735113533739324296417077804219395793942670324182191309872918900717</span><br><span class="line">e = 3</span><br><span class="line">c = 90782646242308381145716338972639920044710403094882163620436540965475107006005657722222634294458956650085252212452241377251397323707019480880284004845674260662647720809672266571040936376737882878688872281858048646517100139303896804340224961592424635124272549514473232731744884837572128596217771005209683966262</span><br><span class="line"></span><br><span class="line">for k in range(100000):    #遍历的范围</span><br><span class="line">    cc = c + k*n</span><br><span class="line">    res = iroot(cc, e)</span><br><span class="line">    if res[1]:        #这里的res[1]的值其实是true或false</span><br><span class="line">        m = res[0]</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">print(&#x27;k:&#x27;,k) # 11</span><br><span class="line"></span><br><span class="line">#NSSCTF&#123;i_think_small_e_is_not_safe_enough!&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="VCLVd">Rabin算法攻击</h1>
<h2 id="Ji6z4">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(256)</span><br><span class="line">q = getPrime(256)</span><br><span class="line"></span><br><span class="line">assert p%4 == 3 and q%4 == 3</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 2</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;p = &#123;p&#125;&#x27;)</span><br><span class="line">print(f&#x27;q = &#123;q&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">p = 67711062621608175960173275013534737889372437946924512522469843485353704013203</span><br><span class="line">q = 91200252033239924238625443698357031288749612243099728355449192607988117291739</span><br><span class="line">e = 2</span><br><span class="line">c = 5251890478898826530186837207902117236305266861227697352434308106457554098811792713226801824100629792962861125855696719512180887415808454466978721678349614</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="aXnNV">分析</h2>
Rabin 算法的特征在于 e = 2 。

<p>Rabin密钥的生成 </p>
<pre><code>1.生成两个大的素数p,q,让他们同时满足 p ≡ q ≡ 3 (mod 4)  (p , q 可以表示为4 k + 3 的数学形式)     

2.n=p*q
</code></pre>
<p>我是原理的搬运工：<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_e_attack/#_8">攻击原理</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1743151164974-312ead46-066e-43ce-bc1a-d19c5fdecf86.png"></p>
<p>套板子就行。</p>
<h2 id="AlFNb">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">p = 67711062621608175960173275013534737889372437946924512522469843485353704013203</span><br><span class="line">q = 91200252033239924238625443698357031288749612243099728355449192607988117291739</span><br><span class="line">e = 2</span><br><span class="line">c = 5251890478898826530186837207902117236305266861227697352434308106457554098811792713226801824100629792962861125855696719512180887415808454466978721678349614</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">def rabin(c):</span><br><span class="line">    mp = pow(c, (p + 1) // 4, p)</span><br><span class="line">    mq = pow(c, (q + 1) // 4, q)</span><br><span class="line"></span><br><span class="line">    yp = inverse(p,q)</span><br><span class="line">    yq = inverse(q,p)</span><br><span class="line"></span><br><span class="line">    a = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    b = n - int(a)</span><br><span class="line">    c = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    d = n - int(c)</span><br><span class="line"></span><br><span class="line">    aa = [a, b, c, d]</span><br><span class="line"></span><br><span class="line">    for i in aa:</span><br><span class="line">        print(i)</span><br><span class="line">        print(long_to_bytes(i))</span><br><span class="line"></span><br><span class="line">m = rabin(c)</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;rabin!rabin!rabin!not_just_rsa!&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="xO2YE">Wiener攻击（低解密指数攻击）</h1>
<font style="color:rgb(36, 41, 47);">主要利用的是私钥d很小，表现形式一般是e很大</font>

<h2 id="woPiK">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(256)</span><br><span class="line">q = getPrime(256)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">d = getPrime(128)</span><br><span class="line">e = inverse(d, (p-1)*(q-1))</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 6969872410035233098344189258766624225446081814953480897731644163180991292913719910322241873463164232700368119465476508174863062276659958418657253738005689</span><br><span class="line">e = 3331016607237504021038095412236348385663413736904453330557803644384818257225138777641344877202234881627514102078530507171735156112302207979925588113589669</span><br><span class="line">c = 1754994938947260364311041300467524420957926989584983693004487724099773647229373820465164193428679197813476633649362998772470084452129370353136199193923837</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="r9MVJ">分析</h2>
仔细分析题目，会发现这道题和寻常的 RSA 有一处不同的地方，这道题时先生成 d ，再根据 d 生成 e 。这样子

<p>的话，平时的方法就用不上了，此时，我们引入一个攻击方法：<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/#wiener">wiener攻击</a></p>
<p>使用条件：</p>
<pre><code>                                                            d &lt; 1/3 * N ^ (1/4)
</code></pre>
<p>回想一下RSA</p>
<pre><code>                                                                     N = pq

                                                 phi = (p - 1)(q - 1) = N - (p+q) + 1
</code></pre>
<p>因为 p、q 的值很大，所以 </p>
<pre><code>                                                         pq &gt;&gt; p+q ,所以 phi ≈ N
</code></pre>
<p>因为 </p>
<pre><code>                                                                ed ≡ 1 (mod phi) 
</code></pre>
<p>所以 </p>
<pre><code>                                                                  ed - 1= k*phi 
</code></pre>
<p>等式两边同时除以 d*phi ，得 </p>
<pre><code>                                                           e/phi - k/d = 1/(d*phi)
</code></pre>
<p>因为 phi ≈ N ，所以 </p>
<pre><code>                                                             e/N - k/d = 1/(d*phi)
</code></pre>
<p>因为 d*phi 是一个很大的数，所以 </p>
<pre><code>                                                                    e/N ≈ k/d
</code></pre>
<p>wiener 便证明了当 d &lt; 1&#x2F;3 * N ^ (1&#x2F;4) 时，可以通过对 e&#x2F;N 进行连分数展开精准覆盖 k&#x2F;d 。</p>
<p>套板子</p>
<h2 id="Tn7qK">题解1</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 6969872410035233098344189258766624225446081814953480897731644163180991292913719910322241873463164232700368119465476508174863062276659958418657253738005689</span><br><span class="line">e = 3331016607237504021038095412236348385663413736904453330557803644384818257225138777641344877202234881627514102078530507171735156112302207979925588113589669</span><br><span class="line">c = 1754994938947260364311041300467524420957926989584983693004487724099773647229373820465164193428679197813476633649362998772470084452129370353136199193923837</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ContinuedFraction():</span><br><span class="line">    def __init__(self, numerator, denumerator):</span><br><span class="line">        self.numberlist = []  # number in continued fraction</span><br><span class="line">        self.fractionlist = []  # the near fraction list</span><br><span class="line">        self.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        self.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    def GenerateNumberList(self, numerator, denumerator):</span><br><span class="line">        while numerator != 1:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            self.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    def GenerateFractionList(self):</span><br><span class="line">        self.fractionlist.append([self.numberlist[0], 1])</span><br><span class="line">        for i in range(1, len(self.numberlist)):</span><br><span class="line">            numerator = self.numberlist[i]</span><br><span class="line">            denumerator = 1</span><br><span class="line">            for j in range(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * self.numberlist[i - j - 1]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            self.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, n)</span><br><span class="line">for k, d in a.fractionlist:</span><br><span class="line">    m = powmod(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line">    if b&#x27;NSSCTF&#x27; in flag:</span><br><span class="line">        print(flag)</span><br><span class="line">        </span><br><span class="line"># NSSCTF&#123;e_is_so_huge&#125;</span><br></pre></td></tr></table></figure>

<p>或者下载<a href="https://github.com/pablocelayes/rsa-wiener-attack">wiener攻击的包</a></p>
<h2 id="cggHK">题解2</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from RSAwienerHacker import *</span><br><span class="line">import libnum</span><br><span class="line"></span><br><span class="line">n = 6969872410035233098344189258766624225446081814953480897731644163180991292913719910322241873463164232700368119465476508174863062276659958418657253738005689</span><br><span class="line">e = 3331016607237504021038095412236348385663413736904453330557803644384818257225138777641344877202234881627514102078530507171735156112302207979925588113589669</span><br><span class="line">c = 1754994938947260364311041300467524420957926989584983693004487724099773647229373820465164193428679197813476633649362998772470084452129370353136199193923837</span><br><span class="line"></span><br><span class="line">d = hack_RSA(e, n)</span><br><span class="line">flag = long_to_bytes(pow(c, d, n))</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;e_is_so_huge&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="EI0io">低加密指数广播攻击</h1>
<font style="color:rgb(36, 41, 47);">场景：</font>

<p><font style="color:rgb(36, 41, 47);">如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击</font></p>
<p><font style="color:rgb(36, 41, 47);">得到明文。<br></font><font style="color:rgb(36, 41, 47);">这个识别起来比较简单，一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都</font></p>
<p><font style="color:rgb(36, 41, 47);">是一样的，并且 e 都取了一个较小的数字。</font>  </p>
<h2 id="eFQg6">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = xxxxxxxx</span><br><span class="line">e = 65537</span><br><span class="line">========== n c ==========</span><br><span class="line">n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br><span class="line">c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><span class="line">n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br><span class="line">c = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span><br><span class="line">n = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span><br><span class="line">c = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span><br><span class="line">n = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span><br><span class="line">c = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span><br><span class="line">n = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span><br><span class="line">c = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span><br><span class="line">n = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span><br><span class="line">c = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span><br><span class="line">n = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span><br><span class="line">c = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span><br><span class="line">n = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span><br><span class="line">c = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span><br><span class="line">n = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span><br><span class="line">c = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span><br><span class="line">n = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span><br><span class="line">c = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span><br><span class="line">n = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span><br><span class="line">c = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span><br><span class="line">n = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span><br><span class="line">c = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span><br><span class="line">n = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span><br><span class="line">c = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span><br><span class="line">n = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span><br><span class="line">c = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span><br><span class="line">n = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span><br><span class="line">c = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span><br><span class="line">n = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span><br><span class="line">c = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span><br><span class="line">n = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span><br><span class="line">c = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span><br><span class="line">n = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span><br><span class="line">c = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span><br><span class="line">n = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span><br><span class="line">c = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span><br><span class="line">n = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span><br><span class="line">c = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><br></pre></td></tr></table></figure>



<h2 id="MEEdQ">分析</h2>
特点：

<p><font style="color:rgb(76, 73, 72);">    1、加密指数 e 非常小</font></p>
<p><font style="color:rgb(76, 73, 72);">    2、一份明文使用不同的模数 n ，相同的加密指数e进行多次加密</font></p>
<p><font style="color:rgb(76, 73, 72);">    3、可以拿到每一份加密后的密文和对应的模数 n 、加密指数 e 。</font></p>
<p><font style="color:rgb(76, 73, 72);"></font></p>
<p><font style="color:rgb(76, 73, 72);">由于模数 n 只能分解为 p 和 q ，所以当 n 很多时，p 或 q 有相同的风险，</font></p>
<p><font style="color:rgb(76, 73, 72);">因此不同的模数 n 中可能存在相同的 p 或者说 q ，</font></p>
<p><font style="color:rgb(76, 73, 72);">求出不同 n 之间的最大公约数 gcd()，如果大于1说明这里存在漏洞，可以继续攻击，</font></p>
<p><font style="color:rgb(76, 73, 72);">所得到的最大公约数就是 p 或 q ，然后可得 d ，</font></p>
<p><font style="color:rgb(76, 73, 72);">有私钥d就能得到明文。</font></p>
<h2 id="HGTWw">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line"> </span><br><span class="line">e = 65537</span><br><span class="line"> </span><br><span class="line">n0 = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br><span class="line">c0 = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><span class="line"> </span><br><span class="line">n1 = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br><span class="line">c1 = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span><br><span class="line"> </span><br><span class="line">n2 = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span><br><span class="line">c2 = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span><br><span class="line"> </span><br><span class="line">n3 = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span><br><span class="line">c3 = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span><br><span class="line"> </span><br><span class="line">n4 = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span><br><span class="line">c4 = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span><br><span class="line"> </span><br><span class="line">n5 = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span><br><span class="line">c5 = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span><br><span class="line"> </span><br><span class="line">n6 = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span><br><span class="line">c6 = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span><br><span class="line"> </span><br><span class="line">n7 = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span><br><span class="line">c7 = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span><br><span class="line"> </span><br><span class="line">n8 = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span><br><span class="line">c8 = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span><br><span class="line"> </span><br><span class="line">n9 = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span><br><span class="line">c9 = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span><br><span class="line"> </span><br><span class="line">n10 = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span><br><span class="line">c10 = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span><br><span class="line"> </span><br><span class="line">n11 = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span><br><span class="line">c11 = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span><br><span class="line"> </span><br><span class="line">n12 = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span><br><span class="line">c12 = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span><br><span class="line"> </span><br><span class="line">n13 = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span><br><span class="line">c13 = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span><br><span class="line"> </span><br><span class="line">n14 = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span><br><span class="line">c14 = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span><br><span class="line"> </span><br><span class="line">n15 = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span><br><span class="line">c15 = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span><br><span class="line"> </span><br><span class="line">n16 = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span><br><span class="line">c16 = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span><br><span class="line">n17 = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span><br><span class="line">c17 = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span><br><span class="line"> </span><br><span class="line">n18 = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span><br><span class="line">c18 = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span><br><span class="line"> </span><br><span class="line">n19 = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span><br><span class="line">c19 = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><br><span class="line"> </span><br><span class="line">n=[n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18]</span><br><span class="line">c=[c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18]</span><br><span class="line"> </span><br><span class="line">for i in range(len(n)):</span><br><span class="line">    for j in range(len(n)):</span><br><span class="line">        if(i!=j):</span><br><span class="line">            if(gmpy2.gcd(n[i],n[j])!=1):   #对不同的n进行 欧几里得算法，以求出最大公约数(p)</span><br><span class="line">                print(i,j)                 #输出对应的n的序号</span><br><span class="line">                p = gmpy2.gcd(n[i],n[j])</span><br><span class="line">                print(&quot;p = &quot;,p)</span><br><span class="line">                q = n[i] // p</span><br><span class="line">                print(&quot;q = &quot;,q)</span><br><span class="line">                d = gmpy2.invert(e , (p-1)*(q-1))</span><br><span class="line">                print(&quot;d = &quot;,d)</span><br><span class="line">                m = pow(c[i],d,n[i])</span><br><span class="line">                print(&quot;m = &quot;,m)</span><br><span class="line">print(libnum.n2s(int(m)))</span><br><span class="line"></span><br><span class="line"># flag&#123;abdcbe5fd94e23b3de429223ab9c2fdf&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="jIKdF">p-1光滑攻击</h1>
前置知识：

<p>1、光滑数：</p>
<p>光滑数 (Smooth number)：指可以分解为小素数乘积的正整数</p>
<p>若一正整数的素因数均不大于B，此整数即为B-光滑数。例如1620的约数分解为2^2 × 3^4 × 5，素因数均不大</p>
<p>于5，因此1620是 5-光滑数。  </p>
<p>10和12的约数分解分别为2 × 5和2^2 × 3，二者素因数也都不大于5，因此二者均是是5-光滑数，虽然其素因数</p>
<p>未包括不大于5的所有素数，但仍然可以是5-光滑数。</p>
<p>2、Pollard’s p-1算法概述：</p>
<p>根据费马小定理，对于任何与p互质的整数a，有：</p>
<pre><code>                                                          a^(p-1) ≡ 1 (mod p)
</code></pre>
<p>如果 p-1 的所有素因子都比较小（即 p-1 是B-光滑的），那么我们可以选择一个适当的边界 B，计算：</p>
<pre><code>                                                          M=lcm(1,2,3,…,B)
</code></pre>
<p>即 M 是 1 到 B 所有整数的最小公倍数。由于 p-1 的所有素因子都 ≤B ，p-1 必然整除 M 。因此：</p>
<pre><code>                                                          a^M ≡ 1 (mod p)
</code></pre>
<p>这意味着p整除 a^M − 1 。如果a^M - 1与 N 有公因数 p ，那么通过计算 gcd(a^M - 1, N) 就可能得到 p 。</p>
<p>python代码实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from gmpy2 import *</span><br><span class="line">a = 2</span><br><span class="line">m = 2</span><br><span class="line">while True:</span><br><span class="line">    a = powmod(a, m, n)</span><br><span class="line">    p = gcd(a-1, n)</span><br><span class="line">    if p != 1 and p != n:</span><br><span class="line">        q = n // p</span><br><span class="line">        d = invert(e, (p-1)*(q-1))</span><br><span class="line">        m = powmod(c, d, n)</span><br><span class="line">        print(long_to_bytes(m))</span><br><span class="line">        break</span><br><span class="line">    m += 1</span><br></pre></td></tr></table></figure>





<h2 id="qBK5g">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from random import choice</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">def getMyPrime(nbits):</span><br><span class="line">    while True:</span><br><span class="line">        p = 1</span><br><span class="line">        while p.bit_length() &lt;= nbits:</span><br><span class="line">            p *= choice(sieve_base)</span><br><span class="line">        </span><br><span class="line">        if isPrime(p+1):</span><br><span class="line">            return p+1</span><br><span class="line"></span><br><span class="line">p = getMyPrime(256)</span><br><span class="line">q = getMyPrime(256)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 53763529836257082401813045869248978487210852880716446938539970599235060144454914000042178896730979463959004404421520555831136502171902051936080825853063287829</span><br><span class="line">e = 65537</span><br><span class="line">c = 50368170865606429432907125510556310647510431461588875539696416879298699197677994843344925466156992948241894107250131926237473102312181031875514294014181272618</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="q2v6V">分析</h2>
getMyPrime 函数：

<p>这个函数不断地从一个小质数集合 sieve_base 中随机选择质数，并将它们相乘，直到乘积的比特位数超过指定的 </p>
<p>nbits。然后它将这个积加 1，如果结果是质数，就返回这个数作为质数 p。</p>
<p>关键点：</p>
<p>由于 p 是通过“乘积+1”的方式生成的，实际上 p-1 就是那个小质数们的乘积。</p>
<p>这意味着 p-1 的因子都比较小，容易被分解，也就是说 p-1 是一个平滑数（B-smooth）。</p>
<h2 id="XV2rb">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 53763529836257082401813045869248978487210852880716446938539970599235060144454914000042178896730979463959004404421520555831136502171902051936080825853063287829</span><br><span class="line">e = 65537</span><br><span class="line">c = 50368170865606429432907125510556310647510431461588875539696416879298699197677994843344925466156992948241894107250131926237473102312181031875514294014181272618</span><br><span class="line"></span><br><span class="line">a = 2</span><br><span class="line">m = 2</span><br><span class="line">while True:</span><br><span class="line">    a = powmod(a, m, n)</span><br><span class="line">    p = gcd(a-1, n)</span><br><span class="line">    if p != 1 and p != n:</span><br><span class="line">        break</span><br><span class="line">    m += 1                        # 循环中不断增大 m，逐步试探使得 p | (2^m - 1) 的 m 值。</span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;p-1_smooth_with_factor&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="e6tyO">p+1光滑攻击</h1>
[攻击原理](https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#p-1_1)



<p>python代码实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def mlucas(v, a, n):</span><br><span class="line">    &quot;&quot;&quot; Helper function for williams_pp1().  Multiplies along a Lucas sequence modulo n. &quot;&quot;&quot;</span><br><span class="line">    v1, v2 = v, (v**2 - 2) % n</span><br><span class="line">    for bit in bin(a)[3:]: v1, v2 = ((v1**2 - 2) % n, (v1*v2 - v) % n) if bit == &quot;0&quot; else ((v1*v2 - v) % n, (v2**2 - 2) % n)</span><br><span class="line">    return v1</span><br><span class="line"> </span><br><span class="line">for v in count(1):</span><br><span class="line">    for p in primegen():</span><br><span class="line">        e = ilog(isqrt(n), p)</span><br><span class="line">        if e == 0: break</span><br><span class="line">        for _ in xrange(e): v = mlucas(v, p, n)</span><br><span class="line">        g = gcd(v-2, n)</span><br><span class="line">        if 1 &lt; g &lt; n: return g # g|n</span><br><span class="line">        if g == n: break</span><br></pre></td></tr></table></figure>



<h2 id="Xj9nc">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from random import choice</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">def getMyPrime(nbits):</span><br><span class="line">    while True:</span><br><span class="line">        p = 1</span><br><span class="line">        while p.bit_length() &lt;= nbits:</span><br><span class="line">            p *= choice(sieve_base)</span><br><span class="line">        </span><br><span class="line">        if isPrime(p-1):</span><br><span class="line">            return p-1</span><br><span class="line"></span><br><span class="line">p = getMyPrime(256)</span><br><span class="line">q = getMyPrime(256)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 63398538193562720708999492397588489035970399414238113344990243900620729661046648078623873637152448697806039260616826648343172207246183989202073562200879290937</span><br><span class="line">e = 65537</span><br><span class="line">c = 26971181342240802276810747395669930355754928952080329914687241779532014305320191048439959934699795162709365987652696472998140484810728817991804469778237933925</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="Gcgki">分析</h2>
题目和上一题差不多一样，就是 p 是通过“乘积+1”的方式生成的，实际上 p+1 就是那个小质数们的乘积。

<p>但是其中的原理和推导就变得复杂多得多得多了。</p>
<p>都是套板子</p>
<h2 id="D6Luv">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from itertools import count</span><br><span class="line"></span><br><span class="line">n = 63398538193562720708999492397588489035970399414238113344990243900620729661046648078623873637152448697806039260616826648343172207246183989202073562200879290937</span><br><span class="line">e = 65537</span><br><span class="line">c = 26971181342240802276810747395669930355754928952080329914687241779532014305320191048439959934699795162709365987652696472998140484810728817991804469778237933925</span><br><span class="line"></span><br><span class="line">def mlucas(v, a, n):</span><br><span class="line">    v1, v2 = v, (v ** 2 - 2) % n</span><br><span class="line">    for bit in bin(a)[3:]: v1, v2 = ((v1 ** 2 - 2) % n, (v1 * v2 - v) % n) if bit == &quot;0&quot; else (</span><br><span class="line">        (v1 * v2 - v) % n, (v2 ** 2 - 2) % n)</span><br><span class="line">    return v1</span><br><span class="line"></span><br><span class="line">def primegen():</span><br><span class="line">    yield 2</span><br><span class="line">    yield 3</span><br><span class="line">    yield 5</span><br><span class="line">    yield 7</span><br><span class="line">    yield 11</span><br><span class="line">    yield 13</span><br><span class="line">    ps = primegen()  # yay recursion</span><br><span class="line">    p = ps.__next__() and ps.__next__()</span><br><span class="line">    q, sieve, n = p ** 2, &#123;&#125;, 13</span><br><span class="line">    while True:</span><br><span class="line">        if n not in sieve:</span><br><span class="line">            if n &lt; q:</span><br><span class="line">                yield n</span><br><span class="line">            else:</span><br><span class="line">                next, step = q + 2 * p, 2 * p</span><br><span class="line">                while next in sieve:</span><br><span class="line">                    next += step</span><br><span class="line">                sieve[next] = step</span><br><span class="line">                p = ps.__next__()</span><br><span class="line">                q = p ** 2</span><br><span class="line">        else:</span><br><span class="line">            step = sieve.pop(n)</span><br><span class="line">            next = n + step</span><br><span class="line">            while next in sieve:</span><br><span class="line">                next += step</span><br><span class="line">            sieve[next] = step</span><br><span class="line">        n += 2</span><br><span class="line"></span><br><span class="line">def ilog(x, b):  # greatest integer l such that b**l &lt;= x.</span><br><span class="line">    l = 0</span><br><span class="line">    while x &gt;= b:</span><br><span class="line">        x /= b</span><br><span class="line">        l += 1</span><br><span class="line">    return l</span><br><span class="line"></span><br><span class="line">def attack(n):</span><br><span class="line">    for v in count(1):</span><br><span class="line">        for p in primegen():</span><br><span class="line">            e = ilog(isqrt(n), p)</span><br><span class="line">            if e == 0:</span><br><span class="line">                break</span><br><span class="line">            for _ in range(e):</span><br><span class="line">                v = mlucas(v, p, n)</span><br><span class="line">            g = gcd(v - 2, n)</span><br><span class="line">            if 1 &lt; g &lt; n:</span><br><span class="line">                return int(g), int(n // g)  # g|n</span><br><span class="line">            if g == n:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">p, q = attack(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">#NSSCTF&#123;p+1_smooth_number&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="KG8IB">共模攻击</h1>
<h2 id="sr1tL">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e1 = getPrime(16)</span><br><span class="line">e2 = getPrime(16)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c1 = pow(m, e1, n)</span><br><span class="line">c2 = pow(m, e2, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e1 = &#123;e1&#125;&#x27;)</span><br><span class="line">print(f&#x27;e2 = &#123;e2&#125;&#x27;)</span><br><span class="line">print(f&#x27;c1 = &#123;c1&#125;&#x27;)</span><br><span class="line">print(f&#x27;c2 = &#123;c2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 120294155186626082670474649118722298040433501930335450479777638508444129059776534554344361441717048531505985491664356283524886091709370969857047470362547600390987665105196367975719516115980157839088766927450099353377496192206005171597109864609567336679138620134544004766539483664270351472198486955623315909571</span><br><span class="line">e1 = 38317</span><br><span class="line">e2 = 63409</span><br><span class="line">c1 = 42703138696187395030337205860503270214353151588149506110731264952595193757235229215067638858431493587093612397165407221394174690263691095324298012134779703041752810028935711214038835584823385108771901216441784673199846041109074467177891680923593206326788523158180637665813642688824593788192044139055552031622</span><br><span class="line">c2 = 50460092786111470408945316270086812807230253234809303694007902628924057713984397041141665125615735752600114964852157684904429928771531639899496987905067366415806771003121954852465731110629459725994454904159277228514337278105207721011579794604761255522391446534458815389983562890631994726687526070228315925638</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="uOuDB">分析</h2>
当两个用户使用相同的模数 n 、不同的私钥 e 时，加密同一明文消息时即存在共模攻击。

<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1743131506023-9dbd2fbe-a4c3-48cb-964d-7a09032493f2.png"></p>
<p>具体解法我们需要用到扩展欧几里得算法。</p>
<p>扩展欧几里得算法代码实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def extended_gcd(a, b):</span><br><span class="line">    if b == 0:</span><br><span class="line">        return a, 1, 0</span><br><span class="line">    else:</span><br><span class="line">        gcd, x1, y1 = extended_gcd(b, a % b)</span><br><span class="line">        x = y1</span><br><span class="line">        y = x1 - (a // b) * y1</span><br><span class="line">        return gcd, x, y</span><br><span class="line"></span><br><span class="line"># 示例使用</span><br><span class="line">a = 30</span><br><span class="line">b = 20</span><br><span class="line">gcd, x, y = extended_gcd(a, b)</span><br><span class="line">print(f&quot;最大公约数（GCD）：&#123;gcd&#125;&quot;)</span><br><span class="line">print(f&quot;系数 x 和 y 分别为：&#123;x&#125;, &#123;y&#125;&quot;)</span><br><span class="line">print(f&quot;验证贝祖等式：&#123;a&#125;*&#123;x&#125; + &#123;b&#125;*&#123;y&#125; = &#123;gcd&#125;&quot;)</span><br></pre></td></tr></table></figure>





<h2 id="LoqE5">题解1</h2>
使用gmpy2中的gcdext

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 120294155186626082670474649118722298040433501930335450479777638508444129059776534554344361441717048531505985491664356283524886091709370969857047470362547600390987665105196367975719516115980157839088766927450099353377496192206005171597109864609567336679138620134544004766539483664270351472198486955623315909571</span><br><span class="line">e1 = 38317</span><br><span class="line">e2 = 63409</span><br><span class="line">c1 = 42703138696187395030337205860503270214353151588149506110731264952595193757235229215067638858431493587093612397165407221394174690263691095324298012134779703041752810028935711214038835584823385108771901216441784673199846041109074467177891680923593206326788523158180637665813642688824593788192044139055552031622</span><br><span class="line">c2 = 50460092786111470408945316270086812807230253234809303694007902628924057713984397041141665125615735752600114964852157684904429928771531639899496987905067366415806771003121954852465731110629459725994454904159277228514337278105207721011579794604761255522391446534458815389983562890631994726687526070228315925638</span><br><span class="line"></span><br><span class="line">_, s1, s2 = gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">print(s1)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line">m = powmod(c1, s1, n)*powmod(c2, s2, n) % n</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">#NSSCTF&#123;same_module_attack!&#125;</span><br></pre></td></tr></table></figure>



<h2 id="XEj4o">题解2</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 120294155186626082670474649118722298040433501930335450479777638508444129059776534554344361441717048531505985491664356283524886091709370969857047470362547600390987665105196367975719516115980157839088766927450099353377496192206005171597109864609567336679138620134544004766539483664270351472198486955623315909571</span><br><span class="line">e1 = 38317</span><br><span class="line">e2 = 63409</span><br><span class="line">c1 = 42703138696187395030337205860503270214353151588149506110731264952595193757235229215067638858431493587093612397165407221394174690263691095324298012134779703041752810028935711214038835584823385108771901216441784673199846041109074467177891680923593206326788523158180637665813642688824593788192044139055552031622</span><br><span class="line">c2 = 50460092786111470408945316270086812807230253234809303694007902628924057713984397041141665125615735752600114964852157684904429928771531639899496987905067366415806771003121954852465731110629459725994454904159277228514337278105207721011579794604761255522391446534458815389983562890631994726687526070228315925638</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def extended_gcd(a, b):</span><br><span class="line">    if b == 0:</span><br><span class="line">        return a, 1, 0</span><br><span class="line">    else:</span><br><span class="line">        gcd, x1, y1 = extended_gcd(b, a % b)</span><br><span class="line">        x = y1</span><br><span class="line">        y = x1 - (a // b) * y1</span><br><span class="line">        return gcd, x, y</span><br><span class="line"></span><br><span class="line">_, s1, s2 = gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">m = powmod(c1, s1, n)*powmod(c2, s2, n) % n</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;same_module_attack!&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="vLESO">dp&dq泄露攻击</h1>
<h2 id="ne1pF">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(128)</span><br><span class="line">d = inverse(e, (p-1)*(q-1))</span><br><span class="line"></span><br><span class="line">dp = d % (p-1)</span><br><span class="line">dq = d % (q-1)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;p = &#123;p&#125;&#x27;)</span><br><span class="line">print(f&#x27;q = &#123;q&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line">print(f&#x27;dp = &#123;dp&#125;&#x27;)</span><br><span class="line">print(f&#x27;dq = &#123;dq&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">p = 13070310882303377463944295715444821218324151935347454554272870042925400761984585838979931730897626589859098834802923539617244712852188293321626061072925723</span><br><span class="line">q = 10411551818233737389114520103233235272671271111546186997024935593000298916988792710521511848414549553426943998093077337023514210631662189798921671306236009</span><br><span class="line">c = 62492280219693914005334023569480350249964827909276875032578276064973191654731196407886841145547165693859745313398152742796887457192397932684370631253099255490064673499746314452067588181106154875239985334051909867580794242253066085627399488604907196244465911471895118443199543361883148941963668551684228132814</span><br><span class="line">dp = 11568639544706374912496682299967972464196129347160700749666263275305083977187758414725188926013198988871173614336707804756059951725809300386252339177953017</span><br><span class="line">dq = 3455040841431633020487528316853620383411361966784138992524801280785753201070735373348570840039176552952269927122259706586236960440300255065994052962742469</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="g2nBR">分析</h2>
这道题中，没有给出 e 和 d 的值，但是给出了 dp 和 dq 这两个从未见过的东西。

<p>回忆 RSA 的解密:</p>
<pre><code>                                                          m ≡ c^d (mod n)
</code></pre>
<p>由中国剩余定理：</p>
<pre><code>                                                      m1 ≡ m ≡ c^d (mod p)                   (1)

                                                      m2 ≡ m ≡ c^d (mod q)                   (2)
</code></pre>
<p>(1)式可变为 </p>
<pre><code>                                                          c^d ≡ m1 + k * p                        (3)
</code></pre>
<p>代入(2)式</p>
<pre><code>                                                     m2 ≡ m1 + k*p (mod q)
</code></pre>
<p>即</p>
<pre><code>                                                 (m2 - m1) * p⁻¹ ≡ k (mod q)

                                                 k ≡ ((m2 - m1) * p⁻¹  mod q)
</code></pre>
<p>代入(3)式</p>
<pre><code>                                          c^d ≡ m1 + ((m2 - m1) * p⁻¹  mod q) * p
</code></pre>
<p>计算出了 c^d 的值，n 的值题目已经给出，可以直接解密了。</p>
<h2 id="wTxDD">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">p = 13070310882303377463944295715444821218324151935347454554272870042925400761984585838979931730897626589859098834802923539617244712852188293321626061072925723</span><br><span class="line">q = 10411551818233737389114520103233235272671271111546186997024935593000298916988792710521511848414549553426943998093077337023514210631662189798921671306236009</span><br><span class="line">c = 62492280219693914005334023569480350249964827909276875032578276064973191654731196407886841145547165693859745313398152742796887457192397932684370631253099255490064673499746314452067588181106154875239985334051909867580794242253066085627399488604907196244465911471895118443199543361883148941963668551684228132814</span><br><span class="line">dp = 11568639544706374912496682299967972464196129347160700749666263275305083977187758414725188926013198988871173614336707804756059951725809300386252339177953017</span><br><span class="line">dq = 3455040841431633020487528316853620383411361966784138992524801280785753201070735373348570840039176552952269927122259706586236960440300255065994052962742469</span><br><span class="line"></span><br><span class="line">invp = invert(p, q)</span><br><span class="line">m1 = powmod(c, dp, p)</span><br><span class="line">m2 = powmod(c, dq, q)</span><br><span class="line">m = (((m2 - m1)*invp) % q)*p + m1</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;dp&amp;dq_leak&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="jthZV">dp泄露攻击</h1>
<h2 id="NBIxa">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27; + b&#x27;1&#x27;*100</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line">d = inverse(e, (p-1)*(q-1))</span><br><span class="line"></span><br><span class="line">dp = d % (p-1)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line">print(f&#x27;dp = &#123;dp&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 79201858340517902370077926747686673001645933420450220163567700296597652438275339093680329918615445030212417351430952656177171126427547284822789947152085534939195866096891005587613262293569611913019639653984932469691636338705418303482885987114085769045348074530172292982433373154900841135911548332400167290083</span><br><span class="line">c = 70109332985937768446301118795636999352761371683181615470371772202170324747707233792154935611826981798791499937601162039878070094663516868746240133223110650205575807753345252087103328657073552992431511929172241702073381723302143955977662087561904058172777520360991685289300855900793806183473523998422682944404</span><br><span class="line">dp = 3098334089252415941833934532457314870210700261428241562420857845879512952043729097866485406309479489101668423603305497982177150304625615059119312238777275</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="lDxOM">分析</h2>
与上一题不同，这一题中我们有e，但是失去了dq。



<p>已知</p>
<pre><code>                                                            dp ≡ d (mod (p-1))
</code></pre>
<p>因为</p>
<pre><code>                                                          ed ≡ 1 (mod (p-1)(q-1))
</code></pre>
<p>所以</p>
<pre><code>                                                             ed ≡ 1 (mod (p-1)）
</code></pre>
<p>即</p>
<pre><code>                                                           dp * e ≡ 1 (mod (p-1)）

                                                           dp * e = 1 + k * (p-1)
</code></pre>
<p>又因为 dp &lt; p-1 ，所以 e &gt; k ，则我们可以在[1,e)的范围遍历k，找到满足等式的整数解，即可解出p 。</p>
<h2 id="ZAEZ4">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 79201858340517902370077926747686673001645933420450220163567700296597652438275339093680329918615445030212417351430952656177171126427547284822789947152085534939195866096891005587613262293569611913019639653984932469691636338705418303482885987114085769045348074530172292982433373154900841135911548332400167290083</span><br><span class="line">c = 70109332985937768446301118795636999352761371683181615470371772202170324747707233792154935611826981798791499937601162039878070094663516868746240133223110650205575807753345252087103328657073552992431511929172241702073381723302143955977662087561904058172777520360991685289300855900793806183473523998422682944404</span><br><span class="line">dp = 3098334089252415941833934532457314870210700261428241562420857845879512952043729097866485406309479489101668423603305497982177150304625615059119312238777275</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">for k in range(1, e):</span><br><span class="line">    if (e * dp - 1) % k == 0:</span><br><span class="line">        p = (e * dp - 1) // k + 1</span><br><span class="line">        if n % p == 0:</span><br><span class="line">            q = n // p</span><br><span class="line">            d = invert(e, (p - 1) * (q - 1))</span><br><span class="line">            m = powmod(c, d, n)</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;just_dp_leak&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="HRKjJ">e很大的dp泄露攻击</h1>
<h2 id="aSJLL">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;NSSCTF&#123;******&#125;&#x27; + b&#x27;1&#x27;*80</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(128)</span><br><span class="line">d = inverse(e, (p-1)*(q-1))</span><br><span class="line"></span><br><span class="line">dp = d % (p-1)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><span class="line">print(f&#x27;c = &#123;c&#125;&#x27;)</span><br><span class="line">print(f&#x27;dp = &#123;dp&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 108280026722298796068968170303156759745471686664814404724171434502249429011870583595808692893118419248225924869164875379709992190884930717654004006466664403479467573176438601715156464950045121937338569942817256182277141174728470067308962244296992229214749863655518517510026063088263849891990324547823192559069</span><br><span class="line">e = 305691242207901867366357529364270390903</span><br><span class="line">c = 26537258289122728220745496185201994733321402056894636636642710319261241111675937946139938310952968353253866895253865273981912174303818938005932883052177988834834575591342856235464380238486868448329727891268391728758132913642966389278296932186703733187105516710825918064228397602264185334108934765627411913661</span><br><span class="line">dp = 2656631506624565349527023729530989647164022271235521672257622068579788839123502046687139927161669209201953909023994372208117081512139181611949631467292513</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="Rac62">分析</h2>
这题也是 dp 泄露，在上一题中，采用了遍历[1,e)的方式来进行爆破，但是这道题的 e 很大，有128位，再选择

<p>爆破明显不现实。</p>
<p>由上一题，我们知道 </p>
<pre><code>                                                             dp * e = 1 + k * (p-1)
</code></pre>
<p>我们选取一个与 p 互素的整数 a ，使得gcd(a，p)&#x3D;1，则</p>
<pre><code>                                                a^(dp * e) ≡ a^(1 + k * (p-1))  (mod p)
</code></pre>
<p>由费马小定理</p>
<pre><code>                                                       a^(1 + k * (p-1)) ≡ a (mod p)
</code></pre>
<p>得</p>
<pre><code>                                                           a^(dp * e) ≡ a (mod p)

                                                            a^(dp * e) = a + k * p

                                                            k * p = a^(dp * e) - a
</code></pre>
<p>所以</p>
<pre><code>                                                              p  = gcd( k * p , n )

                                                        p  = gcd( a^(dp * e) - a , n )
</code></pre>
<p>之后正常解密即可。</p>
<h2 id="Q2RqT">题解</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">n = 108280026722298796068968170303156759745471686664814404724171434502249429011870583595808692893118419248225924869164875379709992190884930717654004006466664403479467573176438601715156464950045121937338569942817256182277141174728470067308962244296992229214749863655518517510026063088263849891990324547823192559069</span><br><span class="line">e = 305691242207901867366357529364270390903</span><br><span class="line">c = 26537258289122728220745496185201994733321402056894636636642710319261241111675937946139938310952968353253866895253865273981912174303818938005932883052177988834834575591342856235464380238486868448329727891268391728758132913642966389278296932186703733187105516710825918064228397602264185334108934765627411913661</span><br><span class="line">dp = 2656631506624565349527023729530989647164022271235521672257622068579788839123502046687139927161669209201953909023994372208117081512139181611949631467292513</span><br><span class="line"></span><br><span class="line">m = getPrime(128)  #这里要求m要与p互素，因此我们使用getPrime获取一个素数即可，位数不太大就好。</span><br><span class="line">p = gcd(powmod(m, e*dp, n) - m, n)</span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p - 1) * (q - 1))</span><br><span class="line">m = powmod(c, d, n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">#NSSCTF&#123;p_leak_but_with_huge_e&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="N6fJU">d泄露攻击</h1>
<h2 id="P1DKm">题目</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line"></span><br><span class="line">assert p &lt; q</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e = 65537</span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line"></span><br><span class="line">print(f&#x27;n = &#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;d = &#123;d&#125;&#x27;)</span><br><span class="line">print(&#x27;flag is NSSCTF&#123;md5(p)&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 113917408220469425995764932761465306974540330325378601642830241920567032775895088098706711486764203845425248022960733155994427766750033219106642310531864450654102562104771892268897793145789045570107312401570269581223945259704851104645493075550316424129401227653740942495625720165869565257394427181127734628103</span><br><span class="line">d = 15762135247924329080208071933121250646888501386858311483546464344350547831176536290630826247188272280853810047335214127264865205744683174860903496832368687060941437002920094364116706593296591581117381565805322046922482804679245558495134876677733584718947309975077159564300049936769192724856722338627154192353</span><br><span class="line">flag is NSSCTF&#123;md5(p)&#125;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="PydK9">分析</h2>
[原理](https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_d_attack/#_1)

<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1743147159553-802dde9c-34fa-4a07-bb2b-9b472c3ee5f8.png"></p>
<p>总之，d 泄露后，可以通过 d 获知 p、q ，泄露 d 的后果和泄露 p、q 的后果是一样的。</p>
<p>python代码实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">def divide_pq(e, d, n):</span><br><span class="line">    k = e*d - 1</span><br><span class="line">    while True:</span><br><span class="line">        g = random.randint(2, n-1)</span><br><span class="line">        t = k</span><br><span class="line">        while True:</span><br><span class="line">            if t % 2 != 0:</span><br><span class="line">                break</span><br><span class="line">            t //= 2</span><br><span class="line">            x = pow(g, t, n)</span><br><span class="line">            if x &gt; 1 and gmpy2.gcd(x-1, n) &gt; 1:</span><br><span class="line">                p = gmpy2.gcd(x-1, n)</span><br><span class="line">                return (p, n//p)</span><br><span class="line">            </span><br><span class="line">p, q = divide_pq(e, d, n)</span><br><span class="line">print(f&#x27;p = &#123;p&#125;&#x27;)</span><br><span class="line">print(f&#x27;q = &#123;q&#125;&#x27;)</span><br></pre></td></tr></table></figure>



<h2 id="IfsuM">题解1</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">import gmpy2</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def divide_pq(e, d, n):</span><br><span class="line">    k = e * d - 1</span><br><span class="line">    while True:</span><br><span class="line">        g = random.randint(2, n - 1)</span><br><span class="line">        t = k</span><br><span class="line">        while True:</span><br><span class="line">            if t % 2 != 0:</span><br><span class="line">                break</span><br><span class="line">            t //= 2</span><br><span class="line">            x = pow(g, t, n)</span><br><span class="line">            if x &gt; 1 and gmpy2.gcd(x - 1, n) &gt; 1:</span><br><span class="line">                p = gmpy2.gcd(x - 1, n)</span><br><span class="line">                return (p, n // p)</span><br><span class="line"></span><br><span class="line">n = 113917408220469425995764932761465306974540330325378601642830241920567032775895088098706711486764203845425248022960733155994427766750033219106642310531864450654102562104771892268897793145789045570107312401570269581223945259704851104645493075550316424129401227653740942495625720165869565257394427181127734628103</span><br><span class="line">d = 15762135247924329080208071933121250646888501386858311483546464344350547831176536290630826247188272280853810047335214127264865205744683174860903496832368687060941437002920094364116706593296591581117381565805322046922482804679245558495134876677733584718947309975077159564300049936769192724856722338627154192353</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">p, q = divide_pq(e, d, n)</span><br><span class="line">if p &gt; q:</span><br><span class="line">    p, q = q, p</span><br><span class="line"></span><br><span class="line">print(f&#x27;p = &#123;p&#125;&#x27;)</span><br><span class="line">print(f&#x27;q = &#123;q&#125;&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(print(&#x27;NSSCTF&#123;%s&#125;&#x27; % hashlib.md5(str(p).encode()).hexdigest()))</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;f56299b1e5339dfebe8ea3d32dd44043&#125;</span><br></pre></td></tr></table></figure>



<h2 id="pzen1">题解2</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from gmpy2 import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">n = 113917408220469425995764932761465306974540330325378601642830241920567032775895088098706711486764203845425248022960733155994427766750033219106642310531864450654102562104771892268897793145789045570107312401570269581223945259704851104645493075550316424129401227653740942495625720165869565257394427181127734628103</span><br><span class="line">d = 15762135247924329080208071933121250646888501386858311483546464344350547831176536290630826247188272280853810047335214127264865205744683174860903496832368687060941437002920094364116706593296591581117381565805322046922482804679245558495134876677733584718947309975077159564300049936769192724856722338627154192353</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = e*d - 1</span><br><span class="line">s = 0</span><br><span class="line"></span><br><span class="line">while t % 2 == 0:</span><br><span class="line">    s += 1</span><br><span class="line">    t //= 2</span><br><span class="line"></span><br><span class="line">found = False</span><br><span class="line"></span><br><span class="line">for i in range(1, s):</span><br><span class="line">    c1 = powmod(2, powmod(2, i-1, n)*t, n)</span><br><span class="line">    c2 = powmod(2, powmod(2, i, n)*t, n)</span><br><span class="line">    if c1 != 1 and c1 != (-1 % n) and c2 == 1:</span><br><span class="line">        p = gcd(c1 - 1, n)</span><br><span class="line">        q = n // p</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">if p &gt; q:</span><br><span class="line">    p, q = q, p</span><br><span class="line"></span><br><span class="line">print(&#x27;NSSCTF&#123;%s&#125;&#x27; % hashlib.md5(str(p).encode()).hexdigest())</span><br><span class="line"></span><br><span class="line"># NSSCTF&#123;f56299b1e5339dfebe8ea3d32dd44043&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
